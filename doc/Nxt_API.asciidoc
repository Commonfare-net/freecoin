[[firstHeading]]
Nxt API
-------

Description
~~~~~~~~~~~

The Nxt API allows interaction with Nxt nodes using HTTP requests to
port 7876. Most HTTP requests can use either the GET or POST methods,
but some API calls accept only the POST method for security reasons.
Responses are returned as JSON objects.

Each API call is documented below, with definitions given for HTTP
request parameters and JSON response fields, followed by an example:

* The JSON response fields are each followed by one of _S_ for string,
_A_ for array, _O_ for object, _N_ for number or _B_ for boolean.
* In the examples, the Nxt node is represented as _localhost_ and
requests and responses are formatted for easy reading; line breaks and
spaces are not actually used except in some parameter values. All
requests are in URL format which implies the HTTP GET method. When GET
is allowed, the URL can be entered into a browser URL field but proper
URL encoding is usually required (e.g., spaces in a parameter value must
be replaced by _+_ or __%20__). Otherwise, the URL should be used as a
guide to preparing an HTTP POST request using cURL, for example.

All API calls can be viewed and tested at http://localhost:7876/test
while the local server node is running. For specific API calls, use
http://localhost:7876/test?requestType=__specificRequestType__.

This document corresponds to
link:/wiki/Nxt_Software_Change_Log#Version_1.4.14[Nxt Software Version
1.4.14].

General Notes
~~~~~~~~~~~~~

Genesis Block
^^^^^^^^^^^^^

Many API requests make reference to the genesis block. FYI, the genesis
block's ID is
http://blocks.nxtcrypto.org/nxt/nxt.cgi?action=1000&blk=2680262203532249785[2680262203532249785].
Sending messages, selling aliases, and leasing balances to the Genesis
account are no longer allowed since the Monetary System block.

Flexible Account IDs
^^^^^^^^^^^^^^^^^^^^

All API requests that require an account ID accept either an account
number or the corresponding link:/wiki/RS_Address_Format[Reed-Solomon
address].

Quantity Units NXT, NQT and QNT
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The Nxt system has a currency NXT used to quantify value in the system.
Like all currencies, NXT circulates in the system, moving from one user
to another by payments and purchases. Also, a small fee is required for
every transaction, including those in which no NXT is transfered, such
as simple messages. This fee goes to the owner of the node that forges
(generates) the new block containing the transaction that is accepted
onto the blockchain.

One billion NXT were created in the
link:/wiki/Nxt_API#Genesis_Block[Genesis Block], and no new NXT will
ever be created. As of block 134,000 NXT became divisible to eight
decimal places. Yet internally, the currency is still stored in integer
form in units of NQT or NxtQuant, where 1 NXT = 10^8^ NQT. All
parameters and fields in the API involving a quantity of NXT are
denominated in units of NQT, for example __feeNQT__. The only exception
is the field __effectiveBalanceNXT__, used in forging calculations.

The Nxt system can be thought of as an asset owned by all who posses
NXT. In this sense, NXT quantifies ownership of or stake in the system.
Stakeholders are entitled to forge blocks and collect transaction fees
in proportion to the amount of NXT they possess.

Other assets can be created within Nxt using
link:/wiki/Nxt_API#Issue_Asset[Issue Asset]. The issuer must specify the
number of decimal places to use in quantifying the asset, and the amount
of the asset to create in generic units of QNT or Quant, distinct from
NQT. Quantities of assets are stored internally as integers in units of
QNT, and assets are priced in NQT per QNT.

For example, the mgwBTC (multi-gateway Bitcoin) asset is divisible to
eight decimal places, like the original bitcoin (BTC) it is a proxy for.
Therefore a QNT of mgwBTC is equivalent to a Satoshi (10^-8^ BTC). To
place an order to sell 25,000,000 QNT of the mgwBTC asset at a price of
20,000 NQT per QNT, use the API Call
link:/wiki/Nxt_API#Place_Order[Place Order] with
__requestType__=__placeAskOrder__, __quantityQNT__=25000000 and
__priceNQT__=20000. If the entire quantity is sold on the Asset
Exchange, the seller will receive 500,000,000,000 NQT (__quantityQNT__ *
__priceNQT__) from the buyer(s). This trade corresponds to selling 0.25
mgwBTC for 5,000 NXT, which is how the trade appears in the
link:/wiki/Nxt_client_interface[NRS client]. In this case, the price of
20,000 in NQT per QNT is also the price in NXT per mgwBTC, since both
mgwBTC and NXT are divisible to eight decimal places.

Currencies in the Nxt
link:/wiki/Nxt_API#Monetary_System_Operations[Monetary System] are a
special kind of asset with properties and exchange methods suitable for
currencies. With respect to quantities, exchange rates and decimal
places, the Monetary System API calls use NXT, NQT and QNT in exactly
the same way as assets.

Creating Unsigned Transactions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

All API requests that create a new transaction will accept either a
_secretPhrase_ or a _publicKey_ parameter:

* If _secretPhrase_ is supplied, a transaction is created, signed at the
server, and broadcast by the server as usual.
* If only a _publicKey_ parameter is supplied as a 64-digit (32-byte)
hex string, the transaction will be prepared by the server and returned
in the JSON response as __unsignedtransactionBytes__. This hex string
along with _secretPhrase_ can then be supplied to
link:/wiki/Nxt_API#Sign_Transaction[Sign Transaction] and the resulting
signed _transactionBytes_ can then be supplied to
link:/wiki/Nxt_API#Broadcast_Transaction[Broadcast Transaction].

Escrow Operations
^^^^^^^^^^^^^^^^^

All API requests that create a new transaction will accept an optional
_referencedTransactionFullHash_ parameter which creates a chained
transaction, meaning that the new transaction cannot be confirmed unless
the referenced transaction is also confirmed. This feature allows a
simple way of transaction escrow:

* Alice prepares and signs a transaction A, but doesn't broadcast it by
setting the _broadcast_ parameter to __false__. She sends to Bob the
__unsignedTransactionBytes__, the _fullHash_ of the transaction, and the
__signatureHash__. All of those are included in the JSON returned by the
API request. (Warning: make sure not to send the signed
__transactionBytes__, or the _signature_ itself, as then Bob can just
broadcast transaction A himself).
* Bob prepares, signs and broadcasts transaction B, setting the
_referencedTransactionFullHash_ parameter to the _fullHash_ of A
provided by Alice. He can verify that this hash indeed belongs to the
transaction he expects from Alice, by using
link:/wiki/Nxt_API#Calculate_Full_Hash[Calculate Full Hash], which takes
_unsignedTransactionBytes_ and _signatureHash_ (both of which Alice has
also sent to Bob). He can also use
link:/wiki/Nxt_API#Parse_Transaction[Parse Transaction] to decode the
unsigned bytes and inspect all transaction fields.
* Transaction B is accepted in the unconfirmed transaction pool, but as
long as A is still missing, B will not be confirmed, i.e. will not be
included in the blockchain. If A is never submitted, B will eventually
expire -- so Bob should make sure to set a long enough deadline, such as
the maximum of 1440 minutes.
* Once in the unconfirmed transactions pool, Bob has no way of recalling
B back. So now Alice can safely submit her transaction A, by just
broadcasting the _signedTransactionBytes_ she got in the first step.
Transaction A will get included in the blockchain first, and in the next
block Bob's transaction B will also be included.

Note that while the above scheme is good enough for a simple escrow, the
blockchain does not enforce that if A is included, B will also be
included. It may happen due to forks and blockchain reorganization, that
B never gets a chance to be included and expires unconfirmed, while A
still remains in the blockchain. However, it is not practically possible
for Bob to intentionally cause such chain of events and to prevent B
from being confirmed.

Create Transaction
~~~~~~~~~~~~~~~~~~

The following API calls create Nxt transactions using HTTP POST
requests. Follow the links for examples and HTTP POST request parameters
specific to each call. Refer to the sections below for
link:/wiki/Nxt_API#Create_Transaction_Request[HTTP POST request
parameters] and link:/wiki/Nxt_API#Create_Transaction_Response[JSON
response fields] common to all calls that create transactions. Calls in
_italics_ are phasing-safe (refer to
link:/wiki/Nxt_API#Get_Constants[Get Constants] and
link:/wiki/Nxt_API#Create_Phasing_Poll[Create Phasing Poll])

* _link:/wiki/Nxt_API#Send_NXT[Send NXT]_
* _link:/wiki/Nxt_API#Set_Account_Information[Set Account Information]_
* link:/wiki/Nxt_API#Buy_.2F_Sell_Alias[Buy / Sell Alias]
* link:/wiki/Nxt_API#Delete_Alias[Delete Alias]
* link:/wiki/Nxt_API#Create_.2F_Assign_Alias[Create / Assign Alias]
* link:/wiki/Nxt_API#Send_Message[Send Message]
* _link:/wiki/Nxt_API#Cancel_Order[Cancel Order]_
* _link:/wiki/Nxt_API#Dividend_Payment[Dividend Payment]_
* _link:/wiki/Nxt_API#Issue_Asset[Issue Asset]_
* _link:/wiki/Nxt_API#Place_Order[Place Order]_
* _link:/wiki/Nxt_API#Transfer_Asset[Transfer Asset]_
* _link:/wiki/Nxt_API#DGS_Delisting[DGS Delisting]_
* link:/wiki/Nxt_API#DGS_Delivery[DGS Delivery]
* link:/wiki/Nxt_API#DGS_Feedback[DGS Feedback]
* _link:/wiki/Nxt_API#DGS_Listing[DGS Listing]_
* link:/wiki/Nxt_API#DGS_PriceChange[DGS PriceChange]
* link:/wiki/Nxt_API#DGS_Purchase[DGS Purchase]
* link:/wiki/Nxt_API#DGS_Quantity_Change[DGS Quantity Change]
* link:/wiki/Nxt_API#DGS_Refund[DGS Refund]
* _link:/wiki/Nxt_API#Lease_Balance[Lease Balance]_
* link:/wiki/Nxt_API#Currency_Buy_.2F_Sell[Currency Buy / Sell]
* link:/wiki/Nxt_API#Currency_Mint[Currency Mint]
* link:/wiki/Nxt_API#Currency_Reserve_Claim[Currency Reserve Claim]
* link:/wiki/Nxt_API#Currency_Reserve_Increase[Currency Reserve
Increase]
* link:/wiki/Nxt_API#Delete_Currency[Delete Currency]
* link:/wiki/Nxt_API#Issue_Currency[Issue Currency]
* link:/wiki/Nxt_API#Publish_Exchange_Offer[Publish Exchange Offer]
* link:/wiki/Nxt_API#Transfer_Currency[Transfer Currency]
* link:/wiki/Nxt_API#Create_Poll[Create Poll]
* link:/wiki/Nxt_API#Cast_Vote[Cast Vote]
* _link:/wiki/Nxt_API#Approve_Transaction[Approve Transaction]_

Create Transaction Request
^^^^^^^^^^^^^^^^^^^^^^^^^^

The following HTTP POST parameters are common to all API calls that
create transactions:

* _secretPhrase_ is the secret passphrase of the account (optional, but
transaction neither signed nor broadcast if omitted)
* _publicKey_ is the public key of the account (optional if
_secretPhrase_ provided)
* _feeNQT_ is the fee (in NQT) for the transaction: minimum 1000 NXT for
link:/wiki/Nxt_API#Issue_Asset[Issue Asset], [25000, 1000, 40] NXT for
[3-letter, 4-letter, 5-letter] link:/wiki/Nxt_API#Issue_Currency[Issue
Currency], 40 NXT for re-issue of any currency, [2, 21] NXT for a
[basic, required-minimum-balance]
link:/wiki/Nxt_API#Create_Phasing_Poll[Create Phasing Poll] (plus 1 NXT
for each option (answer) beyond 20), 1 NXT otherwise, where 1 NXT =
100000000 NQT
* _deadline_ is the deadline (in minutes) for the transaction to be
confirmed
* _referencedTransactionFullHash_ creates a chained transaction, meaning
that the current transaction cannot be confirmed unless the referenced
transaction is also confirmed (optional)
* _broadcast_ is set to _false_ to prevent broadcasting the transaction
to the network (optional)

**Note**: An optional arbitrary message can be appended to any
transaction by adding message-related parameters as in
link:/wiki/Nxt_API#Send_Message[Send Message]. Any phasing-safe
transaction (refer to link:/wiki/Nxt_API#Create_Transaction[Create
Transaction]) can have its execution deferred conditionally based on the
results of a phasing poll (refer to
link:/wiki/Nxt_API#Create_Phasing_Poll[Create Phasing Poll]).

Create Transaction Response
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following JSON response fields are common to all API calls that
create transactions:

* _signatureHash_ (S) is a SHA-256 hash of the transaction signature
* _unsignedTransactionBytes_ (S) are the unsigned transaction bytes
* _transactionJSON_ (O) is a transaction object (refer to
link:/wiki/Nxt_API#Get_Transaction[Get Transaction] for details)
* _broadcasted_ (B) is _true_ if the transaction was broadcast, _false_
otherwise
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _transactionBytes_ (S) are the signed transaction bytes
* _fullHash_ (S) is the full hash of the signed transaction
* _transaction_ (S) is the ID of the newly created transaction

Account Operations
~~~~~~~~~~~~~~~~~~

Get Account
^^^^^^^^^^^

Get account information given an account ID.

*Request:*

* _requestType_ is _getAccount_
* _account_ is the account ID
* _includeLessors_ is _false_ to omit __lessors__, _lessorsRS_ and
_lessorsInfo_ (optional)
* _includeAssets_ is _false_ to omit _assetBalances_ and
_unconfirmedAssetBalances_ (optional)
* _includeCurrencies_ is _false_ to omit _accountCurrencies_ (optional)

*Response:*

* _unconfirmedBalanceNQT_ (S) is _balanceNQT_ less unconfirmed outgoing
transactions, the balance displayed in the client
* _effectiveBalanceNXT_ (N) is the balance (in NXT) of the account
available for forging: the unleased guaranteedBalance of this account
plus the leased guaranteedBalance of all lessors to this account
* _lessorsInfo_ (A) is an array of lessor objects including the fields
_currentHeightTo_ (S), _nextHeightFrom_ (S), _effectiveBalanceNXT_ (S),
_nextLesseeRS_ (S), _currentLesseeRS_ (S), _currentHeightFrom_ (S),
_nextHeightTo_ (S)
* _lessors_ (A) is an array of lessor account IDs
* _currentLessee_ (S) is the account number of the lessee, if applicable
* _currentLeasingHeightTo_ (N) is the block height when the lease
completes, if applicable
* _forgedBalanceNQT_ (S) is the balance (in NQT) that the account has
forged
* _balanceNQT_ (S) is the minimally confirmed basic balance (in NQT) of
the account
* _publicKey_ (S) is the public key of the account
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _assetBalances_ (A) is an array of asset objects including the fields
_balanceQNT_ (S) and _asset_ (S) ID
* _guaranteedBalanceNQT_ (S) is the balance (in NQT) of the account with
at least 1440 confirmations
* _unconfirmedAssetBalances_ (A) is an array of asset objects including
the fields _unconfirmedBalanceQNT_ (S) and _asset_ (S) ID
* _currentLesseeRS_ (S) is the Reed-Solomon address of the lessee
account
* _accountRS_ (S) is the Reed-Solomon address of the account
* _lessorsRS_ (A) is an array of Reed-Solomon lessor account addresses
* _accountCurrencies_ (A) is an array of currency objects (refer to
link:/wiki/Nxt_API#Get_Account_Currencies[Get Account Currencies] and
for details)
* _name_ (S) is the name associated with the account, if applicable
* _description_ (S) is the description of the account, if applicable
* _account_ (S) is the account number
* _currentLeasingHeightFrom_ (N) is the block height when the lease
starts, if applicable

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getAccount&
    account=NXT-4VNQ-RWZC-4WWQ-GVM8S
------------------------------------

*Response:*

------------------------------------------------------------
{
    "unconfirmedBalanceNQT": "2501162882344",
    "effectiveBalanceNXT": 13983,
    "lessorsInfo": [
        {
            "currentHeightTo": "341420",
            "nextHeightFrom": "341420",
            "effectiveBalanceNXT": "544525",
            "nextLesseeRS": "NXT-7WVC-W7TJ-REQ2-4VDJD",
            "currentLesseeRS": "NXT-7WVC-W7TJ-REQ2-4VDJD",
            "currentHeightFrom": "308653",
            "nextHeightTo": "374187"
        }
    ],
    "currentLessee": "7114946486381367146",
    "currentLeasingHeightTo": 281179,
    "forgedBalanceNQT": "0",
    "balanceNQT": "2501162882344",
    "publicKey": "73080c6a224062660184f10ebb7fb431d4593...",
    "requestProcessingTime": 2,
    "assetBalances": [
        {
            "balanceQNT": "96651298",
            "asset": "4551058913252105307"
        }
    ],
    "guaranteedBalanceNQT": "1398383666344",
    "unconfirmedAssetBalances": [
        {
            "unconfirmedBalanceQNT": "96651298",
            "asset": "4551058913252105307"
        }
    ],
    "currentLesseeRS": "NXT-TMVC-69YC-SJB4-8YCH7",
    "accountRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
    "name": "mystical",
    "account": "17013046603665206934",
    "currentLeasingHeightFrom": 279739
}
------------------------------------------------------------

_Verified 7-Nov-14_

Get Account Block Count
^^^^^^^^^^^^^^^^^^^^^^^

Get the number of blocks forged by an account.

*Request:*

* _requestType_ is _getAccountBlockCount_
* _account_ is an account ID

*Response:*

* _numberOfBlocks_ (N) is the number of blocks forged by the account
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountBlockCount&
    account=7114946486381367146
-------------------------------------

*Response:*

-------------------------------
{
    "numberOfBlocks": 460,
    "requestProcessingTime": 70
}
-------------------------------

_Verified 13-Nov-14_

Get Account Block IDs
^^^^^^^^^^^^^^^^^^^^^

Get the block IDs of all blocks forged (generated) by an account in
reverse block height order.

*Request:*

* _requestType_ is _getAccountBlockIds_
* _account_ is the account ID
* _timestamp_ is the earliest block (in seconds since the genesis block)
to retrieve (optional)
* _firstIndex_ is a zero-based index to the first block ID to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last block ID to retrieve
(optional)

*Response:*

* _blockIds_ (A) is an array of block IDs
* _requestProcessingTime_ (N) is the API request processing time (in
millsec)

Example
+++++++

*Request:*

-----------------------------------
http://localhost:7876/nxt?
    requestType=getAccountBlockIds&
    account=7114946486381367146&
    lastIndex=5
-----------------------------------

*Response:*

-------------------------------
{
    "blockIds": [
        "6021945980475236545",
        "11040962152457477526",
        "1157648883168692101",
        "9322994768555364845",
        "12862636636638339558",
        "11535040705139271493"
    ],
    "requestProcessingTime": 3
}
-------------------------------

_Verified 8-Nov-14_

Get Account Blocks
^^^^^^^^^^^^^^^^^^

Get all blocks forged (generated) by an account in reverse block height
order.

*Request:*

* _requestType_ is _getAccountBlocks_
* _account_ is the account ID
* _timestamp_ is the earliest block (in seconds since the genesis block)
to retrieve (optional)
* _firstIndex_ is a zero-based index to the first block to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last block to retrieve
(optional)
* _includeTransactions_ is _true_ to retrieve transaction details,
otherwise only transaction IDs are retrieved (optional)

*Response:*

* _blocks_ (A) is an array of blocks (refer to
link:/wiki/Nxt_API#Get_Block[Get Block] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------------
http://localhost:7876/nxt?
    requestType=getAccountBlocks&
    account=7114946486381367146&
    lastIndex=0
---------------------------------

*Response:*

------------------------------------------------------------------------------------------------------
{
    "blocks": [
        {
            "previousBlockHash": "bd8948556e968f1d532cd286a5dd8fde0159d7950467f1ed8fbf26a31d663e99",
            "payloadLength": 386,
            "totalAmountNQT": "0",
            "generationSignature": "74138446cacdb30075492670f7e24fb839434818cb877bba174e37361fc899a1",
            "generator": "7114946486381367146",
            "generatorPublicKey": "dbc809e8237914f25add0d349ea16b2ac05cae6882d0a1782d23605af264d97a",
            "baseTarget": "325377698",
            "payloadHash": "32df67383f63b74f1331bbdb6f1be424c87a1e6423fc7091d81683481eb6c4ca",
            "generatorRS": "NXT-TMVC-69YC-SJB4-8YCH7",
            "nextBlock": "3553212706398858282",
            "numberOfTransactions": 2,
            "blockSignature": "d30e3f95d547fa922feb31303f877a345d0ad8c232778a4507adf9082b5df3...",
            "transactions": [
                "1199750337785535382",
                "8975701802988160413"
            ],
            "version": 3,
            "totalFeeNQT": "200000000",
            "previousBlock": "2130086549390920125",
            "block": "6021945980475236545",
            "height": 278953,
            "timestamp": 30130340
        }
    ],
    "requestProcessingTime": 3
}
------------------------------------------------------------------------------------------------------

_Verified 8-Nov-14_

Get Account ID
^^^^^^^^^^^^^^

Get an account ID given a secret passphrase or public key. POST only.

*Request:*

* _requestType_ is _getAccountId_
* _secretPhrase_ is the secret passphrase of the account (optional)
* _publicKey_ is the public key of the account (optional if
_secretPhrase_ provided)

*Response:*

* _accountRS_ (S) is the Reed-Solomon address of the account
* _publicKey_ (S) is the public key of the account
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _account_ (S) is the account number

Example
+++++++

*Request:*

-----------------------------
http://localhost:7876/nxt?
    requestType=getAccountId&
    secretPhrase=IWontTellYou
-----------------------------

*Response:*

------------------------------------------------------------------------------------
{
    "accountRS": "NXT-L6FM-89WK-VK8P-FCRBB",
    "publicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
    "requestProcessingTime": 2,
    "account": "15323192282528158131"
}
------------------------------------------------------------------------------------

_Verified 7-Nov-14_

Get Account Lessors
^^^^^^^^^^^^^^^^^^^

Get the lessors to an account.

*Request:*

* _requestType_ is _getAccountLessors_
* _account_ is the account ID
* _height_ is the height of the blockchain to determine the lessors
(optional, default is last block)

*Note:* If table trimming is enabled (default), the _height_ must be
within 1440 blocks of the last block.

*Response:*

* _accountRS_ (S) is the Reed-Solomon address of the account
* _account_ (S) is the account number
* _height_ (N) is the height of the blockchain
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _lessors_ (A) is an array of lessor objects including the fields
_lessorRS_ (S), _lessor_ (S) and _guaranteedBalanceNQT_ (S)

Example
+++++++

*Request:*

----------------------------------
http://localhost:7876/nxt?
    requestType=getAccountLessors&
    account=7114946486381367146&
    height=282497
----------------------------------

*Response:*

-------------------------------------------------------
{
    "lessors": [
        {
            "guaranteedBalanceNQT": "2643314085738687",
            "lessorRS": "NXT-MRBN-8DFH-PFMK-A4DBM",
            "lessor": "9918441724915080500"
        }
    ],
    "accountRS": "NXT-TMVC-69YC-SJB4-8YCH7",
    "requestProcessingTime": 1,
    "account": "7114946486381367146",
    "height": 282497
}
-------------------------------------------------------

_Verified 13-Nov-14_

Get Account Public Key
^^^^^^^^^^^^^^^^^^^^^^

Get the public key associated with an account ID.

*Request:*

* _requestType_ is _getAccountPublicKey_
* _account_ is the account ID

*Response:*

* _publicKey_ (S) is the 32-byte public key associated with the account,
returned as a hex string
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountPublicKey&
    account=NXT-L6FM-89WK-VK8P-FCRBB
------------------------------------

*Response:*

-------------------------------------------------------------
{
    "publicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d...",
    "requestProcessingTime": 36
}
-------------------------------------------------------------

_Verified 5-Nov-14_

Get Account Transaction IDs
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the transaction IDs associated with an account in reverse block
timestamp order.

*Request:*

* _requestType_ is _getAccountTransactionIds_
* _account_ is the account ID
* _timestamp_ is the earliest block (in seconds since the genesis block)
to retrieve (optional)
* _type_ is the type of transactions to retrieve (optional)
* _subtype_ is the subtype of transactions to retrieve (optional)
* _firstIndex_ is a zero-based index to the first transaction ID to
retrieve (optional)
* _lastIndex_ is a zero-based index to the last transaction ID to
retrieve (optional)
* _numberOfConfirmations_ is the required number of confirmations per
transaction (optional)
* _withMessage_ is _true_ to retrieve only only transactions having a
message attachment, either non-encrypted or decryptable by the account
(optional)

*Note:* Refer to link:/wiki/Nxt_API#Get_Constants[Get Constants] for
definitions of types and subtypes

*Response:*

* _transactionIds_ (A) is an array of transaction IDs
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-----------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountTransactionIds&
    account=NXT-L6FM-89WK-VK8P-FCRBB
-----------------------------------------

*Response:*

-------------------------------
{
    "transactionIds": [
        "15200507403046301754",
        "10900022216391397990"
    ],
    "requestProcessingTime": 1
}
-------------------------------

_Verified 6-Nov-14_

Get Account Transactions
^^^^^^^^^^^^^^^^^^^^^^^^

Get the transactions associated with an account in reverse block
timestamp order.

*Request:*

* _requestType_ is _getAccountTransactions_
* _account_ is the account ID
* _timestamp_ is the earliest block (in seconds since the genesis block)
to retrieve (optional)
* _type_ is the type of transactions to retrieve (optional)
* _subtype_ is the subtype of transactions to retrieve (optional)
* _firstIndex_ is a zero-based index to the first transaction to
retrieve (optional)
* _lastIndex_ is a zero-based index to the last transaction to retrieve
(optional)
* _numberOfConfirmations_ is the required number of confirmations per
transaction (optional)
* _withMessage_ is _true_ to retrieve only only transactions having a
message attachment, either non-encrypted or decryptable by the account
(optional)

*Note:* Refer to link:/wiki/Nxt_API#Get_Constants[Get Constants] for
definitions of types and subtypes

*Response:*

* _transactions_ (A) is an array of transactions (refer to
link:/wiki/Nxt_API#Get_Transaction[Get Transaction] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountTransactions&
    account=NXT-L6FM-89WK-VK8P-FCRBB
---------------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
"requestProcessingTime": 1,
"transactions": [
    {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "5f0378b7390ff5a815eadd1354de533eef682f139362b153576e2207320a6...",
        "feeNQT": "100000000",
        "transactionIndex": 2,
        "type": 0,
        "confirmations": 1704,
        "fullHash": "3a304584f20cf3d2cbbdd9698ff9a166427005ab98fbe9ca4ad6253651ee81f1",
        "version": 1,
        "ecBlockId": "17321329645912574173",
        "signatureHash": "b35eae7d2f01639810d37694138aa0a86fbbf8a9bf58c2be4f2a5b8f0f30b3f7",
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 0,
        "amountNQT": "100000000",
        "sender": "15323192282528158131",
        "recipientRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
        "recipient": "17013046603665206934",
        "ecBlockHeight": 275727,
        "block": "8455642159445842600",
        "blockTimestamp": 29797208,
        "deadline": 60,
        "transaction": "15200507403046301754",
        "timestamp": 29796934,
        "height": 275730
    },
    {
        "senderPublicKey": "73080c6a224062660184f10ebb7fb431d459364a12403320c7f601f9d75cc547",
        "signature": "7f4a5b70e3f91dd1e7a089c7985bb08f7035666dbfe3e857e706f08ad93f6...",
        "feeNQT": "100000000",
        "transactionIndex": 0,
        "type": 0,
        "confirmations": 1706,
        "fullHash": "6612e07b74a84497b02d5bafea020391dcefadc157dc1cbd56611c66dc11f974",
        "version": 1,
        "ecBlockId": "4218793004869721496",
        "signatureHash": "0fc3d917e37111752004ac13a280ea121799388ff7aaf611f22f3ce93f1df5e0",
        "attachment": {
            "version.PublicKeyAnnouncement": 1,
            "recipientPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c"
        },
        "senderRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
        "subtype": 0,
        "amountNQT": "200000000",
        "sender": "17013046603665206934",
        "recipientRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "recipient": "15323192282528158131",
        "ecBlockHeight": 275723,
        "block": "14241452309033661857",
        "blockTimestamp": 29796841,
        "deadline": 60,
        "transaction": "10900022216391397990",
        "timestamp": 29796542,
        "height": 275728
    }
]
}
----------------------------------------------------------------------------------------------------

_Verified 31-Dec-14_

Get Balance
^^^^^^^^^^^

Get the balance of an account.

*Request:*

* _requestType_ is _getBalance_
* _account_ is an account ID

*Response:*

* _unconfirmedBalanceNQT_ (S) is _balanceNQT_ less unconfirmed outgoing
transactions, the balance displayed in the client
* _guaranteedBalanceNQT_ (S) is the balance (in NQT) of the account with
at least 1440 confirmations
* _effectiveBalanceNXT_ (N) is the balance (in NXT) of the account
available for forging: the unleased guaranteedBalance of this account
plus the leased guaranteedBalance of all lessors to this account
* _forgedBalanceNQT_ (S) is the balance (in NQT) that the account has
forged
* _balanceNQT_ (S) is the minimally confirmed basic balance (in NQT) of
the account
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=getBalance&
    account=7114946486381367146
-------------------------------

*Response:*

---------------------------------------------
{
    "unconfirmedBalanceNQT": "9246231058415",
    "guaranteedBalanceNQT": "9242231058415",
    "effectiveBalanceNXT": 92422,
    "forgedBalanceNQT": "260560000000",
    "balanceNQT": "9246231058415",
    "requestProcessingTime": 1
}
---------------------------------------------

_Verified 8-Nov-14_

Get Guaranteed Balance
^^^^^^^^^^^^^^^^^^^^^^

Get the balance of an account that is confirmed at least a specified
number of times.

*Request:*

* _requestType_ is _getGuaranteedBalance_
* _account_ is an account ID
* _numberOfConfirmations_ is the minimum number of confirmations for a
transaction to be included in the guaranteed balance (optional, if
omitted or zero then minimally confirmed transactions are included)

*Response:*

* _guaranteedBalanceNQT_ (S) is the balance (in NQT) of the account with
at least _numberOfConfirmations_ confirmations
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getGuaranteedBalance&
    account=7114946486381367146&
    numberOfConfirmations=1440
-------------------------------------

*Response:*

--------------------------------------------
{
    "guaranteedBalanceNQT": "9242231058415",
    "requestProcessingTime": 0
}
--------------------------------------------

_Verified 8-Nov-14_

Get Unconfirmed Account Transaction IDs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get a list of unconfirmed transaction IDs associated with an account.

*Request:*

* _requestType_ is _getUnconfirmedTransactionIds_
* _account_ is the account ID (optional)

*Response:*

* _unconfirmedTransactionIds_ (A) is an array of unconfirmed transaction
IDs

Example
+++++++

*Request:*

---------------------------------------------
http://localhost:7876/nxt?
    requestType=getUnconfirmedTransactionIds&
    account=NXT-L6FM-89WK-VK8P-FCRBB
---------------------------------------------

*Response:*

-----------------------------------
{
    "requestProcessingTime": 1,
    "unconfirmedTransactionIds": []
}
-----------------------------------

_Verified 6-Nov-14_

Get Unconfirmed Account Transactions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get a list of unconfirmed transactions associated with an account.

*Request:*

* _requestType_ is _getUnconfirmedTransactions_
* _account_ is the account ID (optional)

*Response:*

* _unconfirmedTransactions_ (A) is an array of unconfirmed transactions
(refer to link:/wiki/Nxt_API#Get_Transaction[Get Transaction] for
details)

Example
+++++++

*Request:*

-------------------------------------------
http://localhost:7876/nxt?
    requestType=getUnconfirmedTransactions&
    account=NXT-L6FM-89WK-VK8P-FCRBB
-------------------------------------------

*Response:*

----------------------------------
{
    "unconfirmedTransactions": [],
    "requestProcessingTime": 1
}
----------------------------------

_Verified 6-Nov-14_

Send NXT
^^^^^^^^

Send NXT to an account. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _sendMoney_
* _amountNQT_ is the amount (in NQT) in the transaction
* _recipient_ is the account ID of the recipient
* _recipientPublicKey_ is the public key of the receiving account
(optional, enhances security of a new account)

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=sendMoney&
    secretPhrase=IWontTellYou&
    recipient=NXT-4VNQ-RWZC-4WWQ-GVM8S&
    amountNQT=100000000&
    feeNQT=100000000&
    deadline=60
---------------------------------------

*Response:*

---------------------------------------------------------------------------------------------------
{
    "signatureHash": "b35eae7d2f01639810d37694138aa0a86fbbf8a9bf58c2be4f2a5b8f0f30b3f7",
    "unsignedTransactionBytes": "001046aac6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "5f0378b7390ff5a815eadd1354de533eef682f139362b153576e2207320a6...",
        "feeNQT": "100000000",
        "type": 0,
        "fullHash": "3a304584f20cf3d2cbbdd9698ff9a166427005ab98fbe9ca4ad6253651ee81f1",
        "version": 1,
        "ecBlockId": "17321329645912574173",
        "signatureHash": "b35eae7d2f01639810d37694138aa0a86fbbf8a9bf58c2be4f2a5b8f0f30b3f7",
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 0,
        "amountNQT": "100000000",
        "sender": "15323192282528158131",
        "recipientRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
        "recipient": "17013046603665206934",
        "ecBlockHeight": 275727,
        "deadline": 60,
        "transaction": "15200507403046301754",
        "timestamp": 29796934,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 8475,
    "transactionBytes": "001046aac6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143...",
    "fullHash": "3a304584f20cf3d2cbbdd9698ff9a166427005ab98fbe9ca4ad6253651ee81f1",
    "transaction": "15200507403046301754"
}
---------------------------------------------------------------------------------------------------

_Verified 4-Nov-14_

Set Account Information
^^^^^^^^^^^^^^^^^^^^^^^

Set account information. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _setAccountInfo_
* _name_ is a name to associate with the account (optional)
* _description_ is a description to associate with the account
(optional)
* _messagePatternRegex_ is a regular expression pattern following the
java.util.regex.Pattern specification; incoming transactions are only
accepted if they contain a plain text message which matches this pattern
(disabled indefinitely due to a security issue)
* _messagePatternFlags_ is a bitmask of java.util.regex.Pattern flags,
such as 2 (Pattern.CASE_INSENSITIVE)

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=setAccountInfo&
    secretPhrase=IWontTellYou&
    name=iwonttellyou
    description=example account
    feeNQT=100000000&
    deadline=60
-------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
    "signatureHash": "15917aafd59ad9cece7dfc127ab256711d1c58a8ed1a0dc7334949ca826d8a32",
    "unsignedTransactionBytes": "0115dfeecb013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "3f5167a3a23677c85aba7fbbc8bc31cddf540a632abebee4a80fe08ba92b9a0...",
        "feeNQT": "100000000",
        "type": 1,
        "fullHash": "2d31c26aa2b0ae4cf233cc4035c555bca0c579bdcef24bc9819132dc2ce5b2e5",
        "version": 1,
        "ecBlockId": "17558522603047297060",
        "signatureHash": "15917aafd59ad9cece7dfc127ab256711d1c58a8ed1a0dc7334949ca826d8a32",
        "attachment": {
            "name": "iwonttellyou",
            "description": "example account",
            "version.AccountInfo": 1
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 5,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "ecBlockHeight": 279080,
        "deadline": 60,
        "transaction": "5525548004452479277",
        "timestamp": 30142175,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 8553,
    "transactionBytes": "0115dfeecb013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "fullHash": "2d31c26aa2b0ae4cf233cc4035c555bca0c579bdcef24bc9819132dc2ce5b2e5",
    "transaction": "5525548004452479277"
}
----------------------------------------------------------------------------------------------------

_Verified 8-Nov-14_

Alias Operations
~~~~~~~~~~~~~~~~

Buy / Sell Alias
^^^^^^^^^^^^^^^^

Buy or sell an alias. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is either _buyAlias_ or _sellAlias_
* _alias_ is the ID of the alias (optional)
* _aliasName_ is the alias name (optional if _alias_ provided)
* _priceNQT_ is the asking price (in NQT) of the alias (__sellAlias__
only)
* _amountNQT_ is the amount (in NQT) offered for an alias for sale
(__buyAlias__ only)
* _recipient_ is the account ID of the recipient (only required for
_sellAlias_ and only if there is a designated recipient)
* _recipientPublicKey_ is the public key of the recipient account (only
applicable if _recipient_ provided; optional, enhances security of a new
account)

**Note**: An alias can be transferred rather than sold by setting
_priceNQT_ to zero. A pending sale can be canceled by selling again to
self for a price of zero.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=sellAlias&
    secretPhrase=IWontTellYou&
    aliasName=nextus&
    priceNQT=5&
    recipient=NXT-4VNQ-RWZC-4WWQ-GVM8S&
    feeNQT=100000000&
    deadline=60
---------------------------------------

*Response:*

---------------------------------------------------------------------------------------------------
{
    "signatureHash": "d6f026cd8a883b5b6ff78a7d0121e4847eb6744b02757427de6d7ca0bf304226",
    "unsignedTransactionBytes": "01166e01d4013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "2041afc1687da2693ba092e33a84f665ad461e3b6762c18af61778261bc7e...",
        "feeNQT": "100000000",
        "type": 1,
        "fullHash": "14a3eeb17cd4082db287259a768d32065d4cf5397ed6053fffa25e92a8a66ac7",
        "version": 1,
        "ecBlockId": "1612829598027150491",
        "signatureHash": "d6f026cd8a883b5b6ff78a7d0121e4847eb6744b02757427de6d7ca0bf304226",
        "attachment": {
            "alias": "nextus",
            "priceNQT": "5",
            "version.AliasSell": 1
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 6,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "recipientRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
        "recipient": "17013046603665206934",
        "ecBlockHeight": 284050,
        "deadline": 60,
        "transaction": "3245077163546682132",
        "timestamp": 30671214,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 8515,
    "transactionBytes": "01166e01d4013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143...",
    "fullHash": "14a3eeb17cd4082db287259a768d32065d4cf5397ed6053fffa25e92a8a66ac7",
    "transaction": "3245077163546682132"
}
---------------------------------------------------------------------------------------------------

_Verified 14-Nov-14_

Delete Alias
^^^^^^^^^^^^

Delete an alias given an alias ID or name. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _deleteAlias_
* _alias_ is the alias ID (optional)
* _aliasName_ is the alias name to be deleted (optional if _alias_
provided)

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

----------------------------
https://localhost:7876/nxt?
    requestType=deleteAlias&
    aliasName=mystical
----------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "a6e68daed99c1015dd12546c042466612b52a9f5193d8513f7f12684aba5bf1d",
    "unsignedTransactionBytes": "011809e60c023c0010f09c34f225d425306e5be55a49469081...",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "a5088bc6469e528d884e7fd3c49afeefc8656dd59c9fa5ffeab2a17b465f6d03e77...",
        "feeNQT": "100000000",
        "type": 1,
        "fullHash": "63afc769e677b6210617ff7a9f5be2d7fe1aea7e46ccad968017d28df578fabf",
        "version": 1,
        "ecBlockId": "17895923487075501156",
        "signatureHash": "a6e68daed99c1015dd12546c042466612b52a9f5193d8513f7f12684aba5bf1d",
        "attachment": {
            "version.AliasDelete": 1,
            "alias": "mystical"
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 8,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "ecBlockHeight": 161137,
        "deadline": 60,
        "transaction": "2429260880513838947",
        "timestamp": 34399753,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 52,
    "transactionBytes": "011809e60c023c0010f09c34f225d425306e5be55a4946908156072...",
    "transaction": "2429260880513838947"
}
----------------------------------------------------------------------------------------------

_Verified 27-Nov-14_

 +

Get Alias
^^^^^^^^^

Get information about a given alias

*Request:*

* _requestType_ is _getAlias_
* _alias_ is the alias ID (optional)
* _aliasName_ is the name of the alias (optional if _alias_ provided)

*Response:*

* _timestamp_ (N) is the time (in seconds since the genesis block) when
the alias was created or last transferred
* _aliasName_ (S) is the name of the alias
* _account_ (S) is the number of the account that owns the alias
* _accountRS_ (S) is the Reed-Solomon address of the account that owns
the alias
* _aliasURI_ (S) is what the alias points to, in URI format
* _alias_ (S) is the alias ID
* _priceNQT_ (S) is the asking price (in NQT) of the alias if it is for
sale
* _buyer_ (S) is the account number of the buyer if the alias is for
sale and a buyer is specified
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------
https://localhost:7876/nxt?
    requestType=getAlias&
    alias=15515279700680480368
------------------------------

*Response:*

--------------------------------------------
{
    "aliasURI": "http://google.com",
    "aliasName": "google",
    "accountRS": "NXT-FLVS-VRBV-LDPD-6DZ9W",
    "alias": "15515279700680480368",
    "requestProcessingTime": 1,
    "account": "5629477397208681336",
    "timestamp": 2409343
}
--------------------------------------------

_Verified 14-Nov-14_

Get Alias Count
^^^^^^^^^^^^^^^

Get the number of aliases owned by an account given the account ID.

*Request:*

* _requestType_ is _getAliasCount_
* _account_ is the account ID

*Response:*

* _numberOfAliases_ (N) is the number of aliases owned by the account
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getAliasCount&
    account=NXT-FLVS-VRBV-LDPD-6DZ9W
------------------------------------

*Response:*

------------------------------
{
    "numberOfAliases": 200,
    "requestProcessingTime": 2
}
------------------------------

_Verified 21-Nov-14_

Get Aliases
^^^^^^^^^^^

Get information on aliases owned by a given account in alias name order.

*Request:*

* _requestType_ is _getAliases_
* _account_ is the ID of the account that owns the aliases
* _timestamp_ is the earliest creation time (in seconds since the
genesis block) of the aliases (optional)
* _firstIndex_ is a zero-based index to the first alias to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last alias to retrieve
(optional)

*Response:*

* _aliases_ (A) is an array of alias objects (refer to
link:/wiki/Nxt_API#Get_Alias[Get Alias] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------------
https://localhost:7876/nxt?
    requestType=getAliases&
    account=5629477397208681336&
    lastIndex=1
--------------------------------

*Response:*

----------------------------------------------------
{
    "aliases": [
        {
            "aliasURI": "",
            "aliasName": "101",
            "accountRS": "NXT-FLVS-VRBV-LDPD-6DZ9W",
            "alias": "8952438483248557843",
            "account": "5629477397208681336",
            "timestamp": 2409893
        }
    ],
    "requestProcessingTime": 1
}
----------------------------------------------------

_Verified 14-Nov-14_

Create / Assign Alias
^^^^^^^^^^^^^^^^^^^^^

Create and/or assign an alias. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _setAlias_
* _aliasName_ is the alias name
* _aliasURI_ is the alias URI (e.g. http://www.google.com/)

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response]. The transaction ID is also the alias ID.

Example
+++++++

*Request:*

-----------------------------------------------
http://localhost:7876/nxt?
    requestType=setAlias&
    secretPhrase=IWontTellYou&
    aliasName=iwonttellyou&
    aliasURI=acct:nxt-l6fm-89wk-vk8p-fcrbb@nxt&
    feeNQT=100000000&
    deadline=60
-----------------------------------------------

*Response:*

---------------------------------------------------------------------------------------------------
{
    "signatureHash": "0dc7e07acef27fe86686cfabe2d1bd57c0c038f9465c3fe3d10f67932a97af10",
    "unsignedTransactionBytes": "011135d0d3013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "d92aefbab189b6e61f890c34b06a47e14a1a2b2ce868f77a4591d2067c51d...",
        "feeNQT": "100000000",
        "type": 1,
        "fullHash": "53917acbf44109391609a9bb57832c0d5903301e3d2bd6ffcf45cf893480f5a1",
        "version": 1,
        "ecBlockId": "4181883296304410027",
        "signatureHash": "0dc7e07acef27fe86686cfabe2d1bd57c0c038f9465c3fe3d10f67932a97af10",
        "attachment": {
            "alias": "iwonttellyou",
            "version.AliasAssignment": 1,
            "uri": "acct:nxt-l6fm-89wk-vk8p-fcrbb@nxt"
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 1,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "ecBlockHeight": 283939,
        "deadline": 60,
        "transaction": "4109888654593921363",
        "timestamp": 30658613,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 8104,
    "transactionBytes": "011135d0d3013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473...",
    "fullHash": "53917acbf44109391609a9bb57832c0d5903301e3d2bd6ffcf45cf893480f5a1",
    "transaction": "4109888654593921363"
}
---------------------------------------------------------------------------------------------------

_Verified 14-Nov-14_

Arbitrary Message System Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Decrypt Message From
^^^^^^^^^^^^^^^^^^^^

Decrypt an AES-encrypted message.

*Request:*

* _requestType_ is _decryptFrom_
* _secretPhrase_ is the secret passphrase of the recipient
* _account_ is the account ID of the recipient
* _data_ is AES-encrypted data
* _nonce_ is the unique nonce associated with the encrypted data
* _decryptedMessageIsText_ is _false_ if the decrypted message is a hex
string, otherwise the decrypted message is text (optional)

*Response:*

* _decryptedMessage_ (S) is the decrypted message
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------------------------------------------------------
    http://localhost:7876/nxt?
    requestType=decryptFrom&
    secretPhrase=IWontTellYou&
    account=NXT-L6FM-89WK-VK8P-FCRBB&
    data=5c30bd27cc86a8ab0349aaf66deae3c0a9db5675b5c4ba973dd47f37e06157...&
    nonce=7f3c9082c73a7bd825aa48d23fc138fd05a466700ff9fc3a040bbb29d3a60ee1&
---------------------------------------------------------------------------

*Response:*

---------------------------------------
{
    "decryptedMessage": "test message",
    "requestProcessingTime": 2
}
---------------------------------------

_Verified 11-Nov-14_

Encrypt Message To
^^^^^^^^^^^^^^^^^^

Encrypt a message using AES without sending it.

*Request:*

* _requestType_ is _encryptTo_
* _secretPhrase_ is the secret passphrase of the sender
* _recipient_ is the account ID of the recipient
* _messageToEncrypt_ is either UTF-8 text or a string of hex digits to
be compressed and converted into a 1000 byte maximum bytecode then
encrypted using AES
* _messageToEncryptIsText_ is _false_ if the message to encrypt is a hex
string, otherwise the message to encrypt is text (optional)

*Response:*

* _data_ (S) is the AES-encrypted data
* _nonce_ (S) is a 32-byte pseudorandom nonce
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=encryptTo&
    secretPhrase=IWontTellYou&
    recipient=NXT-L6FM-89WK-VK8P-FCRBB&
    messageToEncrypt=test message&
---------------------------------------

*Response:*

--------------------------------------------------------------------------------
{
    "data": "5c30bd27cc86a8ab0349aaf66deae3c0a9db5675b5c4ba973dd47f37e06157...",
    "requestProcessingTime": 48,
    "nonce": "7f3c9082c73a7bd825aa48d23fc138fd05a466700ff9fc3a040bbb29d3a60ee1"
}
--------------------------------------------------------------------------------

_Verified 11-Nov-14_

Read Message
^^^^^^^^^^^^

Get a message given a transaction ID.

*Request:*

* _requestType_ is _readMessage_
* _transaction_ is the transaction ID of the message
* _secretPhrase_ is the secret passphrase of the account that received
the message (optional)

*Response:*

* _message_ (S) is the unencrypted message
* _decryptedMessage_ (S) is the decrypted message, only if provided
secretPhrase belongs to either sender or reciever of the transaction
* _decryptedMessageToSelf_ (S) is the decrypted message sent to self,
only if provided secretPhrase belongs to sender of transaction
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=readMessage&
    transaction=9908575668289607167&
    secretPhrase=IWontTellYou&
------------------------------------

*Response:*

----------------------------------------------------
{
    "requestProcessingTime": 1,
    "message": "Test message.",
    "decryptedMessage": "Test message (encrypted).",
    "decryptedMessageToSelf": "abc123"
}
----------------------------------------------------

_Verified 10-Nov-14_

Send Message
^^^^^^^^^^^^

Create an Arbitrary Message transaction. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _sendMessage_
* _recipient_ is the account ID of the recipient (optional)
* _recipientPublicKey_ is the public key of the receiving account
(optional, enhances security of a new account)
* _message_ is either UTF-8 text or a string of hex digits (perhaps
previously encoded using an arbitrary algorithm) to be converted into a
1000 byte maximum bytecode (optional)
* _messageIsText_ is _false_ if the message is a hex string, otherwise
the message is text (optional)
* _messageToEncrypt_ is either UTF-8 text or a string of hex digits to
be compressed and converted into a 1000 byte maximum bytecode then
encrypted using AES (optional)
* _messageToEncryptIsText_ is _false_ if the message to encrypt is a hex
string, otherwise the message to encrypt is text (optional)
* _encryptedMessageData_ is already encrypted data which overrides
messageToEncrypt if provided (optional)
* _encryptedMessageNonce_ is a unique 32-byte number which cannot be
reused (optional unless encryptedMessageData is provided)
* _messageToEncryptToSelf_ is either UTF-8 text or a string of hex
digits to be compressed and converted into a 1000 byte maximum bytecode
then encrypted with AES, then sent to the sending account (optional)
* _messageToEncryptToSelfIsText_ is _false_ if the message to
self-encrypt is a hex string, otherwise the message to encrypt is text
(optional)
* _encryptToSelfMessageData_ is already encrypted data which overrides
messageToEncryptToSelf if provided (optional)
* _encryptToSelfMessageNonce_ is a unique 32-byte number which cannot be
reused (optional unless encryptToSelfMessageData is provided)

*Note:* Any combination (including none or all) of the three options
__message__, __messageToEncrypt__, and _messageToEncryptToSelf_ will be
included in the transaction, but if only _messageToEncryptToSelf_ is
provided a recipient must still be provided, logically the sender. The
_encryptedMessageData-encryptedMessageNonce_ pair or the
_encryptToSelfMessageData-encryptToSelfMessageNonce_ pair can be the
output of link:/wiki/Nxt_API#Encrypt_Message_To[Encrypt Message To]

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=sendMessage&
    secretPhrase=IWontTellYou&
    recipient=NXT-4VNQ-RWZC-4WWQ-GVM8S&
    message=Test Message.&
    deadline=60
---------------------------------------

*Response:*

--------------------------------------------------------------------------------------------------
{
    "signatureHash": "795c58938a50d691f3f2b88bfaf03267236e972e1c068e0a5e11aeb606597f17",
    "unsignedTransactionBytes": "01100593ce013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c14...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "e916dbbfec51ca97ae76b1b190d1c74328f74c3c43ed3a06f1ca0ea250116...",
        "feeNQT": "100000000",
        "type": 1,
        "fullHash": "ff157b8a125582898b5c50d32a62f725602d5197af236fabcd6ec978b6861528",
        "version": 1,
        "ecBlockId": "6060075251340574063",
        "signatureHash": "795c58938a50d691f3f2b88bfaf03267236e972e1c068e0a5e11aeb606597f17",
        "attachment": {
            "version.Message": 1,
            "messageIsText": true,
            "message": "Test message."
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 0,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "recipientRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
        "recipient": "17013046603665206934",
        "ecBlockHeight": 280756,
        "deadline": 60,
        "transaction": "9908575668289607167",
        "timestamp": 30315269,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 11379,
    "transactionBytes": "01100593ce013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "fullHash": "ff157b8a125582898b5c50d32a62f725602d5197af236fabcd6ec978b6861528",
    "transaction": "9908575668289607167"
}
--------------------------------------------------------------------------------------------------

_Verified 15-Dec-14_

Asset Exchange Operations
~~~~~~~~~~~~~~~~~~~~~~~~~

Cancel Order
^^^^^^^^^^^^

Cancel an existing asset order. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is either _cancelBidOrder_ or _cancelAskOrder_
* _order_ is the order ID of the order being canceled

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=cancelBidOrder&
    secretPhrase=IWontTellYou&
    order=17185236428295897167&
    feeNQT=100000000&
    deadline=60
-------------------------------

*Response:*

---------------------------------------------------------------------------------------------------
{
    "signatureHash": "20264f33a06331f6a8d7c4362d0525aee25e4ef991653f14bbfb1b2beebba433",
    "unsignedTransactionBytes": "02153c6ed6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "30cf47942179f5969369699b548f5a3517ef7ff71b337db630ea5f8b6e740...",
        "feeNQT": "100000000",
        "type": 2,
        "fullHash": "725f441d9f50a9b2e02d780098a827b1015ec902199becd493bfa73a4843ae89",
        "version": 1,
        "ecBlockId": "196207598250363138",
        "signatureHash": "20264f33a06331f6a8d7c4362d0525aee25e4ef991653f14bbfb1b2beebba433",
        "attachment": {
            "version.BidOrderCancellation": 1,
            "order": "17185236428295897167"
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 5,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "ecBlockHeight": 285586,
        "deadline": 60,
        "transaction": "12873909654136315762",
        "timestamp": 30830140,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 7640,
    "transactionBytes": "02153c6ed6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "fullHash": "725f441d9f50a9b2e02d780098a827b1015ec902199becd493bfa73a4843ae89",
    "transaction": "12873909654136315762"
}
---------------------------------------------------------------------------------------------------

_Verified 16-Nov-14_

Dividend Payment
^^^^^^^^^^^^^^^^

Pay dividend to all shareholders of an asset. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _dividendPayment_
* _asset_ is the asset ID
* _height_ is the blockchain height at which asset holders shares will
be counted (must be less than 1440 blocks in the past)
* _amountNQTPerQNT_ is dividend amount (in NQT per QNT of the asset)

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

--------------------------------
http://localhost:7876/nxt?
    requestType=dividendPayment&
    asset=3517042713515967694&
    height=161157&
    amountNQTPerQNT=100000000
--------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "5d92fee3570b7b058ace2387f5b4eef4377ea738e6a6c2aabc06bd9f6871e4b4",
    "unsignedTransactionBytes": "02160feb0c023c0010f09c34f225d425306e5be55a49469081...",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "61e2398087b078bdba24021d909e937c2d5fe157a09fa3c82d910e7b5843e00cef2...",
        "feeNQT": "100000000",
        "type": 2,
        "fullHash": "27b52e61813b73fdf9ff3b1bacf3b344d3ed60e8c94db2c9d0518c8483150770",
        "version": 1,
        "ecBlockId": "17871828515938613022",
        "signatureHash": "5d92fee3570b7b058ace2387f5b4eef4377ea738e6a6c2aabc06bd9f6871e4b4",
        "attachment": {
            "version.DividendPayment": 1,
            "amountNQTPerQNT": "100000000",
            "asset": "3517042713515967694",
            "height": 161157
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 6,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "ecBlockHeight": 161151,
        "deadline": 60,
        "transaction": "18263006340784764199",
        "timestamp": 34401039,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 111,
    "transactionBytes": "02160feb0c023c0010f09c34f225d425306e5be55a49469081560...",
    "fullHash": "27b52e61813b73fdf9ff3b1bacf3b344d3ed60e8c94db2c9d0518c8483150770",
    "transaction": "18263006340784764199"
}
----------------------------------------------------------------------------------------------

_Verified 27-Dec-14_

Get Account Asset Count
^^^^^^^^^^^^^^^^^^^^^^^

Get the number of assets owned by an account given the account ID.

*Request:*

* _requestType_ is _getAccountAssetCount_
* _account_ is the account ID
* _height_ is the height of the blockchain to determine the asset count
(optional, default is last block)

*Note:* If table trimming is enabled (default), the height must be
within 1440 blocks of the last block.

*Response:*

* _numberOfAssets_ (N) is the number of assets owned by the account
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountAssetCount&
    account=NXT-8N9W-TN4F-YA2S-H5B7R
-------------------------------------

*Response:*

-------------------------------
{
    "requestProcessingTime": 1,
    "numberOfAssets": 3
}
-------------------------------

_Verified 21-Nov-14_

Get Account Assets
^^^^^^^^^^^^^^^^^^

Get the assets owned by a given account in reverse quantity order.

*Request:*

* _requestType_ is _getAccountAssets_
* _account_ is the account ID
* _asset_ is an asset ID filter (optional)
* _height_ is the blockchain height at which to retrieve balances
(optional, default is the last block in the blockchain)

*Note:* If table trimming is enabled (default), the height must be
within 1440 blocks of the last block.

*Response:*

* _accountAssets_ (A) is an array of asset objects (unless the _asset_
parameter is specified) with the following fields for each asset:
* _quantityQNT_ (S) is the quantity (in QNT) of the asset
* _unconfirmedQuantityQNT_ (S) is the unconfirmed quantity (in QNT) of
the asset
* _decimals_ (N) is the number of decimal places used by the asset
* _name_ (S) is the asset name
* _asset_ (S) is the asset ID
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountAssets&
    account=NXT-4VNQ-RWZC-4WWQ-GVM8S
------------------------------------

*Response:*

-------------------------------------------------
{
    "accountAssets": [
        {
            "quantityQNT": "68013764",
            "unconfirmedQuantityQNT": "68013764",
            "decimals": 0,
            "name": "Test",
            "asset": "17554243582654188572"
        }
    ],
    "requestProcessingTime": 1
}
-------------------------------------------------

_Verified 18-Nov-14_

Get Account Current Order IDs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get current asset order IDs given an account ID in reverse block height
order.

*Request:*

* _requestType_ is either _getAccountCurrentBidOrderIds_ or
_getAccountCurrentAskOrderIds_
* _account_ is the account ID
* _asset_ is an asset ID filter (optional)
* _firstIndex_ is a zero-based index to the first order ID to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last order ID to retrieve
(optional)

*Response:*

* _bidOrderIds_ or _askOrderIds_ (A) is an array of order IDs
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountCurrentBidOrderIds&
    account=NXT-L6FM-89WK-VK8P-FCRBB&
    asset=17554243582654188572
---------------------------------------------

*Response:*

------------------------------
{
    "bidOrderIds": [
        "17185236428295897167"
    ],
    "requestProcessingTime": 4
}
------------------------------

_Verified 16-Nov-14_

Get Account Current Orders
^^^^^^^^^^^^^^^^^^^^^^^^^^

Get current asset orders given an account ID in reverse block height
order.

*Request:*

* _requestType_ is either _getAccountCurrentBidOrders_ or
_getAccountCurrentAskOrders_
* _account_ is the account ID
* _asset_ is an asset ID filter (optional)
* _firstIndex_ is a zero-based index to the first order to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last order to retrieve
(optional)

*Response:*

* _bidOrders_ or _askOrders_ (A) is an array of order objects (refer to
link:/wiki/Nxt_API#Get_Order[Get Order] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountCurrentBidOrders&
    account=NXT-L6FM-89WK-VK8P-FCRBB
-------------------------------------------

*Response:*

----------------------------------------------------
{
    "bidOrders": [
        {
            "quantityQNT": "1000000",
            "priceNQT": "100",
            "accountRS": "NXT-L6FM-89WK-VK8P-FCRBB",
            "asset": "17554243582654188572",
            "type": "bid",
            "account": "15323192282528158131",
            "order": "17185236428295897167",
            "height": 285549
        }
    ],
    "requestProcessingTime": 1
}
----------------------------------------------------

_Verified 16-Nov-14_

Get All Assets
^^^^^^^^^^^^^^

Get all assets in the exchange in reverse block height of creation
order.

*Request:*

* _requestType_ is _getAllAssets_
* _firstIndex_ is a zero-based index to the first asset to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last asset to retrieve
(optional)
* _includeCounts_ is _false_ if the fields beginning with _numberOf..._
are to be omitted (optional)

*Response:*

* _assets_ (A) is an array of asset objects (refer to
link:/wiki/Nxt_API#Get_Asset[Get Asset])
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-----------------------------
http://localhost:7876/nxt?
    requestType=getAllAssets&
    firstIndex=13&
    lastIndex=13
-----------------------------

*Response:*

---------------------------------------------------------------------------------------
{
    "assets": [
        {
            "quantityQNT": "2100000000000000",
            "numberOfAccounts": 31,
            "accountRS": "NXT-3TKA-UH62-478B-DQU6K",
            "decimals": 8,
            "numberOfTransfers": 63,
            "name": "mgwBTC",
            "description": "Production Multigateway BTC (mgwBTC) is backed 100% by...",
            "numberOfTrades": 9,
            "asset": "17554243582654188572",
            "account": "13300069592148796968"
        }
    ],
    "requestProcessingTime": 13
}
---------------------------------------------------------------------------------------

_Verified 18-Nov-14_

Get All Open Orders
^^^^^^^^^^^^^^^^^^^

Get all open bid/ask orders in reverse block height order.

*Request:*

* _requestType_ is either _getAllOpenBidOrders_ or _getAllOpenAskOrders_
* _firstIndex_ is a zero-based index to the first order to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last order to retrieve
(optional)

*Response:*

* _openOrders_ (A) is an array of order objects (refer to
link:/wiki/Nxt_API#Get_Order[Get Order] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getAllOpenBidOrders&
    firstIndex=123&
    lastIndex=123
------------------------------------

*Response:*

----------------------------------------------------
{
    "requestProcessingTime": 5631,
    "openOrders": [
        {
            "quantityQNT": "1000000",
            "priceNQT": "101",
            "accountRS": "NXT-L6FM-89WK-VK8P-FCRBB",
            "asset": "17554243582654188572",
            "type": "bid",
            "account": "15323192282528158131",
            "order": "12743274869785967304",
            "height": 285577
        }
    ]
}
----------------------------------------------------

_Verified 17-Nov-14_

Get All Trades
^^^^^^^^^^^^^^

Get all trades since a given timestamp in reverse block height order.

*Request:*

* _requestType_ is _getAllTrades_
* _timestamp_ is the timestamp (in seconds since the genesis block) to
begin retrieving trades (optional, default 0)
* _firstIndex_ is a zero-based index to the first trade to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last trade to retrieve
(optional)
* _includeAssetInfo_ is _false_ if asset information is to be omitted
(optional)

*Note:* If _timestamp_ is omitted or zero, and no index is given, all
trades in the entire blockchain will be retrieved, which may timeout or
crash your system.

*Response:*

* _trades_ (A) is an array of trade objects (refer to
link:/wiki/Nxt_API#Get_Trades[Get Trades])
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-----------------------------
http://localhost:7876/nxt?
    requestType=getAllTrades&
    lastIndex=0
-----------------------------

*Response:*

---------------------------------------------------
"trades": [
        {
            "seller": "14968762166783718535",
            "quantityQNT": "10000",
            "bidOrder": "1166717226538227076",
            "sellerRS": "NXT-8F69-W9Z9-8M6Y-ETXGZ",
            "buyer": "202478233571806601",
            "priceNQT": "19796",
            "askOrder": "16222071953599729591",
            "buyerRS": "NXT-RMEB-W7TE-28EM-2SUM7",
            "decimals": 8,
            "name": "mgwBTC",
            "block": "8807797247643599359",
            "asset": "4551058913252105307",
            "askOrderHeight": 285768,
            "bidOrderHeight": 286453,
            "tradeType": "buy",
            "timestamp": 30920039,
            "height": 286453
        }
    ],
    "requestProcessingTime": 25840
---------------------------------------------------

_Verified 17-Nov-14_

Get Asset
^^^^^^^^^

Get asset information given an asset ID.

*Request:*

* _requestType_ is _getAsset_
* _asset_ is the asset ID
* _includeCounts_ is _false_ if the fields beginning with _numberOf..._
are to be omitted (optional)

*Response:*

* _account_ (S) is the number of the account that issued the asset
* _accountRS_ (S) is the Reed-Solomon address of the account that issued
the asset
* _name_ (S) is the asset name
* _description_ (S) is the asset description
* _quantityQNT_ (S) is the total asset quantity (in QNT) in existence
* _asset_ (N) is the asset ID
* _decimals_ (N) is the number of decimal places used by the asset
* _numberOfAccounts_ (N) is the number of accounts that own the asset
* _numberOfTrades_ (N) is the number of trades of this asset
* _numberOfTransfers_ (N) is the number of transfers of this asset
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------
http://localhost:7876/nxt?
    requestType=getAsset&
    asset=17554243582654188572
------------------------------

*Response:*

-------------------------------------------------------------------------------
{
    "quantityQNT": "2100000000000000",
    "numberOfAccounts": 31,
    "accountRS": "NXT-3TKA-UH62-478B-DQU6K",
    "decimals": 8,
    "numberOfTransfers": 63,
    "name": "mgwBTC",
    "description": "Production Multigateway BTC (mgwBTC) is backed 100% by...",
    "numberOfTrades": 9,
    "requestProcessingTime": 11,
    "asset": "17554243582654188572",
    "account": "13300069592148796968"
}
-------------------------------------------------------------------------------

_Verified 18-Nov-14_

Get Asset Account Count
^^^^^^^^^^^^^^^^^^^^^^^

Get the number of accounts that own an asset given the asset ID.

*Request:*

* _requestType_ is _getAssetAccountCount_
* _asset_ is the asset ID
* _height_ is the height of the blockchain to determine the account
count (optional, default is last block)

*Note:* If table trimming is enabled (default), the height must be
within 1440 blocks of the last block.

*Response:*

* _numberOfAccounts_ (N) is the number of accounts that own the asset
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getAssetAccountCount&
    asset=17554243582654188572
-------------------------------------

*Response:*

-------------------------------
{
    "numberOfAccounts": 38,
    "requestProcessingTime": 14
}
-------------------------------

_Verified 19-Nov-14_

Get Asset Accounts
^^^^^^^^^^^^^^^^^^

Get the accounts that own an asset given the asset ID in reverse
quantity order.

*Request:*

* _requestType_ is _getAssetAccounts_
* _asset_ is the asset ID
* _height_ is the height of the blockchain to determine the accounts
(optional, default is last block)
* _firstIndex_ is a zero-based index to the first account to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last account to retrieve
(optional)

*Note:* If table trimming is enabled (default), the height must be
within 1440 blocks of the last block.

*Response:*

* _accountAssets_ (A) is an array of asset objects with the following
fields for each asset:
* _quantityQNT_ (S) is the quantity (in QNT) of the asset
* _accountRS_ (S) is the Reed-Solomon address of the account that owns
the asset
* _unconfirmedQuantityQNT_ (S) is the unconfirmed quantity (in QNT) of
the asset
* _asset_ (S) is the asset ID
* _account_ (S) is the number of the account that owns the asset
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------------
http://localhost:7876/nxt?
    requestType=getAssetAccounts&
    asset=5539238107226883203
---------------------------------

*Response:*

----------------------------------------------------
{
    "accountAssets": [
        {
            "quantityQNT": "100000000",
            "accountRS": "NXT-JTE5-HB7Y-QPS5-B58MZ",
            "unconfirmedQuantityQNT": "100000000",
            "asset": "5539238107226883203",
            "account": "11514793277306463619"
        }
    ],
    "requestProcessingTime": 19
}
----------------------------------------------------

_Verified 19-Nov-14_

Get Asset IDs
^^^^^^^^^^^^^

Get the IDs of all assets in the exchange in reverse block height of
creation order.

*Request:*

* _requestType_ is _getAssetIds_
* _firstIndex_ is a zero-based index to the first asset ID to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last asset ID to retrieve
(optional)

*Response:*

* _assets_ (A) is an array of asset IDs
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

----------------------------
http://localhost:7876/nxt?
    requestType=getAssetIds&
    firstIndex=15&
    lastIndex=15
----------------------------

*Response:*

------------------------------
{
    "assetIds": [
        "17554243582654188572"
    ],
    "requestProcessingTime": 1
}
------------------------------

_Verified 19-Nov-14_

Get Asset Transfers
^^^^^^^^^^^^^^^^^^^

Get transfers associated with a given asset and/or account in reverse
block height order.

*Request:*

* _requestType_ is _getAssetTransfers_
* _asset_ is the asset ID (optional)
* _account_ is the account ID (optional if _asset_ provided)
* _firstIndex_ is a zero-based index to the first transfer to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last transfer to retrieve
(optional)
* _includeAssetInfo_ is _false_ if the _decimals_ and _name_ fields are
to be omitted (optional)

*Response:*

* _transfers_ (A) is an array of transfer objects with the following
fields for each transfer:
* _quantityQNT_ (S) is the quantity (in QNT) of the asset traded
* _senderRS_ (S) is the Reed-Solomon address of the sender
* _assetTransfer_ (S) is the transaction ID of the asset transfer
* _sender_ (S) is the account number of the sender
* _recipientRS_ (S) is the Reed-Solomon address of the recipient
* _decimals_ (N) is the number of decimal places used by the asset
* _recipient_ (S) is the account number of the recipient
* _name_ (S) is the name of the asset
* _asset_ (S) is the asset ID
* _height_ (N) is the height of the transfer block
* _timestamp_ (N) is the timestamp (in seconds since the genesis block)
of the transfer block
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

----------------------------------
http://localhost:7876/nxt?
    requestType=getAssetTransfers&
    asset=17554243582654188572&
    lastIndex=0
----------------------------------

*Response:*

------------------------------------------------------
{
    "transfers": [
        {
            "quantityQNT": "500000",
            "senderRS": "NXT-9K6X-4ZQS-PCQN-465T4",
            "assetTransfer": "15255934090738722602",
            "sender": "2406158154854548637",
            "recipientRS": "NXT-YMEM-ERX3-BFUZ-4MQ4P",
            "decimals": 8,
            "recipient": "3065494931320556947",
            "name": "mgwBTC",
            "asset": "17554243582654188572",
            "height": 287648,
            "timestamp": 31042663
        }
    ],
    "requestProcessingTime": 4
}
------------------------------------------------------

_Verified 19-Nov-14_

Get Assets
^^^^^^^^^^

Get asset information given multiple asset IDs

*Request:*

* _requestType_ is _getAssets_
* _assets_ is one the multiple asset IDs
* _assets_ is one the multiple asset IDs

⋮

* _includeCounts_ is _false_ if the fields beginning with _numberOf..._
are to be omitted (optional)

*Response:*

* _assets_ (A) is an array of asset objects (refer to
link:/wiki/Nxt_API#Get_Asset[Get Asset])
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=getAssets&
    assets=17554243582654188572
-------------------------------

*Response:*

---------------------------------------------------------------------------------------
{
    "assets": [
        {
            "quantityQNT": "2100000000000000",
            "numberOfAccounts": 31,
            "accountRS": "NXT-3TKA-UH62-478B-DQU6K",
            "decimals": 8,
            "numberOfTransfers": 63,
            "name": "mgwBTC",
            "description": "Production Multigateway BTC (mgwBTC) is backed 100% by...",
            "numberOfTrades": 9,
            "asset": "17554243582654188572",
            "account": "13300069592148796968"
        }
    ],
    "requestProcessingTime": 15
}
---------------------------------------------------------------------------------------

_Verified 18-Nov-14_

Get Assets By Issuer
^^^^^^^^^^^^^^^^^^^^

Get asset information given multiple creation account IDs in reverse
block height of creation order.

*Request:*

* _requestType_ is _getAssetsByIssuer_
* _account_ is one of the multiple account IDs
* _account_ is one of the multiple account IDs

⋮

* _firstIndex_ is a zero-based index to the first asset to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last asset to retrieve
(optional)
* _includeCounts_ is _false_ if the fields beginning with _numberOf..._
are to be omitted (optional)

*Response:*

* _assets_ (A) is an array of asset objects (refer to
link:/wiki/Nxt_API#Get_Asset[Get Asset])
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getAssetsByIssuer&
    account=NXT-DE2F-W76R-GL25-HMFPR&
    lastIndex=0
-------------------------------------

*Response:*

---------------------------------------------------------------------------------------------
{
    "assets": [
        [
            {
                "quantityQNT": "10000000000",
                "numberOfAccounts": 222,
                "accountRS": "NXT-DE2F-W76R-GL25-HMFPR",
                "decimals": 4,
                "numberOfTransfers": 278,
                "name": "NXTprivacy",
                "description": "NXTprivacy will contain various privacy related projects...",
                "numberOfTrades": 456,
                "asset": "17911762572811467637",
                "account": "18146608053740744717"
            }
        ]
    ],
    "requestProcessingTime": 9
}
---------------------------------------------------------------------------------------------

_Verified 19-Nov-14_

Get Order
^^^^^^^^^

Get a bid/ask order given an order ID.

*Request:*

* _requestType_ is either _getBidOrder_ or _getAskOrder_
* _order_ is the Order ID

*Response:*

* _account_ (S) is the account number associated with the order
* _accountRS_ (S) is the Reed-Solomon address of the account
* _asset_ (S) is the ID of the asset being ordered
* _quantityQNT_ (S) is the order quantity (in QNT)
* _priceNQT_ (S) is the order price (in NQT)
* _height_ (N) is the block height of the order transaction
* _order_ (S) is the ID of the order
* _type_ (S) is the type of order (__bid__ or __ask__)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------
http://localhost:7876/nxt?
    requestType=getBidOrder&
    order=12743274869785967304
------------------------------

*Response:*

--------------------------------------------
{
    "quantityQNT": "1000000",
    "priceNQT": "101",
    "accountRS": "NXT-L6FM-89WK-VK8P-FCRBB",
    "requestProcessingTime": 429,
    "asset": "17554243582654188572",
    "type": "bid",
    "account": "15323192282528158131",
    "order": "12743274869785967304",
    "height": 285577
}
--------------------------------------------

_Verified 17-Nov-14_

Get Order IDs
^^^^^^^^^^^^^

Get bid/ask order IDs given an asset ID, in order of decreasing bid
price or increasing ask price.

*Request:*

* _requestType_ is either _getBidOrderIds_ or _getAskOrderIds_
* _asset_ is the asset ID
* _firstIndex_ is a zero-based index to the first order ID to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last order ID to retrieve
(optional)

*Response:*

* _bidOrderIds_ or _askOrderIds_ (A) is an array of order IDs
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=getBidOrderIds&
    asset=17554243582654188572
-------------------------------

*Response:*

-------------------------------
{
    "bidOrderIds": [
        "17972270381487138621",
        "8331653287549483600",
        "16386956089071870421",
        "12743274869785967304",
        "3409888667133338290"
    ],
    "requestProcessingTime": 1
}
-------------------------------

_Verified 17-Nov-14_

Get Orders
^^^^^^^^^^

Get bid/ask orders given an asset ID, in order of decreasing bid price
or increasing ask price.

*Request:*

* _requestType_ is either _getBidOrders_ or _getAskOrders_
* _asset_ is the asset ID
* _firstIndex_ is a zero-based index to the first order to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last order to retrieve
(optional)

*Response:*

* _bidOrders_ or _askOrders_ (A) is an array of order objects (refer to
link:/wiki/Nxt_API#Get_Order[Get Order] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=getBidOrders&
    asset=17554243582654188572&
    firstIndex=3&
    lastIndex=3
-------------------------------

*Response:*

----------------------------------------------------
{
    "bidOrders": [
        {
            "quantityQNT": "1000000",
            "priceNQT": "101",
            "accountRS": "NXT-L6FM-89WK-VK8P-FCRBB",
            "asset": "17554243582654188572",
            "type": "bid",
            "account": "15323192282528158131",
            "order": "12743274869785967304",
            "height": 285577
        }
    ],
    "requestProcessingTime": 2
}
----------------------------------------------------

_Verified 17-Nov-14_

Get Trades
^^^^^^^^^^

Get trades associated with a given asset and/or account in reverse block
height order.

*Request:*

* _requestType_ is _getTrades_
* _asset_ is the asset ID (optional)
* _account_ is the account ID (optional if _asset_ provided)
* _firstIndex_ is a zero-based index to the first trade to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last trade to retrieve
(optional)
* _includeAssetInfo_ is _false_ if the _decimals_ and _name_ fields are
to be omitted (optional)

*Response:*

* _trades_ (A) is an array of trade objects with the following fields
for each trade:
* _seller_ (S) is the account number of the seller
* _quantityQNT_ (S) is the quantity (in QNT) of the asset traded
* _bidOrder_ (S) is the bid order ID
* _sellerRS_ (S) is the Reed-Solomon address of the seller
* _buyer_ (S) is the account number of the buyer
* _priceNQT_ (S) is the trade price (in NQT, the ask price for a buy or
the bid price for a sell)
* _askOrder_ (S) is the ask order ID
* _buyerRS_ (S) is the Reed-Solomon address of the buyer
* _decimals_ (N) is the number of decimal places used by the asset
* _name_ (S) is the name of the asset
* _block_ (S) is the block ID of the trade
* _asset_ (S) is the asset ID
* _askOrderHeight_ (N) is the block height of the ask order
* _bidOrderHeight_ (N) is the block height of the bid order
* _tradeType_ (S) is the trade type (__sell__ or __buy__, where _buy_
implies that the bid occurred after the ask, or if in the same block,
has a greater order ID)
* _timestamp_ (N) is the timestamp (in seconds since the genesis block)
of the trade block
* _height_ (N) is the height of the trade block
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=getTrades&
    asset=17554243582654188572&
    lastIndex=0
-------------------------------

*Response:*

---------------------------------------------------
{
    "trades": [
        {
            "seller": "4012743767778395236",
            "quantityQNT": "922082",
            "bidOrder": "18332182738291742411",
            "sellerRS": "NXT-J356-8B4K-L4DK-533EH",
            "buyer": "17013046603665206934",
            "priceNQT": "19607",
            "askOrder": "5860848661439768841",
            "buyerRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
            "decimals": 8,
            "name": "mgwBTC",
            "block": "15627545821108097361",
            "asset": "17554243582654188572",
            "askOrderHeight": 285964,
            "bidOrderHeight": 285821,
            "tradeType": "sell",
            "timestamp": 30869573,
            "height": 285964
        }
    ],
    "requestProcessingTime": 0
}
---------------------------------------------------

_Verified 17-Nov-14_

Issue Asset
^^^^^^^^^^^

Create an asset on the exchange. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _issueAsset_
* _name_ is the name of the asset
* _description_ is a url-encoded description of the asset in UTF-8 with
a maximum length of 1000 bytes (optional)
* _quantityQNT_ is the total amount (in QNT) of the asset in existence
* _decimals_ is the number of decimal places used by the asset
(optional, zero default)

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response]. The transaction ID is also the asset ID.

Example
+++++++

*Request:*

-------------------------------------------------------------------------------
http://localhost:7876/nxt?
    requestType=issueAsset&
    publicKey=57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c&
    name=SecretCoin&
    description=This+is+SecretCoin&
    quantityQNT=100&
    deadline=60&
    feeNQT=100000000000&
    broad=false
-------------------------------------------------------------------------------

*Response:*

---------------------------------------------------------------------------------------------------
{
    "unsignedTransactionBytes": "021095e5da013c0073080c6a224062660184f10ebb7fb431d459364a12403...",
    "transactionJSON": {
        "senderPublicKey": "73080c6a224062660184f10ebb7fb431d459364a12403320c7f601f9d75cc547",
        "feeNQT": "100000000000",
        "type": 2,
        "version": 1,
        "ecBlockId": "1564408139943737911",
        "attachment": {
            "name": "SecretCoin",
            "description": "This+is+SecretCoin",
            "quantityQNT": "100",
            "version.AssetIssuance": 1,
            "decimals": 0
        },
        "senderRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
        "subtype": 0,
        "amountNQT": "0",
        "sender": "17013046603665206934",
        "ecBlockHeight": 288402,
        "deadline": 60,
        "timestamp": 31122837,
        "height": 2147483647
    },
    "broadcasted": false,
    "requestProcessingTime": 2
}
---------------------------------------------------------------------------------------------------

_Verified 19-Nov-14_

Place Order
^^^^^^^^^^^

Place an asset order. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is either _placeBidOrder_ or _placeAskOrder_
* _asset_ is the asset ID of the asset being ordered
* _quantityQNT_ is the amount (in QNT) of the asset being ordered
* _priceNQT_ is the bid/ask price (in NQT)

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response]. The transaction ID is also the order ID.

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=placeBidOrder&
    secretPhrase=IWontTellYou&
    asset=17554243582654188572&
    quantityQNT=1000000&
    priceNQT=100&
    feeNQT=100000000&
    deadline=60
-------------------------------

*Response:*

---------------------------------------------------------------------------------------------------
{
    "signatureHash": "44028b4ddb46e7d4383331425b79019bb0f004f88ede12a5aa66f05c23a75f03",
    "unsignedTransactionBytes": "02135a5ed6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "65713e80be99a927bfa7bb2e9a7b6fbd2f17c226fb956494c68a6d90a8127...",
        "feeNQT": "100000000",
        "type": 2,
        "fullHash": "4f00aef17a397eee25027e834ca765660e4e3f3f1b162468bdac67b315aeb812",
        "version": 1,
        "ecBlockId": "14593256906948324209",
        "signatureHash": "44028b4ddb46e7d4383331425b79019bb0f004f88ede12a5aa66f05c23a75f03",
        "attachment": {
            "quantityQNT": "1000000",
            "priceNQT": "100",
            "asset": "17554243582654188572",
            "version.BidOrderPlacement": 1
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 3,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "ecBlockHeight": 285545,
        "deadline": 60,
        "transaction": "17185236428295897167",
        "timestamp": 30826074,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 8729,
    "transactionBytes": "02135a5ed6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143...",
    "fullHash": "4f00aef17a397eee25027e834ca765660e4e3f3f1b162468bdac67b315aeb812",
    "transaction": "17185236428295897167"
}
---------------------------------------------------------------------------------------------------

_Verified 16-Nov-14_

Search Assets
^^^^^^^^^^^^^

Get assets having a name or description that match a given query in
reverse relevance order.

*Request:*

* _requestType_ is _searchAssets_
* _query_ is a full text query on the asset fields _name_ (S) and
_description_ (S) in the
http://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Overview[standard
Lucene syntax]
* _firstIndex_ is a zero-based index to the first asset to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last asset to retrieve
(optional)
* _includeCounts_ is _false_ if the fields beginning with _numberOf..._
are to be omitted (optional)

*Response:*

* _assets_ (A) is an array of asset objects (refer to
link:/wiki/Nxt_API#Get_Asset[Get Asset])
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=searchAssets&
    query=assets AND production
-------------------------------

*Response:*

---------------------------------------------------------------------------------------
{
    "assets": [
        {
            "quantityQNT": "2100000000000000",
            "numberOfAccounts": 37,
            "accountRS": "NXT-3TKA-UH62-478B-DQU6K",
            "decimals": 8,
            "numberOfTransfers": 84,
            "name": "mgwBTC",
            "description": "Production Multigateway BTC (mgwBTC) is backed 100% by...",
            "numberOfTrades": 15,
            "asset": "17554243582654188572",
            "account": "13300069592148796968"
        }
    ],
    "requestProcessingTime": 96
}
---------------------------------------------------------------------------------------

_Verified 21-Nov-14_

Transfer Asset
^^^^^^^^^^^^^^

Transfer a quantity of an asset from one account to another. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _transferAsset_
* _recipient_ is the recipient account ID
* _recipientPublicKey_ is the public key of the recipient account
(optional, enhances security of a new account)
* _asset_ is the ID of the asset being transferred
* _quantityQNT_ is the amount (in QNT) of the asset being transferred

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response]. The transaction ID is also the transfered asset ID.

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=transferAsset&
    secretPhrase=IWontTellYou&
    recipient=NXT-4VNQ-RWZC-4WWQ-GVM8S&
    asset=17554243582654188572&
    quantityQNT=1000&
    feeNQT=100000000&
    deadline=60
---------------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
    "signatureHash": "f622557588bc82942984286e431c978e687783b32db6a68a1c554b2e11349751",
    "unsignedTransactionBytes": "0211c9ebda013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "33d0fccf1f19d18b4ca97d2636cf62f7a801c07628d1bbb1d6084dc3ca658d...",
        "feeNQT": "100000000",
        "type": 2,
        "fullHash": "c8f25b15b48fb5efd3341fb369627d00f8fefb59dc18016ba0c482b6de7cad59",
        "version": 1,
        "ecBlockId": "3925493493266246517",
        "signatureHash": "f622557588bc82942984286e431c978e687783b32db6a68a1c554b2e11349751",
        "attachment": {
            "version.AssetTransfer": 1,
            "quantityQNT": "1000",
            "asset": "17554243582654188572"
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 1,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "recipientRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
        "recipient": "17013046603665206934",
        "ecBlockHeight": 288416,
        "deadline": 60,
        "transaction": "17272869949464638152",
        "timestamp": 31124425,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 4968,
    "transactionBytes": "0211c9ebda013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473b...",
    "fullHash": "c8f25b15b48fb5efd3341fb369627d00f8fefb59dc18016ba0c482b6de7cad59",
    "transaction": "17272869949464638152"
}
----------------------------------------------------------------------------------------------------

_Verified 19-Nov-14_

Block Operations
~~~~~~~~~~~~~~~~

Get Block
^^^^^^^^^

Get a block object given a block ID or block height.

*Request:*

* _requestType_ is _getBlock_
* _block_ is the block ID (optional)
* _height_ is the block height (optional if _block_ provided)
* _timestamp_ is the timestamp (in seconds since the genesis block) of
the block (optional if _height_ provided)
* _includeTransactions_ is _true_ to include transaction details
(optional)

*Note:* _block_ overrides _height_ which overrides __timestamp__.

*Response:*

* _previousBlockHash_ (S) is the 32-byte hash of the previous block
* _payloadLength_ (N) is the length (in bytes) of all transactions
included in the block
* _totalAmountNQT_ (S) is the total amount (in NQT) of the transactions
in the block
* _generationSignature_ (S) is the 32-byte generation signature of the
generating account
* _generator_ (S) is the generating account number
* _generatorPublicKey_ (S) is the 32-byte public key of the generating
account
* _baseTarget_ (S) is the base target for the next block generation
* _payloadHash_ (S) is the 32-byte hash of the payload (all
transactions)
* _generatorRS_ (S) is the Reed-Solomon address of the generating
account
* _nextBlock_ (S) is the next block ID
* _numberOfTransactions_ (N) is the number of transactions in the block
* _blockSignature_ (S) is the 64-byte block signature
* _transactions_ (A) is an array of transaction IDs or transaction
objects (if _includeTransactions_ provided, refer to
link:/wiki/Nxt_API#Get_Transaction[Get Transaction] for details)
* _version_ (N) is the block version
* _totalFeeNQT_ (S) is the total fee (in NQT) of the transactions in the
block
* _previousBlock_ (S) is the previous block ID
* _cumulativeDifficulty_ (S) is the cumulative difficulty for the next
block generation
* _block_ (S) is the block ID
* _height_ (N) is the zero-based block height
* _timestamp_ (N) is the timestamp (in seconds since the genesis block)
of the block
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-----------------------------
http://localhost:7876/nxt?
    requestType=getBlock&
    block=8455642159445842600
-----------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "previousBlockHash": "c0574d7a7b8497373dbead497c2dc7f60fdcfc8c5a9fcb48f7d373acc9bbb099",
    "payloadLength": 1189,
    "totalAmountNQT": "100000000",
    "generationSignature": "c5098d37267bc71134fc8572a87b4af8727a2e5139d60fe8833fab98af22244a",
    "generator": "11693867635361772359",
    "generatorPublicKey": "fbb72a280228af5c8c74c7c754a290e1539f839553c00bc560cac7bfdb324a7c",
    "baseTarget": "1530224444",
    "payloadHash": "633992be640a593ba04e31ca4028deed70bbf47cff333e2a0372a4e2a4aba205",
    "generatorRS": "NXT-TWU9-P3E4-HCDM-CQ9L6",
    "nextBlock": "5937170741469897491",
    "requestProcessingTime": 175,
    "numberOfTransactions": 6,
    "blockSignature": "ff65a82e385c135cf9bd5be0861e9e5d3d3174fbd993e5b7f57935ec4...",
    "transactions": [
        "15184285173972564233",
        "15200280108574630445",
        "15200507403046301754",
        "15900338016714606285",
        "17881859777840687131",
        "18361738217269620028"
    ],
    "version": 3,
    "totalFeeNQT": "600000000",
    "previousBlock": "4005816059437078464",
    "cumulativeDifficulty": "10229109959119715",
    "block": "8455642159445842600",
    "height": 275730,
    "timestamp": 29797208
}
----------------------------------------------------------------------------------------------

_Verified 15-Dec-14_

Get Block ID
^^^^^^^^^^^^

Get a block ID given a block height.

*Request:*

* _requestType_ is _getBlockId_
* _height_ is the block height

*Response:*

* _block_ (S) is the block ID
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------
http://localhost:7876/nxt?
    requestType=getBlockId&
    height=0
---------------------------

*Response:*

-----------------------------------
{
    "block": "2680262203532249785",
    "requestProcessingTime": 1
}
-----------------------------------

_Verified 11-Nov-14_

Get Blocks
^^^^^^^^^^

Get blocks from the blockchain in reverse block height order.

*Request:*

* _requestType_ is _getBlocks_
* _firstIndex_ is first block to retrieve (optional, default is zero or
the last block on the blockchain)
* _lastIndex_ is the last block to retrieve (optional, default is
_firstIndex_ + 99)
* _includeTransactions_ is _true_ to include transaction details
(optional)

*Response:*

* _blocks_ (A) is an array of blocks retrieved (refer to
link:/wiki/Nxt_API#Get_Block[Get Block] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=getBlocks&
    lastIndex=1
--------------------------

*Response:*

------------------------------------------------------------------------------------------------------
{
    "blocks": [
        {
            "previousBlockHash": "f88c75a36317e1795348330cb9a944f33153b517ebdf05d9f3f9a606e997618d",
            "payloadLength": 981,
            "totalAmountNQT": "0",
            "generationSignature": "02f7462b62270c0028c379d838d3a192cf0b782995f3bb1929a5378d26e7e8a9",
            "generator": "2218289317977832095",
            "generatorPublicKey": "98ccf5d5173b13e4c9eab2631372f61ce8ba506db559d73b285073a689872e75",
            "baseTarget": "151761236",
            "payloadHash": "82f8c8ca1f8f2252172ed1e9836d5228432fcb18aecfa7d55a119efcd242321c",
            "generatorRS": "NXT-TGNZ-E8VK-69EX-3L9LX",
            "numberOfTransactions": 5,
            "blockSignature": "76a3f7f966256c4985262fb4622190b2b9a19b900f6ce443ab7d581e3176c...",
            "transactions": [
                "10545999940082849455",
                "16751328983055099280",
                "1257496316971695605",
                "2048859884870801838",
                "5105170273384355243"
            ],
            "version": 3,
            "totalFeeNQT": "500000000",
            "previousBlock": "8782326465060769016",
            "block": "7299310714263322546",
            "height": 281683,
            "timestamp": 30416681
        },
        {
            "previousBlockHash": "edc2d65d24883b9b32c46da4eec3792a69a5ff9a9b1e629c4e7e0224432c87c9",
            "payloadLength": 0,
            "totalAmountNQT": "0",
            "generationSignature": "8c4944c7a9ef5700d1b89660fdf83bcbd3dbbfbe191fef005d0f248a573816fe",
            "generator": "15766845356521829337",
            "generatorPublicKey": "11636697faf4ade736cedf6c528bec0142353c4d93fce05cdb818c49e0390422",
            "baseTarget": "303522472",
            "payloadHash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
            "generatorRS": "NXT-2EYT-C522-VL6G-FQSMP",
            "nextBlock": "7299310714263322546",
            "numberOfTransactions": 0,
            "blockSignature": "90464d183ed01cb0930ef527e746eaa092d1558697c369cc9246add5f6eec...",
            "transactions": [],
            "version": 3,
            "totalFeeNQT": "0",
            "previousBlock": "11185683789279314669",
            "block": "8782326465060769016",
            "height": 281682,
            "timestamp": 30416671
        }
    ],
    "requestProcessingTime": 2
}
------------------------------------------------------------------------------------------------------

_Verified 11-Nov-14_

Get Economic Cluster Block
^^^^^^^^^^^^^^^^^^^^^^^^^^

Get EC block data.

*Request:*

* _requestType_ is _getECBlock_
* _timestamp_ is the timestamp (in seconds since the genesis block) of
the EC block (optional, default (or zero) is the current timestamp)

*Note:* If _timestamp_ is more than 15 seconds before the timestamp of
the last block on the blockchain, _errorCode_ 4 is returned.

*Response:*

* _ecBlockHeight_ (N) is the EC block height
* _ecBlockId_ (S) is the EC block ID
* _timestamp_ (N) is the timestamp (in seconds since the genesis block)
of the EC block
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=getECBlock
--------------------------

*Response:*

---------------------------------------
{
    "ecBlockHeight": 281777,
    "requestProcessingTime": 2,
    "ecBlockId": "6565813579609649593",
    "timestamp": 30427868
}
---------------------------------------

_Verified 11-Nov-14_

Digital Goods Store Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the link:/wiki/Nxt_client_interface[Nxt client interface], the
Digital Goods Store (DGS) is referred to as
link:/wiki/Marketplace[Marketplace].

DGS Delisting
^^^^^^^^^^^^^

Delist a listed product. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _dgsDelisting_
* _goods_ is the goods ID

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

------------------------------
http://localhost:7876/nxt?
    requestType=dgsDelisting&
    goods=11813734897437346473
    secretPhrase=IWontTellYou&
    feeNQT=100000000&
    deadline=60
------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
    "signatureHash": "87dd2aa00690acaa5da4e8cd9db6ab94b5ed8bf0f8fe2c2ba6a39c57d3073105",
    "unsignedTransactionBytes": "03111852e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "39ee52204d0a32c0bbd0e4bc6a6fb52299cd7d16ab74e9a040f857d3b1c3e...",
        "feeNQT": "100000000",
        "type": 3,
        "fullHash": "40e64c357e240f9b7ca5780e757e34d48a58ae93eeb19e62d020d5719b43e2b6",
        "version": 1,
        "ecBlockId": "5345754442518111082",
        "signatureHash": "87dd2aa00690acaa5da4e8cd9db6ab94b5ed8bf0f8fe2c2ba6a39c57d3073105",
        "attachment": {
            "version.DigitalGoodsDelisting": 1,
            "goods": "11813734897437346473"
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 1,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "ecBlockHeight": 292903,
        "deadline": 60,
        "transaction": "11173189325008201280",
        "timestamp": 31609368,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 5188,
    "transactionBytes": "03111852e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "fullHash": "40e64c357e240f9b7ca5780e757e34d48a58ae93eeb19e62d020d5719b43e2b6",
    "transaction": "11173189325008201280"
}
----------------------------------------------------------------------------------------------------

_Verified 25-Nov-14_

DGS Delivery
^^^^^^^^^^^^

Deliver a product. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _dgsDelivery_
* _purchase_ is the purchase order ID
* _discountNQT_ is a discount (in NQT) off the selling price (optional,
default is zero)
* _goodsToEncrypt_ is the product, a text or a hex string to be
encrypted (optional if _goodsData_ provided)
* _goodsIsText_ is _false_ if _goodsToEncrypt_ is a hex string
(optional)
* _goodsData_ is AES-encrypted (using
link:/wiki/Nxt_API#Encrypt_Message_To[Encrypt Message To])
_goodsToEncrypt_ (required only if _secretPhrase_ is omitted)
* _goodsNonce_ is the unique nonce associated with the encrypted data
(required only if _secretPhrase_ is omitted)

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

----------------------------------
http://localhost:7876/nxt?
    requestType=dgsDelivery&
    purchase=3723760852542296589&
    goodsToEncrypt=Download Code.&
    secretPhrase=IWontTellYou&
    feeNQT=100000000&
    deadline=60
----------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
    "signatureHash": "f3f1f1bf30c7a6f5a7776aa23502dfe5240efe0d5c016760f8e8a152c4eb1b1b",
    "unsignedTransactionBytes": "0315b20fe1013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "b96c42161ce38177168de5a8906ce747a5415017df5b16cdce1c015cb6e1f10b...",
        "feeNQT": "100000000",
        "type": 3,
        "fullHash": "349926ea025b627117c05fbe3ff298e97a8efdb07f7ae552b5a91e7112c5b82b",
        "version": 1,
        "ecBlockId": "15813950788992376142",
        "signatureHash": "f3f1f1bf30c7a6f5a7776aa23502dfe5240efe0d5c016760f8e8a152c4eb1b1b",
        "attachment": {
            "goodsIsText": true,
            "discountNQT": "0",
            "purchase": "3723760852542296589",
            "goodsData": "aef91bfe543844964b0dadc51c6fe4c624b6b0c72c23c5c61f7e626f51e15...",
            "version.DigitalGoodsDelivery": 1,
            "goodsNonce": "4cb474ec53a590c6fd20d050c429d009ddefd286b2782eb3a0782ae45c2bbbbd"
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 5,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "recipientRS": "NXT-6GMG-FC5F-YSX6-8CVEL",
        "recipient": "7580519603555678830",
        "ecBlockHeight": 292069,
        "deadline": 60,
        "transaction": "8170192742079961396",
        "timestamp": 31526834,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 8832,
    "transactionBytes": "0315b20fe1013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "fullHash": "349926ea025b627117c05fbe3ff298e97a8efdb07f7ae552b5a91e7112c5b82b",
    "transaction": "8170192742079961396"
}
----------------------------------------------------------------------------------------------------

_Verified 24-Nov-14_

DGS Feedback
^^^^^^^^^^^^

Give feedback about a purchased product after delivery. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _dgsFeedback_
* _purchase_ is the purchase order ID
* _message_ is unencrypted (public) feedback text up to 1000 bytes

**Note**: The unencrypted _message_ parameter is used for public
feedback, but in addition or instead, an encrypted message can be used
for private feedback to the seller and/or an encrypted message can be
sent to self (buyer) although the current
link:/wiki/Nxt_client_interface[NRS client] does not recognize
non-public feedback messages.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

----------------------------------
http://localhost:7876/nxt?
    requestType=dgsFeedback&
    purchase=10234639413366748292&
    secretPhrase=IWontTellYou&
    feeNQT=100000000&
    deadline=60&
    message=Thank You!
----------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
    "signatureHash": "bf31e4e3b2037bfe223efd72519e3a2d25cd1e0dc1a62e3eeefe59179e16a7a4",
    "unsignedTransactionBytes": "0316a463e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "a3ee76ce4bec0328fe5cfc1a2adfc229a8c9959a81b7912664de51156987c...",
        "feeNQT": "100000000",
        "type": 3,
        "fullHash": "491d94b9031b7a7a32d9ab5d0491b81364941eb080ee9029de58cb6ffa0161f6",
        "version": 1,
        "ecBlockId": "5484311742753527844",
        "signatureHash": "bf31e4e3b2037bfe223efd72519e3a2d25cd1e0dc1a62e3eeefe59179e16a7a4",
        "attachment": {
            "purchase": "10234639413366748292",
            "version.Message": 1,
            "messageIsText": true,
            "version.DigitalGoodsFeedback": 1,
            "message": "Thank you!"
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 6,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "recipientRS": "NXT-6GMG-FC5F-YSX6-8CVEL",
        "recipient": "7580519603555678830",
        "ecBlockHeight": 292938,
        "deadline": 60,
        "transaction": "8825396122598251849",
        "timestamp": 31613860,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 9343,
    "transactionBytes": "0316a463e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "fullHash": "491d94b9031b7a7a32d9ab5d0491b81364941eb080ee9029de58cb6ffa0161f6",
    "transaction": "8825396122598251849"
}
----------------------------------------------------------------------------------------------------

_Verified 25-Nov-14_

DGS Listing
^^^^^^^^^^^

List a product in the DGS by creating a listing transaction. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _dgsListing_
* _name_ is the name of the product up to 100 characters in length
* _description_ is a description of the product up to 1000 characters in
length
* _tags_ are up to three comma separated keywords describing the product
up to 100 characters in length (optional)
* _quantity_ is the quantity of the product for sale
* _priceNQT_ is the price (in NQT) of the product

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response]. The transaction ID is also the goods ID.

Example
+++++++

*Request:*

-----------------------------------
http://localhost:7876/nxt?
    requestType=dgsListing&
    secretPhrase=IWontTellYou&
    name=Test Product&
    description=Testing the DGS.
    tags=test, product, tag, extra&
    quantity=3&
    priceNQT=100000000&
    feeNQT=100000000&
    deadline=60
-----------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
    "signatureHash": "565bc0a6140ae1331cd5db009fbd9da164d8802330939ef40204a9bc343b3149",
    "unsignedTransactionBytes": "031092aedf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "465ed3dfef9a02fc97fc18a6f83bb9f07c285aef41ff78c957d59cda2972ba...",
        "feeNQT": "100000000",
        "type": 3,
        "fullHash": "a98a63204cd1f2a3304cee79776854f290f0472883c576056fec16a23efa90df",
        "version": 1,
        "ecBlockId": "4480409615309425420",
        "signatureHash": "565bc0a6140ae1331cd5db009fbd9da164d8802330939ef40204a9bc343b3149",
        "attachment": {
            "priceNQT": "100000000",
            "quantity": 3,
            "name": "Test Product",
            "description": "Testing the DGS.",
            "version.DigitalGoodsListing": 1,
            "tags": "test, product, tag, extra"
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 0,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "ecBlockHeight": 291240,
        "deadline": 60,
        "transaction": "11813734897437346473",
        "timestamp": 31436434,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 8958,
    "transactionBytes": "031092aedf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473b...",
    "fullHash": "a98a63204cd1f2a3304cee79776854f290f0472883c576056fec16a23efa90df",
    "transaction": "11813734897437346473"
}
----------------------------------------------------------------------------------------------------

_Verified 23-Nov-14_

DGS PriceChange
^^^^^^^^^^^^^^^

Change the price of a listed product. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _dgsPriceChange_
* _goods_ is the goods ID of the product
* _priceNQT_ is the new price of the product

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=dgsPriceChange&
    goods=11813734897437346473&
    priceNQT=200000000&
    secretPhrase=IWontTellYou&
    feeNQT=100000000&
    deadline=60
-------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
    "signatureHash": "aad88476935eda8ca3a9190163b83106e6ca95733ddfa274d29a0378d773cc3c",
    "unsignedTransactionBytes": "0312cebbdf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "533f9c330100cab8a7a0f9375b49a09f6432b0e029660ab715a728ac75e6c2...",
        "feeNQT": "100000000",
        "type": 3,
        "fullHash": "1964e4fe11f4a00a96c79e274f9da21f64d7fe10ed77a154975b92d3c65f1287",
        "version": 1,
        "ecBlockId": "14411471768450948944",
        "signatureHash": "aad88476935eda8ca3a9190163b83106e6ca95733ddfa274d29a0378d773cc3c",
        "attachment": {
            "goods": "11813734897437346473",
            "priceNQT": "200000000",
            "version.DigitalGoodsPriceChange": 1
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 2,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "ecBlockHeight": 291259,
        "deadline": 60,
        "transaction": "765880294780986393",
        "timestamp": 31439822,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 6444,
    "transactionBytes": "0312cebbdf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "fullHash": "1964e4fe11f4a00a96c79e274f9da21f64d7fe10ed77a154975b92d3c65f1287",
    "transaction": "765880294780986393"
}
----------------------------------------------------------------------------------------------------

_Verified 23-Nov-14_

DGS Purchase
^^^^^^^^^^^^

Purchase a product for sale. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _dgsPurchase_
* _goods_ is the goods ID of the product
* _priceNQT_ is the price of the product
* _quantity_ is the quantity to be purchased
* _deliveryDeadlineTimestamp_ is the timestamp (in seconds since the
genesis block) by which delivery of the product must occur

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response]. The transaction ID is also the purchase order ID.

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=dgsPurchase&
    goods=1587116104511359906&
    quantity=1&
    deliveryDeadlineTimestamp=31800000&
    secretPhrase=IWontTellYou&
    feeNQT=100000000&
    deadline=60
---------------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
    "signatureHash": "03e112d8707ae33ec37ff4405f31920c0e67c58439e33033c248b3eaca81d2c3",
    "unsignedTransactionBytes": "0314805be2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "a2739ef63024d9d3c61bebbb2692e7a2092666e13fc380c2e8b29c3a3fc24...",
        "feeNQT": "100000000",
        "type": 3,
        "fullHash": "84f4ef2d52be088e011e5b7857fbab88665918e0df02102a8333aee53c3bb88b",
        "version": 1,
        "ecBlockId": "3186563001195424357",
        "signatureHash": "03e112d8707ae33ec37ff4405f31920c0e67c58439e33033c248b3eaca81d2c3",
        "attachment": {
            "goods": "1587116104511359906",
            "priceNQT": "100000000",
            "quantity": 1,
            "deliveryDeadlineTimestamp": 31800000,
            "version.DigitalGoodsPurchase": 1
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 4,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "recipientRS": "NXT-6GMG-FC5F-YSX6-8CVEL",
        "recipient": "7580519603555678830",
        "ecBlockHeight": 292925,
        "deadline": 60,
        "transaction": "10234639413366748292",
        "timestamp": 31611776,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 5536,
    "transactionBytes": "0314805be2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "fullHash": "84f4ef2d52be088e011e5b7857fbab88665918e0df02102a8333aee53c3bb88b",
    "transaction": "10234639413366748292"
}
----------------------------------------------------------------------------------------------------

_Verified 25-Nov-14_

DGS Quantity Change
^^^^^^^^^^^^^^^^^^^

Change the quantity of a listed product. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _dgsQuantityChange_
* _goods_ is the goods ID of the product
* _deltaQuantity_ is the change in the quantity of the product for sale
(use negative numbers for a decrease in quantity)

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

----------------------------------
http://localhost:7876/nxt?
    requestType=dgsQuantityChange&
    goods=11813734897437346473&
    deltaQuantity=-1&
    secretPhrase=IWontTellYou&
    feeNQT=100000000&
    deadline=60
----------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
    "signatureHash": "5c60fc94452980f88423c3a16a74d49209d246d0f7454024c87cc76ea3221500",
    "unsignedTransactionBytes": "031334b7df013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "7eaf8e48a780f51aa7e01c01091c9388b72a1bf075dddbd3594d55ad169272...",
        "feeNQT": "100000000",
        "type": 3,
        "fullHash": "f3cd9046bba3706dd6f63cf387f23c7c29532ff15e3423f57900613c844a646f",
        "version": 1,
        "ecBlockId": "14589429051005044326",
        "signatureHash": "5c60fc94452980f88423c3a16a74d49209d246d0f7454024c87cc76ea3221500",
        "attachment": {
            "goods": "11813734897437346473",
            "version.DigitalGoodsQuantityChange": 1,
            "deltaQuantity": -1
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 3,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "ecBlockHeight": 291249,
        "deadline": 60,
        "transaction": "7885982972263845363",
        "timestamp": 31438644,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 7474,
    "transactionBytes": "031334b7df013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "fullHash": "f3cd9046bba3706dd6f63cf387f23c7c29532ff15e3423f57900613c844a646f",
    "transaction": "7885982972263845363"
}
----------------------------------------------------------------------------------------------------

_Verified 23-Nov-14_

DGS Refund
^^^^^^^^^^

Refund a purchase. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _dgsRefund_
* _purchase_ is the purchase order ID
* _refundNQT_ is the amount (in NQT) of the refund

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

---------------------------------
http://localhost:7876/nxt?
    requestType=dgsRefund&
    purchase=3723760852542296589&
    refundNQT=100000000&
    secretPhrase=IWontTellYou&
    feeNQT=100000000&
    deadline=60
---------------------------------

*Response:*

----------------------------------------------------------------------------------------------------
{
    "signatureHash": "dafa980759db6bd6e5f11aa7bdc1cff1bb201be750328c397870f1758cef975c",
    "unsignedTransactionBytes": "0317944ee2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "43a90c1f0dde1bca84623e69b0abe0284883600d7bfb5286b3489a9ee417...",
        "feeNQT": "100000000",
        "type": 3,
        "fullHash": "64c2af2811da3306f4671002ed1f12655fca1937a0b68164da2a71f3ee63adce",
        "version": 1,
        "ecBlockId": "11418000967717599433",
        "signatureHash": "dafa980759db6bd6e5f11aa7bdc1cff1bb201be750328c397870f1758cef975c",
        "attachment": {
            "purchase": "3723760852542296589",
            "version.DigitalGoodsRefund": 1,
            "refundNQT": "100000000"
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 7,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "recipientRS": "NXT-6GMG-FC5F-YSX6-8CVEL",
        "recipient": "7580519603555678830",
        "ecBlockHeight": 292899,
        "deadline": 60,
        "transaction": "446940555271717476",
        "timestamp": 31608468,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 10509,
    "transactionBytes": "0317944ee2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...",
    "fullHash": "64c2af2811da3306f4671002ed1f12655fca1937a0b68164da2a71f3ee63adce",
    "transaction": "446940555271717476"
}
----------------------------------------------------------------------------------------------------

_Verified 25-Nov-14_

Get DGS Good
^^^^^^^^^^^^

Get a DGS product given a goods ID.

*Request:*

* _requestType_ is _getDGSGood_
* _goods_ is the goods ID of the product
* _includeCounts_ is _false_ if the fields beginning with numberOf...
are to be omitted (optional)

*Response:*

* _seller_ (S) is the seller's account ID
* _quantity_ (N) is the quantity of the product remaining for sale
* _goods_ (S) is the ID of the product
* _description_ (S) is the description of the product
* _sellerRS_ (S) is the Reed-Solomon address of the seller's account
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _delisted_ (B) is _true_ if the product has been delisted, _false_
otherwise
* _parsedTags_ (A) is an array of up to three tag strings, parsed from
the _tags_ field
* _tags_ (S) is the comma separated list of tags provided by the seller
when the listing was created
* _priceNQT_ (S) is the current price of the product
* _numberOfPublicFeedbacks_ (N) is the number of public feedbacks given
for the product
* _name_ (S) is the name of the product
* _numberOfPurchases_ (N) is the number of purchases of the product
* _timestamp_ (N) is the timestamp (in seconds since the genesis block)
of the creation of the product listing

Example
+++++++

*Request:*

------------------------------
http://localhost:7876/nxt?
    requestType=getDGSGood&
    goods=11813734897437346473
------------------------------

*Response:*

-------------------------------------------
{
    "seller": "15323192282528158131",
    "quantity": 3,
    "goods": "11813734897437346473",
    "description": "Testing the DGS.",
    "sellerRS": "NXT-L6FM-89WK-VK8P-FCRBB",
    "requestProcessingTime": 1,
    "delisted": false,
    "parsedTags": [
        "test",
        "product",
        "tag"
    ],
    "tags": "test, product, tag, extra",
    "priceNQT": "100000000",
    "numberOfPublicFeedbacks": 0,
    "name": "Test Product",
    "numberOfPurchases": 0,
    "timestamp": 31436434
}
-------------------------------------------

_Verified 23-Nov-14_

Get DGS Goods
^^^^^^^^^^^^^

Get DGS products for sale in reverse chronological listing creation
order unless a seller is given, then in product name order.

*Request:*

* _requestType_ is _getDGSGoods_
* _seller_ is the account ID of the product seller (optional)
* _firstIndex_ is a zero-based index to the first product to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last product to retrieve
(optional)
* _inStockOnly_ is _false_ if out-of-stock products (zero quantity) are
to be retrieved (optional)
* _hideDelisted_ is _true_ if delisted products are to be omitted
(optional)
* _includeCounts_ is _false_ if the fields beginning with _numberOf..._
are to be omitted (optional)

*Note:* If none of the optional parameters are specified, all in-stock
products in the blockchain are retrieved at once, which may take a long
time.

*Response:*

* _goods_ (A) is an array of goods (refer to
link:/wiki/Nxt_API#Get_DGS_Good[Get DGS Good] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-----------------------------------
http://localhost:7876/nxt?
    requestType=getDGSGoods&
    seller=NXT-L6FM-89WK-VK8P-FCRBB
-----------------------------------

*Response:*

---------------------------------------------------
{
    "goods": [
        {
            "seller": "15323192282528158131",
            "quantity": 2,
            "goods": "11813734897437346473",
            "description": "Testing the DGS.",
            "sellerRS": "NXT-L6FM-89WK-VK8P-FCRBB",
            "delisted": false,
            "parsedTags": [
                "test",
                "product",
                "tag"
            ],
            "tags": "test, product, tag, extra",
            "priceNQT": "200000000",
            "numberOfPublicFeedbacks": 0,
            "name": "Test Product",
            "numberOfPurchases": 0,
            "timestamp": 31436434
        }
    ],
    "requestProcessingTime": 46
}
---------------------------------------------------

_Verified 23-Nov-14_

Get DGS Goods Count
^^^^^^^^^^^^^^^^^^^

Get the number of products for sale by a given seller or all sellers.

*Request:*

* _requestType_ is _getDGSGoodsCount_
* _seller_ is the account ID of the seller (optional, default is all
sellers combined)
* _inStockOnly_ is _false_ if out-of-stock (zero quantity) products are
to be included (optional)

*Response:*

* _numberOfGoods_ (N) is the number of goods for sale by the _seller_
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* The _numberOfGoods_ field refers to the number of distinct
products for sale, regardless of the quantity of each.

Example
+++++++

*Request:*

-----------------------------------
http://localhost:7876/nxt?
    requestType=getDGSGoodsCount&
    seller=NXT-L6FM-89WK-VK8P-FCRBB
-----------------------------------

*Response:*

------------------------------
{
    "numberOfGoods": 1,
    "requestProcessingTime": 2
}
------------------------------

_Verified 15-Dec-14_

Get DGS Goods Purchase Count
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the number of completed purchase orders given a goods ID.

*Request:*

* _requestType_ is _getDGSGoodsPurchaseCount_
* _goods_ is the goods ID
* _withPublicFeedbacksOnly_ is _true_ if purchase orders without public
feedback are to be omitted (optional)
* _completed_ is _true_ if only completed purchase orders are to be
included (optional)

*Response:*

* _numberOfPurchases_ (N) is the number of completed purchase orders
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-----------------------------------------
http://localhost:7876/nxt?
    requestType=getDGSGoodsPurchaseCount&
    goods=11813734897437346473
-----------------------------------------

*Response:*

------------------------------
{
    "numberOfPurchases": 1,
    "requestProcessingTime": 1
}
------------------------------

_Verified 15-Dec-14_

Get DGS Goods Purchases
^^^^^^^^^^^^^^^^^^^^^^^

Get completed purchase orders given a goods ID in reverse chronological
order.

*Request:*

* _requestType_ is _getDGSGoodsPurchases_
* _goods_ is the goods ID
* _firstIndex_ is a zero-based index to the first purchase order to
retrieve (optional)
* _lastIndex_ is a zero-based index to the last purchase order to
retrieve (optional)
* _withPublicFeedbacksOnly_ is _true_ if purchase orders without public
feedback are to be omitted (optional)
* _completed_ is _true_ if only completed purchase orders are to be
included (optional)

*Response:*

* _purchases_ (A) is an array of purchase orders (refer to
link:/wiki/Nxt_API#Get_DGS_Purchase[Get DGS Purchase] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getDGSGoodsPurchases&
    goods=11813734897437346473
-------------------------------------

*Response:*

-------------------------------------------------------------------------------------------
{
    "purchases": [
        {
            "seller": "15323192282528158131",
            "quantity": 2,
            "pending": false,
            "purchase": "3723760852542296589",
            "goods": "11813734897437346473",
            "sellerRS": "NXT-L6FM-89WK-VK8P-FCRBB",
            "buyer": "7580519603555678830",
            "priceNQT": "200000000",
            "deliveryDeadlineTimestamp": 31600000,
            "goodsIsText": false,
            "buyerRS": "NXT-6GMG-FC5F-YSX6-8CVEL",
            "name": "Test Product",
            "goodsData": {
                "data": "aef91bfe543844964b0dadc51c6fe4c624b6b0c72c23c5c61f7e626f51e15...",
                "nonce": "4cb474ec53a590c6fd20d050c429d009ddefd286b2782eb3a0782ae45c2bbbbd"
            },
            "timestamp": 31520720
        }
    ],
    "requestProcessingTime": 305
}
-------------------------------------------------------------------------------------------

_Verified 15-Dec-14_

Get DGS Pending Purchases
^^^^^^^^^^^^^^^^^^^^^^^^^

Get pending purchase orders given a seller ID in reverse chronological
order.

*Request:*

* _requestType_ is _getDGSPendingPurchases_
* _seller_ is the account ID of the seller
* _firstIndex_ is a zero-based index to the first purchase order to
retrieve (optional)
* _lastIndex_ is a zero-based index to the last purchase order to
retrieve (optional)

*Response:*

* _purchases_ (A) is an array of pending purchase orders (refer to
link:/wiki/Nxt_API#Get_DGS_Purchase[Get DGS Purchase] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=getDGSPendingPurchases&
    seller=NXT-L6FM-89WK-VK8P-FCRBB
---------------------------------------

*Response:*

---------------------------------------------------
{
    "purchases": [
        {
            "seller": "15323192282528158131",
            "priceNQT": "200000000",
            "quantity": 2,
            "deliveryDeadlineTimestamp": 31600000,
            "buyerRS": "NXT-6GMG-FC5F-YSX6-8CVEL",
            "pending": true,
            "purchase": "3723760852542296589",
            "name": "Test Product",
            "goods": "11813734897437346473",
            "sellerRS": "NXT-L6FM-89WK-VK8P-FCRBB",
            "buyer": "7580519603555678830",
            "timestamp": 31520720
        }
    ],
    "requestProcessingTime": 1
}
---------------------------------------------------

_Verified 24-Nov-14_

Get DGS Purchase
^^^^^^^^^^^^^^^^

Get a purchase order given a purchase order ID.

*Request:*

* _requestType_ is _getDGSPurchase_
* _purchase_ is the purchase order ID

*Response:*

* _seller_ (S) is the account number of the seller
* _quantity_ (N) is the quantity of the product to be purchased
* _feedbackNotes_ (A) is an array of AES-encrypted objects, each with
_data_ (S) and _nonce_ (S) fields, in reverse chronological order, if
applicable
* _publicFeedbacks_ (A) is an array of feedback strings in reverse
chronological order if applicable
* _pending_ (B) is _true_ if the _deliveryDeadline_ has not passed,
_false_ otherwise
* _purchase_ (S) is the purchase order ID
* _goods_ (S) is the ID of the product
* _sellerRS_ (S) is the Reed-Solomon address of the seller
* _buyer_ (S) is the account number of the buyer
* _priceNQT_ (S) is the price (in NQT) of the product
* _deliveryDeadlineTimestamp_ (N) is the timestamp (in seconds since the
genesis block) by which the product must be delivered
* _goodsIsText_ (B) is _false_ if the message is a hex string, otherwise
the message is text (optional)
* _buyerRS_ (S) is the Reed-Solomon address of the buyer
* _refundNQT_ (S) is the amount (in NQT) refunded, if applicable
* _name_ (S) is the name of the product
* _goodsData_ (O) is an object with the two fields _data_ (S) (the
encrypted product hex string) and _nonce_ (S), if the product has been
delivered
* _timestamp_ (N) is the timestamp (in seconds since the genesis block)
of the purchase order
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------------
http://localhost:7876/nxt?
    requestType=getDGSPurchase&
    purchase=10234639413366748292
---------------------------------

*Response:*

---------------------------------------------------------------------------------------
{
    "seller": "7580519603555678830",
    "quantity": 1,
    "feedbackNotes": [
        {
            "data": "7086a82f4da0708d4eaa9b16d5fc5a25c556596ea29d957d0a1dddd0a482c...",
            "nonce": "c521481ce67f7778c41c6716806047d4ea641005392cd7e5ce8d20c49623dad8"
        }
    ],
    "publicFeedbacks": [
        "Thank you again!",
        "Thank you!"
    ],
    "pending": false,
    "purchase": "10234639413366748292",
    "goods": "1587116104511359906",
    "sellerRS": "NXT-6GMG-FC5F-YSX6-8CVEL",
    "requestProcessingTime": 1,
    "buyer": "15323192282528158131",
    "priceNQT": "100000000",
    "deliveryDeadlineTimestamp": 31800000,
    "goodsIsText": false,
    "buyerRS": "NXT-L6FM-89WK-VK8P-FCRBB",
    "discountNQT": "100000000",
    "name": "Test Product",
    "goodsData": {
        "data": "5f4868022381aa9532614a7aae1600e59e84c80571add107dabca891df97e7...",
        "nonce": "c017b846de4375741ebc9f3bff894270d218ff4090a66dfd505770ccdc2f54bd"
    },
    "timestamp": 31611776
}
---------------------------------------------------------------------------------------

_Verified 24-Nov-14_

Get DGS Purchase Count
^^^^^^^^^^^^^^^^^^^^^^

Get the number of purchase orders given a seller and/or buyer ID, or all
orders combined.

*Request:*

* _requestType_ is _getDGSPurchaseCount_
* _seller_ is the account ID of the seller (optional, default is all
sellers)
* _buyer_ is the account ID of the buyer (optional, default is all
buyers)
* _withPublicFeedbacksOnly_ is _true_ if purchase orders without public
feedback are to be omitted (optional)
* _completed_ is _true_ if only completed purchase orders are to be
included (optional)

*Response:*

* _numberOfPurchases_ (N) is the number of purchase orders associated
with the seller and/or buyer
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getDGSPurchaseCount&
    seller=NXT-L6FM-89WK-VK8P-FCRBB
------------------------------------

*Response:*

------------------------------
{
    "numberOfPurchases": 2,
    "requestProcessingTime": 1
}
------------------------------

_Verified 15-Dec-14_

Get DGS Purchases
^^^^^^^^^^^^^^^^^

Get the purchase orders given a seller and/or buyer ID in reverse
chronological order.

*Request:*

* _requestType_ is _getDGSPurchases_
* _seller_ is the account ID of the seller (optional)
* _buyer_ is the account ID of the buyer (optional if _seller_ provided)
* _firstIndex_ is a zero-based index to the purchase order to retrieve
(optional)
* _lastIndex_ is a zero-based index to the purchase order to retrieve
(optional)
* _withPublicFeedbacksOnly_ is _true_ if purchase orders without public
feedback are to be omitted (optional)
* _completed_ is _true_ if only completed purchase orders are to be
included (optional)

*Response:*

* _purchases_ (A) is an array of purchase orders (refer to
link:/wiki/Nxt_API#Get_DGS_Purchase[Get DGS Purchase] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getDGSPurchases&
    seller=NXT-L6FM-89WK-VK8P-FCRBB&
    lastIndex=0
------------------------------------

*Response:*

---------------------------------------------------
{
    "purchases": [
        {
            "seller": "15323192282528158131",
            "priceNQT": "200000000",
            "quantity": 2,
            "deliveryDeadlineTimestamp": 31600000,
            "buyerRS": "NXT-6GMG-FC5F-YSX6-8CVEL",
            "pending": true,
            "purchase": "3723760852542296589",
            "name": "Test Product",
            "goods": "11813734897437346473",
            "sellerRS": "NXT-L6FM-89WK-VK8P-FCRBB",
            "buyer": "7580519603555678830",
            "timestamp": 31520720
        }
    ],
    "requestProcessingTime": 1
}
---------------------------------------------------

_Verified 15-Dec-14_

Get DGS Tag Count
^^^^^^^^^^^^^^^^^

Get the number of tags used by all sellers.

*Request:*

* _requestType_ is _getDGSTagCount_
* _inStockOnly_ is _false_ if tags with no associated in-stock products
are to be included (optional)

*Response:*

* _numberOfTags_ (N) is the number of tags
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------
http://localhost:7876/nxt?
    requestType=getDGSTagCount
------------------------------

*Response:*

--------------------------------
{
    "numberOfTags": 383,
    "requestProcessingTime": 472
}
--------------------------------

_Verified 15-Dec-14_

Get DGS Tags
^^^^^^^^^^^^

Get tags used by all sellers in reverse __inStockCount__, reverse
__totalCount__, _tag_ order.

*Request:*

* _requestType_ is _getDGSTags_
* _inStockOnly_ is _false_ if out-of-stock tags are to be retrieved
(optional)
* _firstIndex_ is a zero-based index to the first tag to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last tag to retrieve
(optional)

*Response:*

* _tags_ (A) is an array of tag objects with the following fields for
each tag:
* _inStockCount_ (N) is the number of products available for sale as
tagged
* _tag_ (S) is the tag word
* _totalCount_ (N) is the total number of products as tagged
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* The _...Count_ fields refer to the number of distinct products
tagged, regardless of the quantity of each.

Example
+++++++

*Request:*

---------------------------
http://localhost:7876/nxt?
    requestType=getDGSTags&
    lastIndex=0
---------------------------

*Response:*

-------------------------------
{
    "requestProcessingTime": 2,
    "tags": [
        {
            "inStockCount": 40,
            "tag": "domains",
            "totalCount": 42
        }
    ]
}
-------------------------------

_Verified 24-Nov-14_

Search DGS Goods
^^^^^^^^^^^^^^^^

Get product listings that have a name or description that match a given
query in reverse relevance order, then name order (given a seller), then
reverse chronological order.

*Request:*

* _requestType_ is _searchDGSGoods_
* _query_ is a full text query on the goods fields _name_ and
_description_ in the
http://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Overview[standard
Lucene syntax] (optional)
* _tag_ is a query on the good field _tags_ in the
http://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Overview[standard
Lucene syntax] (optional)
* _seller_ is the account ID of the product seller (optional)
* _firstIndex_ is a zero-based index to the first product to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last product to retrieve
(optional)
* _inStockOnly_ is _false_ if out-of-stock products (zero quantity) are
to be retrieved (optional)
* _hideDelisted_ is _true_ if delisted products are to be omitted
(optional)
* _includeCounts_ is _false_ if the fields beginning with _numberOf..._
are to be omitted (optional)

*Response:*

* _goods_ (A) is an array of goods objects (refer to
link:/wiki/Nxt_API#Get_DGS_Good[Get DGS Good] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=searchDGSGoods&
    tag=te?t AND prod*
-------------------------------

*Response:*

------------------------------------------------------------------
{
    "goods": [
        {
            "seller": "7580519603555678830",
            "quantity": 1,
            "goods": "1587116104511359906",
            "description": "This is a test. Please do not order.",
            "sellerRS": "NXT-6GMG-FC5F-YSX6-8CVEL",
            "delisted": false,
            "parsedTags": [
                "test",
                "product",
                "tag"
            ],
            "tags": "test,product,tag",
            "priceNQT": "100000000",
            "numberOfPublicFeedbacks": 1,
            "name": "Test Product",
            "numberOfPurchases": 1,
            "timestamp": 31611435
        }
    ],
    "requestProcessingTime": 4
}
------------------------------------------------------------------

_Verified 15-Dec-14_

Forging Operations
~~~~~~~~~~~~~~~~~~

Start / Stop / Get Forging
^^^^^^^^^^^^^^^^^^^^^^^^^^

Start or stop forging with an account, or check to see if an account is
forging. POST only.

*Request:*

* _requestType_ is either __startForging__, _stopForging_ or
_getForging_
* _secretPhrase_ is the secret passphrase of the account (optional for
_stopForging_ and _getForging_ if password protected like the
link:/wiki/Nxt_API#Debug_Operations[Debug Operations])

*Response:*

* _deadline_ (N) is the estimated time (in seconds since the last block)
until the account will forge a block (__startForging__ and _getForging_
only)
* _hitTime_ (N) is the estimated time (in seconds since the genesis
block) when the account will forge a block (__startForging__ and
_getForging_ only)
* _remaining_ (N) is the deadline less the elapsed time since the last
block (__getForging__ only)
* _foundAndStopped_ (B) is _true_ if forging was stopped, _false_ if
forging was already stopped (__stopForging__ only)
* _account_ (S) is the account number (__getForging__ only)
* _accountRS_ (S) is the Reed-Solomon address of the account
(__getForging__ only)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* A _getForging_ request returns _errorCode_ 5 if the account is
not forging. If the account has a zero __effectiveBalance__, forging can
be started but __deadline__, _remainingTime_ and _hitTime_ will be set
to zero.

Example
+++++++

*Request:*

-----------------------------
http://localhost:7876/nxt?
    requestType=startForging&
    secretPhrase=IWontTellYou
-----------------------------

*Response:*

-------------------------------
{
    "requestProcessingTime": 1,
    "deadline": 0,
    "hitTime": 0
}
-------------------------------

_Verified 9-Nov-14_

Lease Balance
^^^^^^^^^^^^^

link:/wiki/Account_Leasing[Lease] the entire guaranteed balance of NXT
to another account, after 1440 confirmations. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _leaseBalance_
* _period_ is the lease period (in number of blocks, 1440 minimum)
* _recipient_ is the lessee (recipient) account
* _recipientPublicKey_ is the public key of the lessee (recipient)
account (optional, enhances security of a new account)

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=leaseBalance&
    period=1440&
    recipient=NXT-4VNQ-RWZC-4WWQ-GVM8S&
    secretPhrase=IWontTellYou&
    feeNQT=100000000&
    deadline=60
---------------------------------------

*Response:*

--------------------------------------------------------------------------------------------------------
{
    "signatureHash": "462590bb85b615ddd34d59a1ffdc452a9baee2088044c1b9eb44298e49158f35",
    "unsignedTransactionBytes": "04107977ce013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473b...",
    "transactionJSON": {
        "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
        "signature": "4a89702535246fd55bfc4b4691dc4266daa3100e00cdf0caaed57a5ad750da075a...",
        "feeNQT": "100000000",
        "type": 4,
        "fullHash": "251bcd86057c09bb2d055bbeeb9b67ccae861f75d4aada21b3b79a13db9712e1",
        "version": 1,
        "ecBlockId": "6565389899781382679",
        "signatureHash": "462590bb85b615ddd34d59a1ffdc452a9baee2088044c1b9eb44298e49158f35",
        "attachment": {
            "version.EffectiveBalanceLeasing": 1,
            "period": 1440
        },
        "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
        "subtype": 0,
        "amountNQT": "0",
        "sender": "15323192282528158131",
        "recipientRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
        "recipient": "17013046603665206934",
        "ecBlockHeight": 280672,
        "deadline": 60,
        "transaction": "13477439723061189413",
        "timestamp": 30308217,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 7340,
    "transactionBytes": "04107977ce013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473b...",
    "fullHash": "251bcd86057c09bb2d055bbeeb9b67ccae861f75d4aada21b3b79a13db9712e1",
    "transaction": "13477439723061189413"
}
--------------------------------------------------------------------------------------------------------

_Verified 10-Nov-14_

Hallmark Operations
~~~~~~~~~~~~~~~~~~~

Decode Hallmark
^^^^^^^^^^^^^^^

Decode a node hallmark.

*Request:*

* _requestType_ is _decodeHallmark_
* _hallmark_ is the hallmark value

*Response:*

* _valid_ (B) is _true_ if _host_ is less than 100 characters, _weight_
> 0 and the embedded signature is verified
* _weight_ (N) is the weight assigned to the hallmark
* _host_ (S) is the IP address or domain name associated with the
hallmark
* _account_ (S) is the account number associated with the hallmark
* _accountRS_ (S) is the Reed-Solomon address of the account
* _date_ (S) is the date the hallmark was created, in YYYY-MM-DD format
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------------------------------------------------
http://127.0.0.1:7876/nxt?
    requestType=decodeHallmark&
    hallmark=827ed8cf83bbd36419002759d960a1bec952f2209db8ed3be958...
--------------------------------------------------------------------

*Response:*

--------------------------------------------
{
    "date": "2013-12-10",
    "valid": true,
    "accountRS": "NXT-FEJ5-H4YB-QD3D-2L3W2",
    "host": "nxttyclub.info",
    "weight": 100,
    "requestProcessingTime": 2,
    "account": "31580691533050371"
}
--------------------------------------------

_Verified 22-Nov-14_

Generate Hallmark
^^^^^^^^^^^^^^^^^

Generates a node hallmark. POST only.

*Request:*

* _requestType_ is _markHost_
* _secretPhrase_ is the secret passphrase for the account that will be
hallmarked on the node
* _host_ is the IP address or domain name of the node
* _weight_ is the weight to assign to the node
* _date_ is the current date in YYYY-MM-DD format

*Note:* Refer to /wiki/How-To:CreateHallmark[Create Hallmark] for
details.

*Response:*

* _hallmark_ (S) is the hallmark hex string
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* Refer to /wiki/How-To:CreateHallmark[Create Hallmark] for
instructions for applying the hallmark to a public node.

Example
+++++++

*Request:*

------------------------------
http://localhost:7876/nxt?
    requestType=markHost&
    secretPhrase=IWontTellYou&
    host=iwonttellyou.com&
    weight=1&
    date=2014-11-22
------------------------------

*Response:*

--------------------------------------------------------------------------------------
{
    "hallmark": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c...",
    "requestProcessingTime": 5
}
--------------------------------------------------------------------------------------

_Verified 22-Nov-14_

Monetary System Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~

General Monetary System documentation is available
https://bitbucket.org/JeanLucPicard/nxt/issue/205/monetary-system-documentation[here].
Documentation on the MintWorker tool for currency minting is available
https://bitbucket.org/JeanLucPicard/nxt/issue/207/mint-worker-utility[here].

Can Delete Currency
^^^^^^^^^^^^^^^^^^^

Determine if a currency can be deleted.

*Request:*

* _requestType_ is _canDeleteCurrency_
* _account_ is the account ID
* _currency_ is the currency ID

*Response:*

* _canDelete_ (B) is _true_ if the currency can be deleted, _false_
otherwise
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* a currency can be deleted only when all units of the currency
are held by __account__. A reserveable currency that has not yet been
issued can be deleted by the issuer. A mintable currency that has not
completed minting cannot be deleted by a non-issuer.

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=canDeleteCurrency&
    account=NXT-2HCZ-6GCJ-2XGV-EDRPH&
    currency=4923907272718555444
-------------------------------------

*Response:*

------------------------------
{
    "canDelete": true,
    "requestProcessingTime": 1
}
------------------------------

_Verified 23-Dec-14_

Currency Buy / Sell
^^^^^^^^^^^^^^^^^^^

Make an exchange request to buy or sell an exchangeable currency. POST
only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _currencyBuy_ or _currencySell_
* _currency_ is the currency ID
* _rateNQT_ is the exchange rate (in NQT per QNT)
* _units_ is the amount of the currency to buy or sell (in QNT)

*Note:* An exchange request is immediately executed once accepted onto
the blockchain based only on currently available offers (refer to
link:/wiki/Nxt_API#Publish_Exchange_Offer[Publish Exchange Offer]). The
request then expires, regardless of the amount of currency exchanged;
the request may be completely filled, partially filled, or expire
without any exchange if no matching offers are found.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

---------------------------------
http://localhost:7876/nxt?
    requestType=currencyBuy&
    currency=6520756875632314476&
    rateNQT=1500000000&
    units=200&
    secretPhrase=SECRETPHRASE&
    feeNQT=100000000&
    deadline=60
---------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "0471907734d4aae7fc708131726f8660a68e66fe873fa17cab4f0cb3f879243f",
    "unsignedTransactionBytes": "051607cb08023c0010f09c34f225d425306e5be55a49469081...",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "dda6c065344827bfdecfee179b22dfee1d5280fa5da5431b012d9ea045a0d80b9d4...",
        "feeNQT": "100000000",
        "type": 5,
        "fullHash": "d388798c9ecaf2cd28578cfcb8fb7e8f07d308e36e2a5674bb1c7766595b8435",
        "version": 1,
        "ecBlockId": "10096636210021430702",
        "signatureHash": "0471907734d4aae7fc708131726f8660a68e66fe873fa17cab4f0cb3f879243f",
        "attachment": {
            "currency": "6520756875632314476",
            "version.ExchangeSell": 1,
            "units": "200",
            "rateNQT": "1500000000"
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 6,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "ecBlockHeight": 162266,
        "deadline": 60,
        "transaction": "14840146504449624275",
        "timestamp": 34130695,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 331,
    "transactionBytes": "051607cb08023c0010f09c34f225d425306e5be55a49469081560...",
    "fullHash": "d388798c9ecaf2cd28578cfcb8fb7e8f07d308e36e2a5674bb1c7766595b8435",
    "transaction": "14840146504449624275"
}
----------------------------------------------------------------------------------------------

_Verified 24-Dec-14_

Currency Mint
^^^^^^^^^^^^^

Submit a valid computed nonce to the blockchain in return for newly
minted currency. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _currencyMint_
* _currency_ is the mintable currency ID
* _nonce_ is the computed nonce
* _units_ is the amount (in QNT) of currency to mint
* _counter_ (N) is the counter associated with the minting account

*Note:* The hash of _nonce_ must be less than _targetBytes_ provided by
link:/wiki/Nxt_API#Get_Minting_Target[Get Minting Target] for given
_units_ and __counter__. _counter_ must be increased with each
submission.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

---------------------------------
http://localhost:7876/nxt?
    requestType=currencyMint&
    currency=9207767346829573996&
    nonce=-6757092571753666960&
    units=1&
    counter=26&
    secretPhrase=SECRETPHRASE&
    feeNQT=100000000&
    deadline=60
---------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "f0e9f3b040890043fbc2d1b235377eb566805419f459184bc9290051bacdf80f",
    "unsignedTransactionBytes": "0517655a0c023c0010f09c34f225d425306e5be55a49469081...",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "e961f58250dd256bb5f0628df342beb6ce042765d7cdad8d7598495759d7ec00ad8...",
        "feeNQT": "100000000",
        "type": 5,
        "fullHash": "05cbe451cdece14bab56c5684d30cd7eb62e45a86136071e90ae26981d4c1fc3",
        "version": 1,
        "ecBlockId": "12526333689713738846",
        "signatureHash": "f0e9f3b040890043fbc2d1b235377eb566805419f459184bc9290051bacdf80f",
        "attachment": {
            "currency": "9207767346829573996",
            "units": "1",
            "counter": "26",
            "version.CurrencyMinting": 1,
            "nonce": "-6757092571753666960"
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 7,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "ecBlockHeight": 160721,
        "deadline": 60,
        "transaction": "5467911789190892293",
        "timestamp": 34364005,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 815,
    "transactionBytes": "0517655a0c023c0010f09c34f225d425306e5be55a49469081560...",
    "fullHash": "05cbe451cdece14bab56c5684d30cd7eb62e45a86136071e90ae26981d4c1fc3",
    "transaction": "5467911789190892293"
}
----------------------------------------------------------------------------------------------

_Verified 27-Dec-14_

Currency Reserve Claim
^^^^^^^^^^^^^^^^^^^^^^

Claim currency reserve. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _currencyReserveClaim_
* _currency_ is the currency ID
* _units_ is the amount (in QNT) of reserve currency to claim

*Note:* Holders of a claimable currency may claim the locked NQT backing
their units, thus reducing the supply of the currency.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=currencyReserveClaim&
    currency=15992040603642022742&
    units=36
-------------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "6daef8c9b8653a9b78b64e400c2ab64ea201e9888b8bc54ec6c9a28814b0a69e",
    "unsignedTransactionBytes": "0512a7830b023c00169cf83994b0e8c48a152ddc50606d58bd...",
    "transactionJSON": {
        "senderPublicKey": "169cf83994b0e8c48a152ddc50606d58bd4b2b85ec2f5bbbaae93d838443df7f",
        "signature": "5ab6605aca7a958b10e5f0198660eccd01bff1418f2bf172105ba39e9c911d09709...",
        "feeNQT": "100000000",
        "type": 5,
        "fullHash": "f32e02362dce767c6f4b069f793f2cd8c6b89bad04847c8abe98d8998cede94f",
        "version": 1,
        "ecBlockId": "14980969893438059909",
        "signatureHash": "6daef8c9b8653a9b78b64e400c2ab64ea201e9888b8bc54ec6c9a28814b0a69e",
        "attachment": {
            "version.ReserveClaim": 1,
            "currency": "15992040603642022742",
            "units": "36"
        },
        "senderRS": "NXT-BMUV-8QQR-47VK-CR7F3",
        "subtype": 2,
        "amountNQT": "0",
        "sender": "11580081983047651163",
        "ecBlockHeight": 160064,
        "deadline": 60,
        "transaction": "8968582401529884403",
        "timestamp": 34309031,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 7,
    "transactionBytes": "0512a7830b023c00169cf83994b0e8c48a152ddc50606d58bd4b2...",
    "fullHash": "f32e02362dce767c6f4b069f793f2cd8c6b89bad04847c8abe98d8998cede94f",
    "transaction": "8968582401529884403"
}
----------------------------------------------------------------------------------------------

_Verified 26-Dec-14_

Currency Reserve Increase
^^^^^^^^^^^^^^^^^^^^^^^^^

Increase the currency reserve of an unissued reservable currency. POST
only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _currencyReserveIncrease_
* _currency_ is the currency ID
* _amountPerUnitNQT_ is the additional amount (in NQT per QNT of
__reserveSupply__) to reserve (refer to
link:/wiki/Nxt_API#Issue_Currency[Issue Currency])

*Note:* An additional _amountPerUnitNQT_ * _reserveSupply_ NQT (beyond
what has previously been reserved) will be locked until the
_issuanceHeight_ is reached. Upon issuance, if the currency is claimable
the NQT will remain locked until claimed; otherwise the NQT will
transfer to the issuing account. Also upon issuance, a portion of the
_reserveSupply_ QNT will be transfered to each reserving account in
proportion to the NQT that was contributed.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

----------------------------------------
http://localhost:7876/nxt?
    requestType=currencyReserveIncrease&
    currency=11847174313362984527
    amountPerUnitNQT=40000000
----------------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "0ba69ec678e0d4c4f94ee576d9520bf13a1c88b87e46c79d937b8f998a4a1f54",
    "unsignedTransactionBytes": "05115c930b023c00169cf83994b0e8c48a152ddc50606d58bd...",
    "transactionJSON": {
        "senderPublicKey": "169cf83994b0e8c48a152ddc50606d58bd4b2b85ec2f5bbbaae93d838443df7f",
        "signature": "01ab2e01e8543321bb93baef1cdfd24335b2f98f4898c0203ebb372f6ea2140f609...",
        "feeNQT": "100000000",
        "type": 5,
        "fullHash": "0e583d097aa7832ef97f49bf1c43fe6fa26592cd7b60cd1c652b1139719c9404",
        "version": 1,
        "ecBlockId": "3894856940593871962",
        "signatureHash": "0ba69ec678e0d4c4f94ee576d9520bf13a1c88b87e46c79d937b8f998a4a1f54",
        "attachment": {
            "amountPerUnitNQT": "40000000",
            "currency": "11847174313362984527",
            "version.ReserveIncrease": 1
        },
        "senderRS": "NXT-BMUV-8QQR-47VK-CR7F3",
        "subtype": 1,
        "amountNQT": "0",
        "sender": "11580081983047651163",
        "ecBlockHeight": 160118,
        "deadline": 60,
        "transaction": "3351706690276644878",
        "timestamp": 34313052,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 7,
    "transactionBytes": "05115c930b023c00169cf83994b0e8c48a152ddc50606d58bd4b2...",
    "fullHash": "0e583d097aa7832ef97f49bf1c43fe6fa26592cd7b60cd1c652b1139719c9404",
    "transaction": "3351706690276644878"
}
----------------------------------------------------------------------------------------------

_Verified 26-Dec-14_

Delete Currency
^^^^^^^^^^^^^^^

Delete a deletable currency (refer to
link:/wiki/Nxt_API#Can_Delete_Currency[Can Delete Currency]). POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _deleteCurrency_
* _currency_ is the currency ID

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

---------------------------------
http://localhost:7876/nxt?
    requestType=deleteCurrency&
    currency=7103310507724273660&
    secretPhrase=SECRETPHRASE&
    feeNQT=100000000&
    deadline=60
---------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "3f2b029337263728f4d4fed1f774252b06706159659e6ba9116b2d74b67a8435",
    "unsignedTransactionBytes": "05189d7208023c0010f09c34f225d425306e5be55a49469081...",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "09c7be5b0742191f3777cc850f9478af21bd42225aec5e0793b57cd188767a0be6f...",
        "feeNQT": "100000000",
        "type": 5,
        "fullHash": "a877379e3f3713e2f8baaa777c9a48af23d7da74e00301f12a4051dcf747243f",
        "version": 1,
        "ecBlockId": "2688066685599408512",
        "signatureHash": "3f2b029337263728f4d4fed1f774252b06706159659e6ba9116b2d74b67a8435",
        "attachment": {
            "version.CurrencyDeletion": 1,
            "currency": "7103310507724273660"
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 8,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "ecBlockHeight": 162004,
        "deadline": 60,
        "transaction": "16290425023506118568",
        "timestamp": 34108061,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 112,
    "transactionBytes": "05189d7208023c0010f09c34f225d425306e5be55a49469081...",
    "fullHash": "a877379e3f3713e2f8baaa777c9a48af23d7da74e00301f12a4051dcf747243f",
    "transaction": "16290425023506118568"
}
----------------------------------------------------------------------------------------------

_Verified 24-Dec-14_

Get Account Currencies
^^^^^^^^^^^^^^^^^^^^^^

Get the currencies issued by a given account.

*Request:*

* _requestType_ is _getAccountCurrencies_
* _account_ is the account ID
* _currency_ is a currency ID filter (optional)
* _height_ is the blockchain height at which the response applies
(optional, default is the current height)

*Response:*

* _accountCurrencies_ (A) is an array of currency objects with the
following fields:
* _code_ (S) is the currency code
* _unconfirmedUnits_ (S) is the amount of unconfirmed currency units (in
QNT)
* _decimals_ (N) is the number of currency decimal places
* _name_ (S) is the currency name
* _currency_ (S) is the currency ID
* _units_ (S) is the amount of currency (in QNT)
* _issuanceHeight_ (N) is the blockchain height of issuance for a
reservable currency
* _type_ (N) is the currency type bitmask (refer to
link:/wiki/Nxt_API#Get_Currency[Get Currency])
* _issuerAccountRS_ (S) is the Reed-Solomon address of the issuer
account
* _issuerAccount_ (S) is the issuer account ID
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountCurrencies&
    account=NXT-4VDY-LNVT-LMAY-FMCKA
-------------------------------------

*Response:*

---------------------------------------------------------
{
    "accountCurrencies": [
        {
            "issuerAccountRS":"NXT-4VDY-LNVT-LMAY-FMCKA",
            "code": "MYSTX",
            "unconfirmedUnits": "10000",
            "decimals": 2,
            "name": "MystcoinX",
            "currency": "6520756875632314476",
            "units": "10000",
            "issuanceHeight": 0,
            "type": 1,
            "issuerAccount":"15295723609781267838"
        }
    ],
    "requestProcessingTime": 1
}
---------------------------------------------------------

_Verified 25-Dec-14_

Get Account Currency Count
^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the number of currencies issued by a given account.

*Request:*

* _requestType_ is _getAccountCurrencyCount_
* _account_ is the account ID
* _height_ is the blockchain height at which the response applies
(optional, default is the current height)

*Response:*

* _numberOfCurrencies_ (N) is the number of currencies issued
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

----------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountCurrencyCount&
    account=NXT-4VDY-LNVT-LMAY-FMCKA
----------------------------------------

*Response:*

------------------------------
{
    "numberOfCurrencies": 1,
    "requestProcessingTime": 1
}
------------------------------

_Verified 25-Dec-14_

Get Account Exchange Requests
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the exchange requests associated with a given account and currency
in reverse chronological order.

*Request:*

* _requestType_ is _getAccountExchangeRequests_
* _account_ is the account ID
* _currency_ is the currency ID
* _firstIndex_ is a zero-based index to the first request to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last request to retrieve
(optional)

*Response:*

* _exchangeRequests_ (A) is an array of requests with the following
fields for each request:
* _code_ (S) is a currency code
* _subtype_ (N) is _5_ for buy and _6_ for sell
* _decimals_ (N) is the number of decimal places
* _name_ (S) is the currency name
* _units_ (S) is the number of currency units to buy or sell (in QNT)
* _issuanceHeight_ (N) is the blockchain height of issuance for a
reservable currency, zero otherwise
* _type_ (N) is the currency type bitmask (refer to
link:/wiki/Nxt_API#Get_Currency[Get Currency])
* _transaction_ (S) is the transaction ID
* _timestamp_ (N) is the timestamp (in seconds since the genesis block)
of the request
* _rateNQT_ (S) is the exchange rate (in NQT per QNT)
* _issuerAccountRS_ (S) is the Reed-Solomon address of the issuer
account
* _issuerAccount_ (S) is the issuer account ID
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* Even expired, unfilled requests will be retrieved.

Example
+++++++

*Request:*

-------------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountExchangeRequests&
    account=NXT-4VDY-LNVT-LMAY-FMCKA&
    currency=6520756875632314476
-------------------------------------------

*Response:*

---------------------------------------------------------
{
    "exchangeRequests": [
        {
            "issuerAccountRS":"NXT-4VDY-LNVT-LMAY-FMCKA",
            "code": "MYSTX",
            "subtype": 6,
            "decimals": 2,
            "name": "MystcoinX",
            "units": "200",
            "issuanceHeight": 0,
            "type": 1,
            "transaction": "14840146504449624275",
            "timestamp": 34130695,
            "rateNQT": "1500000000",
            "issuerAccount":"15295723609781267838"
        }
    ],
    "requestProcessingTime": 1
}
---------------------------------------------------------

_Verified 24-Dec-14_

Get All Currencies
^^^^^^^^^^^^^^^^^^

Get all currencies in reverse creation order.

*Request:*

* _requestType_ is _getAllCurrencies_
* _firstIndex_ is a zero-based index to the first currency to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last currency to retrieve
(optional)
* _includeCounts_ is _false_ to omit _numberOf..._ fields (optional)

*Response:*

* _currencies_ (A) is an array of currency objects (refer to
link:/wiki/Nxt_API#Get_Currency[Get Currency] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------------
http://localhost:7876/nxt?
    requestType=getAllCurrencies&
    firstIndex=2&
    lastIndex=2
---------------------------------

*Response:*

----------------------------------------------------
{
    "requestProcessingTime": 3,
    "currencies": [
        {
            "initialSupply": "10000",
            "currentReservePerUnitNQT": "0",
            "types": [
                "EXCHANGEABLE"
            ],
            "code": "MYSTX",
            "creationHeight": 162067,
            "minDifficulty": 0,
            "numberOfTransfers": 0,
            "description": "Exchangable",
            "minReservePerUnitNQT": "0",
            "currentSupply": "10000",
            "issuanceHeight": 0,
            "type": 1,
            "reserveSupply": "0",
            "maxDifficulty": 0,
            "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "decimals": 2,
            "name": "MystcoinX",
            "numberOfExchanges": 12,
            "currency": "6520756875632314476",
            "maxSupply": "10000",
            "account": "15295723609781267838",
            "algorithm": 0
        }
    ]
}
----------------------------------------------------

_Verified 25-Dec-14_

Get All Exchanges
^^^^^^^^^^^^^^^^^

Get all currency exchanges in reverse chronological order.

*Request:*

* _requestType_ is _getAllExchanges_
* _timestamp_ is the earliest timestamp to retrieve (optional)
* _firstIndex_ is a zero-based index to the first exchange to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last exchange to retrieve
(optional)
* _includeCurrencyInfo_ is _false_ to omit some currency details
(optional)

*Response:*

* _exchanges_ (A) is an array of exchange objects (refer to
link:/wiki/Nxt_API#Get_Exchanges[Get Exchanges] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------------
http://localhost:7876/nxt?
    requestType=getAllExchanges&
    firstIndex=7&
    lastIndex=7
--------------------------------

*Response:*

---------------------------------------------------------
{
    "exchanges": [
        {
            "issuerAccountRS":"NXT-4VDY-LNVT-LMAY-FMCKA",
            "seller": "15295723609781267838",
            "code": "MYSTX",
            "sellerRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "units": "5000",
            "issuanceHeight": 0,
            "type": 1,
            "rateNQT": "10000000",
            "buyer": "11580081983047651163",
            "offer": "17204924627068821879",
            "buyerRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "decimals": 2,
            "name": "MystcoinX",
            "currency": "6520756875632314476",
            "block": "4816799421151726903",
            "transaction": "2086609620693258113",
            "timestamp": 34206117,
            "height": 163202,
            "issuerAccount":"15295723609781267838"
        }
    ],
    "requestProcessingTime": 1
}
---------------------------------------------------------

_Verified 25-Dec-14_

Get Buy / Sell Offers
^^^^^^^^^^^^^^^^^^^^^

Get currency buy or sell offers given a currency ID and/or an account ID
in chronological order.

*Request:*

* _requestType_ is _getBuyOffers_ or _getSellOffers_
* _currency_ is the currency ID (optional)
* _account_ is the account ID (optional if _currency_ provided)
* _availableOnly_ is _true_ to include only offers with non-zero supply
and limit, but is ignored when both _currency_ and _account_ are given
(optional)
* _firstIndex_ is a zero-based index to the first offer to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last offer to retrieve
(optional)

*Response:*

* _offers_ (A) is an array of buy or sell offer objects (refer to
link:/wiki/Nxt_API#Get_Offer[Get Offer] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------------
http://localhost:7876/nxt?
    requestType=getSellOffers&
    currency=6520756875632314476
--------------------------------

*Response:*

----------------------------------------------------
{
    "offers": [
        {
            "offer": "4813417617929273983",
            "expirationHeight": 163125,
            "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "limit": "1000",
            "currency": "6520756875632314476",
            "supply": "500",
            "account": "15295723609781267838",
            "height": 163110,
            "rateNQT": "20000000"
        }
    ],
    "requestProcessingTime": 1
}
----------------------------------------------------

_Verified 25-Dec-14_

Get Currencies
^^^^^^^^^^^^^^

Get currencies given multiple currency IDs.

*Request:*

* _requestType_ is _getCurrencies_
* _currencies_ is one of multiple currency IDs
* _currencies_ is one of multiple currency IDs

⋮

* _includeCounts_ is _false_ to omit _numberOf..._ fields (optional)

*Response:*

* _currencies_ (A) is an array of currency objects (refer to
link:/wiki/Nxt_API#Get_Currency[Get Currency] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

----------------------------------
http://localhost:7876/nxt?
    requestType=getCurrencies&
    currencies=6520756875632314476
----------------------------------

*Response:*

----------------------------------------------------
{
    "requestProcessingTime": 3,
    "currencies": [
        {
            "initialSupply": "10000",
            "currentReservePerUnitNQT": "0",
            "types": [
                "EXCHANGEABLE"
            ],
            "code": "MYSTX",
            "creationHeight": 162067,
            "minDifficulty": 0,
            "numberOfTransfers": 0,
            "description": "Exchangable",
            "minReservePerUnitNQT": "0",
            "currentSupply": "10000",
            "issuanceHeight": 0,
            "type": 1,
            "reserveSupply": "0",
            "maxDifficulty": 0,
            "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "decimals": 2,
            "name": "MystcoinX",
            "numberOfExchanges": 12,
            "currency": "6520756875632314476",
            "maxSupply": "10000",
            "account": "15295723609781267838",
            "algorithm": 0
        }
    ]
}
----------------------------------------------------

_Verified 25-Dec-14_

Get Currencies By Issuer
^^^^^^^^^^^^^^^^^^^^^^^^

Get currencies issued by multiple accounts in reverse creation order.

*Request:*

* _requestType_ is _getCurrenciesByIssuer_
* _account_ is one of multiple account IDs
* _account_ is one of multiple account IDs

⋮

* _firstIndex_ is a zero-based index to the first currency to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last currency to retrieve
(optional)
* _includeCounts_ is _false_ if _numberOf..._ fields are to be omitted
(optional)

*Response:*

* _currencies_ (A) is an array of arrays of currency objects, where the
outer array is indexed by the given account IDs (refer to
link:/wiki/Nxt_API#Get_Currency[Get Currency] for details about the
currency objects)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------------------
http://localhost:7876/nxt?
    requestType=getCurrenciesByIssuer&
    account=NXT-4VDY-LNVT-LMAY-FMCKA
--------------------------------------

*Response:*

--------------------------------------------------------
{
    "requestProcessingTime": 334,
    "currencies": [
        [
            {
                "initialSupply": "10000",
                "currentReservePerUnitNQT": "0",
                "types": [
                    "EXCHANGEABLE"
                ],
                "code": "MYSTX",
                "creationHeight": 162067,
                "minDifficulty": 0,
                "numberOfTransfers": 0,
                "description": "Exchangable",
                "minReservePerUnitNQT": "0",
                "currentSupply": "10000",
                "issuanceHeight": 0,
                "type": 1,
                "reserveSupply": "0",
                "maxDifficulty": 0,
                "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
                "decimals": 2,
                "name": "MystcoinX",
                "numberOfExchanges": 12,
                "currency": "6520756875632314476",
                "maxSupply": "10000",
                "account": "15295723609781267838",
                "algorithm": 0
            }
        ]
    ]
}
--------------------------------------------------------

_Verified 25-Dec-14_

Get Currency
^^^^^^^^^^^^

Get the details of a currency.

*Request:*

* _requestType_ is _getCurrency_
* _currency_ is the currency ID (optional)
* _code_ is the currency code (optional if _currency_ provided)
* _includeCounts_ is _false_ if _numberOf..._ fields are to be omitted
(optional)

*Response:*

* _initialSupply_ (S) is the initial currency supply (in QNT)
* _currentReservePerUnitNQT_ (S) is the minimum currency reserve (in NQT
per QNT)
* _types_ (A) is an array of currency types, one or more of
__EXCHANGEABLE__, __CONTROLLABLE__, __RESERVABLE__, __CLAIMABLE__,
__MINTABLE__, _NON_SHUFFLEABLE_
* _code_ (S) is the currency code
* _creationHeight_ (N) is the blockchain height of the currency creation
* _minDifficulty_ (N) is the minimum difficulty for a mintable currency
* _numberOfTransfers_ (N) is the number of currency transfers
* _description_ (S) is the currency description
* _minReservePerUnitNQT_ (S) is the minimum currency reserve (in NQT per
QNT) for a reservable currency
* _currentSupply_ (S) is the current currency supply (in QNT)
* _issuanceHeight_ (N) is the blockchain height of the currency issuance
for a reservable currency
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _type_ (N) is the currency type bitmask, from least to most
significant bit: exchangeable, controllable, reservable, claimable,
mintable, non-shuffleable
* _reserveSupply_ (S) is the reserve currency supply (in NQT) for a
reservable currency
* _maxDifficulty_ (N) is the maximum difficulty for a mintable currency
* _accountRS_ (S) is the Reed-Solomon address of the issuing account
* _decimals_ (N) is the number of decimal places used by the currency
* _name_ (S) is the name of the currency
* _numberOfExchanges_ (N) is the number of currency exchanges
* _currency_ (S) is the currency ID
* _maxSupply_ (S) is the maximum currency supply (in QNT)
* _account_ (S) is the account ID of the currency issuer
* _algorithm_ (N) is the algorithm number for a mintable currency: 2 for
SHA256, 3 for SHA3, 5 for Scrypt, 25 for Keccak25

Example
+++++++

*Request:*

----------------------------
http://localhost:7876/nxt?
    requestType=getCurrency&
    code=MYSTX
----------------------------

*Response:*

--------------------------------------------
{
    "initialSupply": "10000",
    "currentReservePerUnitNQT": "0",
    "types": [
        "EXCHANGEABLE"
    ],
    "code": "MYSTX",
    "creationHeight": 162067,
    "minDifficulty": 0,
    "numberOfTransfers": 0,
    "description": "Exchangable",
    "minReservePerUnitNQT": "0",
    "currentSupply": "10000",
    "issuanceHeight": 0,
    "requestProcessingTime": 0,
    "type": 1,
    "reserveSupply": "0",
    "maxDifficulty": 0,
    "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
    "decimals": 2,
    "name": "MystcoinX",
    "numberOfExchanges": 0,
    "currency": "6520756875632314476",
    "maxSupply": "10000",
    "account": "15295723609781267838",
    "algorithm": 0
}
--------------------------------------------

_Verified 23-Dec-14_

Get Currency Account Count
^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the number of accounts that hold a given currency.

*Request:*

* _requestType_ is _getCurrencyAccountCount_
* _currency_ is the currency ID
* _height_ is the blockchain height at which the response applies
(optional, default is the current height)

*Response:*

* _numberOfAccounts_ (N) is the number of accounts that hold the
currency
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

----------------------------------------
http://localhost:7876/nxt?
    requestType=getCurrencyAccountCount&
    currency=6520756875632314476
----------------------------------------

*Response:*

------------------------------
{
    "numberOfAccounts": 2,
    "requestProcessingTime": 1
}
------------------------------

_Verified 25-Dec-14_

Get Currency Accounts
^^^^^^^^^^^^^^^^^^^^^

Get the accounts that hold a given currency in reverse units order.

*Request:*

* _requestType_ is _getCurrencyAccounts_
* _currency_ is the currency ID
* _height_ is the blockchain height at which the response applies
(optional, default is current height)
* _firstIndex_ is a zero-based index to the first account to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last account to retrieve
(optional)

*Response:*

* _accountCurrencies_ (A) is an array of account objects with the
following fields:
* _unconfirmedUnits_ (S) is the amount of unconfirmed currency units (in
QNT)
* _accountRS_ (S) is the Reed-Solomon address of the account
* _currency_ (S) is the currency ID
* _units_ (S) is the amount of currency (in QNT)
* _account_ (S) is the account number
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getCurrencyAccounts&
    currency=6520756875632314476
------------------------------------

*Response:*

----------------------------------------------------
{
    "accountCurrencies": [
        {
            "unconfirmedUnits": "9000",
            "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "currency": "6520756875632314476",
            "units": "9000",
            "account": "15295723609781267838"
        },
        {
            "unconfirmedUnits": "1000",
            "accountRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "currency": "6520756875632314476",
            "units": "1000",
            "account": "11580081983047651163"
        }
    ],
    "requestProcessingTime": 1
}
----------------------------------------------------

_Verified 25-Dec-14_

Get Currency Founders
^^^^^^^^^^^^^^^^^^^^^

Get a reservable currency's founders.

*Request:*

* _requestType_ is _getCurrencyFounders_
* _currency_ is the currency ID

*Response:*

* _founders_ (A) is an array of founder objects each of which has the
following fields:
* _accountRS_ (S) is the Reed-Solomon address of the founding account
* _amountPerUnitNQT_ (S) is the amount (in NQT per QNT of
__reserveSupply__) reserved by the founder
* _currency_ (S) is the currency ID
* _account_ (S) is the founding account number
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getCurrencyFounders&
    currency=16165836410580103964
------------------------------------

*Response:*

----------------------------------------------------
{
    "founders": [
        {
            "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "amountPerUnitNQT": "100000000",
            "currency": "16165836410580103964",
            "account": "15295723609781267838"
        }
    ],
    "requestProcessingTime": 1
}
----------------------------------------------------

_Verified 27-Dec-14_

Get Currency IDs
^^^^^^^^^^^^^^^^

Get all currency IDs in reverse chronological creation order.

*Request:*

* _requestType_ is _getCurrencyIds_
* _firstIndex_ is a zero-based index to the first currency to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last currency to retrieve
(optional)

*Response:*

* __currencyIds__(A) is an array of currency IDs
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=getCurrencyIds&
    lastIndex=2
-------------------------------

*Response:*

------------------------------
{
    "currencyIds": [
        "3543596621551215845",
        "6520756875632314476",
        "10304209318415949524"
    ],
    "requestProcessingTime": 2
}
------------------------------

_Verified 25-Dec-14_

Get Currency Transfers
^^^^^^^^^^^^^^^^^^^^^^

Get currency transfers given a currency ID and/or an account ID.

*Request:*

* _requestType_ is _getCurrencyTransfers_
* _currency_ is the currency ID (optional)
* _account_ is the account ID (optional if _currency_ provided)
* _firstIndex_ is a zero-based index to the first transfer to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last transfer to retrieve
(optional)
* _includeCurrencyInfo_ is _false_ to omit some currency fields
(optional)

*Response:*

* _transfers_ (A) is an array of transfer objects
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getCurrencyTransfers&
    currency=9387514940677621191
-------------------------------------

*Response:*

* _code_ (S) is the currency code
* _units_ (S) is the amount (in QNT) of the transfer
* _issuanceHeight_ (N) is the blockchain height of the currency issuance
for a reservable currency
* _type_ (N) is the currency type bitmask (refer to
link:/wiki/Nxt_API#Get_Currency[Get Currency] for details)
* _issuerAccountRS_ (S) is the Reed-Solomon address of the issuer
account
* _transfer_ (S) is the transfer ID
* _senderRS_ (S) is the Reed-Solomon address of the sender account
* _sender_ (S) is the account number of the sender account
* _recipientRS_ (S) is the Reed-Solomon address of the recipient account
* _decimals_ (N) is the number of decimal places used by the currency
* _recipient_ (S) is the account number of the recipient account
* _name_ (S) is the currency name
* _currency_ (S) is the currency ID
* _issuerAccount_ (S) is the issuer account ID
* _height_ (N) is the blockchain height of the transfer
* _timestamp_ (N) is the timestamp (in seconds since the genesis block)
of the transfer
* _issuerAccountRS_ (S) is the Reed-Solomon address of the issuer
account
* _issuerAccount_ (S) is the issuer account ID

----------------------------------------------------------
{
    "transfers": [
        {
            "issuerAccountRS":"NXT-4VDY-LNVT-LMAY-FMCKA",
            "code": "MYSTX",
            "units": "10",
            "issuanceHeight": 0,
            "type": 1,
            "issuerAccountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "transfer": "12208608533071682262",
            "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "sender": "15295723609781267838",
            "recipientRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "decimals": 2,
            "recipient": "11580081983047651163",
            "name": "MystcoinX",
            "currency": "9387514940677621191",
            "issuerAccount": "15295723609781267838",
            "height": 159732,
            "timestamp": 34280949,
            "issuerAccount":"15295723609781267838"
        }
    ],
    "requestProcessingTime": 0
}
----------------------------------------------------------

_Verified 23-Dec-14_

Get Exchanges
^^^^^^^^^^^^^

Get currency exchanges given a currency and/or an account in reverse
chronological order.

*Request:*

* _requestType_ is _getExchanges_
* _currency_ is a currency ID (optional)
* _account_ is an account ID (optional if _currency_ provided)
* _firstIndex_ is a zero-based index to the first currency exchange to
retrieve (optional)
* _lastIndex_ is a zero-based index to the last currency exchange to
retrieve (optional)
* _includeCurrencyInfo_ is _false_ to omit several currency-related
fields

*Response:*

* _exchanges_ (A) is an array of exchange objects with the following
fields for each exchange:
* _seller_ (S) is the seller account number
* _code_ (S) is the currency code
* _sellerRS_ (S) is the Reed-Solomon address of the seller account
* _units_ (S) is the amount of currency exchanged (in QNT)
* _issuanceHeight_ (N) is the blockchain height of currency issuance for
a reservable currency
* _type_ (N) is the currency type bitmask (refer to
link:/wiki/Nxt_API#Get_Currency[Get Currency] for details)
* _rateNQT_ (S) is the currency exchange rate (in NQT per QNT)
* _buyer_ (S) is the account number of the buyer
* _offer_ (S) is the offer ID
* _buyerRS_ (S) is the Reed-Solomon address of the buyer account
* _decimals_ (N) is the number of decimal places used by the currency
* _name_ (S) is the currency name
* _currency_ (S) is the currency ID
* _block_ (S) is the block ID of the block containing the exchange
transaction
* _transaction_ (S) is the transaction ID of the exchange
* _timestamp_ (N) is the timestamp (in seconds since the genesis block)
of the exchange
* _height_ is the blockchain height of the block containing the exchange
transaction
* _issuerAccountRS_ (S) is the Reed-Solomon address of the issuer
account
* _issuerAccount_ (S) is the issuer account ID
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------------
http://localhost:7876/nxt?
    requestType=getExchanges&
    currency=6520756875632314476
--------------------------------

*Response:*

---------------------------------------------------------
{
    "exchanges": [
        {
            "issuerAccountRS":"NXT-4VDY-LNVT-LMAY-FMCKA",
            "seller": "15295723609781267838",
            "code": "MYSTX",
            "sellerRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "units": "1",
            "issuanceHeight": 0,
            "type": 1,
            "rateNQT": "1500000000",
            "buyer": "11580081983047651163",
            "offer": "7762792906174207279",
            "buyerRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "decimals": 2,
            "name": "MystcoinX",
            "currency": "6520756875632314476",
            "block": "2329341955641682831",
            "transaction": "12589829502215822061",
            "timestamp": 34137058,
            "height": 162356,
            "issuerAccount":"15295723609781267838"
        }
    ],
    "requestProcessingTime": 0
}
---------------------------------------------------------

_Verified 23-Dec-14_

Get Exchanges By Exchange Request
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get currency exchanges given an exchange request transaction ID in
reverse chronological order.

*Request:*

* _requestType_ is _getExchangesByExchangeRequest_
* _transaction_ is the transaction ID of the exchange request
* _includeCurrencyInfo_ is _false_ to omit several currency-related
fields

*Response:*

* _exchanges_ (A) is an array of exchange objects (refer to
link:/wiki/Nxt_API#Get_Exchanges[Get Exchanges] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

----------------------------------------------
http://localhost:7876/nxt?
    requestType=getExchangesByExchangeRequest&
    transaction=12589829502215822061
----------------------------------------------

*Response:*

---------------------------------------------------------
{
    "exchanges": [
        {
            "issuerAccountRS":"NXT-4VDY-LNVT-LMAY-FMCKA",
            "seller": "15295723609781267838",
            "code": "MYSTX",
            "sellerRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "units": "1",
            "issuanceHeight": 0,
            "type": 1,
            "rateNQT": "1500000000",
            "buyer": "11580081983047651163",
            "offer": "7762792906174207279",
            "buyerRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "decimals": 2,
            "name": "MystcoinX",
            "currency": "6520756875632314476",
            "block": "2329341955641682831",
            "transaction": "12589829502215822061",
            "timestamp": 34137058,
            "height": 162356,
            "issuerAccount":"15295723609781267838"
        }
    ],
    "requestProcessingTime": 1
}
---------------------------------------------------------

_Verified 24-Dec-14_

Get Exchanges By Offer
^^^^^^^^^^^^^^^^^^^^^^

Get currency exchanges given a currency offer ID in reverse
chronological order.

*Request:*

* _requestType_ is _getExchangesByOffer_
* _offer_ (S) is a currency offer ID
* _includeCurrencyInfo_ is _false_ to omit several currency-related
fields (optional)
* _firstIndex_ is a zero-based index to the first currency exchange to
retrieve (optional)
* _lastIndex_ is a zero-based index to the last currency exchange to
retrieve (optional)

*Response:*

* _exchanges_ (A) is an array of exchange objects (refer to
link:/wiki/Nxt_API#Get_Exchanges[Get Exchanges] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getExchangesByOffer&
    offer=7762792906174207279
------------------------------------

*Response:*

---------------------------------------------------------
{
    "exchanges": [
        {
            "issuerAccountRS":"NXT-4VDY-LNVT-LMAY-FMCKA",
            "seller": "15295723609781267838",
            "code": "MYSTX",
            "sellerRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "units": "1",
            "issuanceHeight": 0,
            "type": 1,
            "rateNQT": "1500000000",
            "buyer": "11580081983047651163",
            "offer": "7762792906174207279",
            "buyerRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "decimals": 2,
            "name": "MystcoinX",
            "currency": "6520756875632314476",
            "block": "2329341955641682831",
            "transaction": "12589829502215822061",
            "timestamp": 34137058,
            "height": 162356,
            "issuerAccount":"15295723609781267838"
        }
    ],
    "requestProcessingTime": 1
}
---------------------------------------------------------

_Verified 24-Dec-14_

Get Minting Target
^^^^^^^^^^^^^^^^^^

Get the current minting target of a mintable currency.

*Request:*

* _requestType_ is _getMintingTarget_
* _currency_ is the mintable currency ID
* _account_ is the minting account ID
* _units_ is the amount (in QNT) of currency to mint

*Note:* _units_ cannot be greater than 1/10000 of the _maxSupply_ (refer
to link:/wiki/Nxt_API#Issue_Currency[Issue Currency]). Increasing
_units_ decreases __targetBytes__.

*Response:*

* _difficulty_ (S) is the current difficulty, an estimate of the number
of hashes needed to meet the target
* _targetBytes_ (S) is the 32-byte target (little endian), which must
equal or exceed the computed hash of the _nonce_
* _currency_ (S) is the currency ID
* _counter_ (N) is the counter associated with the minting account, the
value previously submitted to link:/wiki/Nxt_API#Currency_Mint[Currency
Mint]
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* If a _nonce_ is found such that its hash is less than the
target, it can be submitted to the blockchain along with _counter_ + 1
using link:/wiki/Nxt_API#Currency_Mint[Currency Mint], which results in
_units_ NQT being credited to the minting account. _difficulty_ is
inversely related to the target, and so increases exponentially as
_maxSupply_ is approached because the target is defined as
(2^exp^-1)/__units__, where exp decreases linearly from
256-__minDifficulty__ to 256-__maxDifficulty__. (Refer to
link:/wiki/Nxt_API#Issue_Currency[Issue Currency] for __maxSupply__,
_minDifficulty_ and __maxDifficulty__.)

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getMintingTarget&
    currency=9207767346829573996&
    account=NXT-4VDY-LNVT-LMAY-FMCKA&
    units=1
-------------------------------------

*Response:*

--------------------------------------------------------------------------------------
{
    "difficulty": "1024",
    "targetBytes": "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3f00",
    "currency": "9207767346829573996",
    "counter": 0,
    "requestProcessingTime": 1
}
--------------------------------------------------------------------------------------

_Verified 27-Dec-14_

Get Offer
^^^^^^^^^

Get offer details given an offer ID.

*Request:*

* _requestType_ is _getOffer_
* _offer_ is the offer ID

*Response:*

* _sellOffer_ and _buyOffer_ (O) are objects with the following fields:
* _offer_ (S) is the offer ID
* _expirationHeight_ (N) is the blockchain height of offer expiration
* _accountRS_ (S) is the Reed-Solomon address of the offering account
* _limit_ (S) is the cumulative limit of currency buys or sells
* _currency_ (S) is the currency ID
* _supply_ (S) is the current currency supply
* _account_ (S) is the offering account number
* _height_ (N) is the blockchain height of offer creation
* _rateNQT_ (S) is the currency exchange rate (in NQT per QNT)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-----------------------------
http://localhost:7876/nxt?
    requestType=getOffer&
    offer=4813417617929273983
-----------------------------

*Response:*

------------------------------------------------
{
    "sellOffer": {
        "offer": "4813417617929273983",
        "expirationHeight": 163125,
        "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "limit": "1000",
        "currency": "6520756875632314476",
        "supply": "500",
        "account": "15295723609781267838",
        "height": 163110,
        "rateNQT": "20000000"
    },
    "buyOffer": {
        "offer": "4813417617929273983",
        "expirationHeight": 163125,
        "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "limit": "1000",
        "currency": "6520756875632314476",
        "supply": "500",
        "account": "15295723609781267838",
        "height": 163110,
        "rateNQT": "10000000"
    },
    "requestProcessingTime": 0
}
------------------------------------------------

_Verified 25-Dec-14_

Issue Currency
^^^^^^^^^^^^^^

Issue a new currency or re-issue an existing currency with different
properties. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _issueCurrency_
* _name_ is the currency name, 3 to 10 characters and longer than the
currency code
* _code_ is the uppercase currency code with the following fee
structure: three letters 25000 NXT, four letters 1000 NXT, five letters
40 NXT, re-issue 40 NXT
* _description_ is the currency description
* _type_ is the currency type bitmask, from least to most significant
bit: exchangeable, controllable, reservable, claimable, mintable,
non-shuffleable
* _initialSupply_ is the initial currency supply (in QNT) (must match
_maxSupply_ unless mintable or claimable, must be zero for claimable)
* _reserveSupply_ is the reserve currency supply (in QNT) (must match
__maxSupply__)
* _maxSupply_ is the maximum currency supply (in QNT)
* _issuanceHeight_ is the blockchain height at which a reservable
currency is issued if the reserve minimum is met
* _minReservePerUnitNQT_ is the minimum currency reserve (in NQT per QNT
of __reserveSupply__) for issuance of a reservable currency
* _minDifficulty_ is the minimum difficulty (minimum __1__) for a
mintable currency
* _maxDifficulty_ is the maximum difficulty (maximum _255_ and greater
than __minDifficulty__) for a mintable currency
* _ruleset_ is for future use, always set to zero
* _algorithm_ is an algorithm code for a mintable currency: _2_ for
SHA256, _3_ for SHA3, _5_ for Scrypt, _25_ for Keccak25
* _decimals_ is the number of decimal places used by the currency
(optional, default zero)

*Notes:* Reservable requires exchangeable and/or claimable, as does
controllable; but mintable requires exchangeable. Claimable requires
reservable, non-mintable and zero __initialSupply__.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response]. The transaction ID is also the currency ID.

Example
+++++++

*Request:*

------------------------------
http://localhost:7876/nxt?
    requestType=issueCurrency&
    name=MystcoinX&
    code=MYSTX&
    description=Exchangeable
    type=1&
    initialSupply=10000&
    maxSupply=10000&
    decimals=2&
    secretPhrase=SECRETPHRASE&
    feeNQT=4000000000&
    deadline=60
    
------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "c5ec66dd60bcc13fc0fe2cb617b4d7a05e7ef6360aacc591c911969785361491",
    "unsignedTransactionBytes": "05100f8308023c0010f09c34f225d425306e5be55a49469081...",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "da27e4bead869d0e96fb9370f0afcd0c49eb17b7da503705384239d9abaec209733...",
        "feeNQT": "4000000000",
        "type": 5,
        "fullHash": "6c08c076d4617e5a4be6f027c9b3e47ddb0e92fab87032d631546051dbdbfe8c",
        "version": 1,
        "ecBlockId": "2004481009157728964",
        "signatureHash": "c5ec66dd60bcc13fc0fe2cb617b4d7a05e7ef6360aacc591c911969785361491",
        "attachment": {
            "initialSupply": "10000",
            "code": "MYSTX",
            "minDifficulty": 0,
            "ruleset": 0,
            "description": "Exchangable",
            "minReservePerUnitNQT": "0",
            "issuanceHeight": 0,
            "type": 1,
            "reserveSupply": "0",
            "version.CurrencyIssuance": 1,
            "maxDifficulty": 0,
            "decimals": 2,
            "name": "MystcoinX",
            "maxSupply": "10000",
            "algorithm": 0
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 0,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "ecBlockHeight": 162060,
        "deadline": 60,
        "transaction": "6520756875632314476",
        "timestamp": 34112271,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 53,
    "transactionBytes": "05100f8308023c0010f09c34f225d425306e5be55a49469081560...",
    "fullHash": "6c08c076d4617e5a4be6f027c9b3e47ddb0e92fab87032d631546051dbdbfe8c",
    "transaction": "6520756875632314476"
}
----------------------------------------------------------------------------------------------

_Verified 24-Dec-14_

Publish Exchange Offer
^^^^^^^^^^^^^^^^^^^^^^

Publish an exchange offer for an exchangeable currency. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _publishExchangeOffer_
* _currency_ is the currency ID
* _buyRateNQT_ is the offered buy rate (in NQT per QNT)
* _sellRateNQT_ is the offered sell rate (in NQT per QNT)
* _totalBuyLimit_ is the cumulative limit (in QNT) of currency buys
* _totalSellLimit_ is the cumulative limit (in QNT) of currency sells
* _initialBuySupply_ is the initial amount (in QNT) of currency offered
to buy, cannot exceed _totalBuyLimit_
* _initialSellSupply_ is the initial amount (in QNT) of currency offered
to sell, cannot exceed _totalSellLimit_
* _expirationHeight_ is the blockchain height for expiration of the
offer

*Notes:* Each time currency is bought in response to an exchange request
to sell currency (refer to
link:/wiki/Nxt_API#Currency_Buy_.2F_Sell[Currency Sell]),
_totalBuyLimit_ is reduced and the supply of currency offered to sell
increases by the amount bought. When _totalBuyLimit_ becomes zero, the
buy offer is withdrawn. These same notes apply if _buy_ and _sell_ are
interchanged. Only the most recent offer associated with an account is
valid, even if an earlier offer by that account has not yet expired or
reached its limits.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response]. The transaction ID is also the offer ID.

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=publishExchangeOffer&
    currency=6520756875632314476&
    buyRateNQT=10000000&
    sellRateNQT=20000000&   
    totalBuyLimit=1000&
    totalSellLimit=1000&
    initialBuySupply=500&
    initialSellSupply=500&
    expirationHeight=163080&
    secretPhrase=SECRETPHRASE&
    feeNQT=100000000&
    deadline=60
-------------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "6fd60fcbc6e7022f12adad82a76c0534d2f79a569b9857b02328bf7573cf93f8",
    "unsignedTransactionBytes": "0514d7c409023c0010f09c34f225d425306e5be55a49469081...",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "b204a7d9622ac6b99936447a4314fac1c2f0c67e45f4021f4b1949755c081802a34...",
        "feeNQT": "100000000",
        "type": 5,
        "fullHash": "fccb2c6200a04bbce82b9e623051b8d8ed9d519dbb0a12ec5a354c842da9a664",
        "version": 1,
        "ecBlockId": "6813726597245349906",
        "signatureHash": "6fd60fcbc6e7022f12adad82a76c0534d2f79a569b9857b02328bf7573cf93f8",
        "attachment": {
            "totalSellLimit": "1000",
            "buyRateNQT": "10000000",
            "initialSellSupply": "500",
            "totalBuyLimit": "1000",
            "expirationHeight": 163080,
            "sellRateNQT": "20000000",
            "version.PublishExchangeOffer": 1,
            "currency": "6520756875632314476",
            "initialBuySupply": "500"
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 4,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "ecBlockHeight": 163049,
        "deadline": 60,
        "transaction": "13568114225891298300",
        "timestamp": 34194647,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 54,
    "transactionBytes": "0514d7c409023c0010f09c34f225d425306e5be55a4946908156072...",
    "transaction": "13568114225891298300"
}
----------------------------------------------------------------------------------------------

_Verified 25-Dec-14_

Search Currencies
^^^^^^^^^^^^^^^^^

Get currencies having a code that matches a given query in reverse
relevance order.

*Request:*

* _requestType_ is _searchCurrencies_
* _query_ is a full text query on the currency field _code_ in the
http://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Overview[standard
Lucene syntax]
* _firstIndex_ is a zero-based index to the first currency to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last currency to retrieve
(optional)
* _includeCounts_ is _false_ if the fields beginning with _numberOf..._
are to be omitted (optional)

*Response:*

* _currencies_ (A) is an array of currency objects (refer to
link:/wiki/Nxt_API#Get_Currency[Get Currency] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

---------------------------------
http://localhost:7876/nxt?
    requestType=searchCurrencies&
    query=MYST?
---------------------------------

*Response:*

----------------------------------------------------
{
    "requestProcessingTime": 5,
    "currencies": [
        {
            "initialSupply": "10000",
            "currentReservePerUnitNQT": "0",
            "types": [
                "EXCHANGEABLE"
            ],
            "code": "MYSTX",
            "creationHeight": 159726,
            "minDifficulty": 0,
            "numberOfTransfers": 3,
            "description": "Exchangeable",
            "minReservePerUnitNQT": "0",
            "currentSupply": "10000",
            "issuanceHeight": 0,
            "type": 1,
            "reserveSupply": "0",
            "maxDifficulty": 0,
            "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "decimals": 2,
            "name": "MystcoinX",
            "numberOfExchanges": 0,
            "currency": "9387514940677621191",
            "maxSupply": "10000",
            "account": "15295723609781267838",
            "algorithm": 0
        }
    ]
}
----------------------------------------------------

_Verified 26-Dec-14_

Transfer Currency
^^^^^^^^^^^^^^^^^

Transfer currency to a given recipient. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _transferCurrency_
* _recipient_ is the account ID of the transfer recipient
* _currency_ is the currency ID
* _units_ is the amount (in QNT) of the transfer

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=transferCurrency&
    recipient=NXT-BMUV-8QQR-47VK-CR7F3&
    currency=9387514940677621191&
    units=10
---------------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "eda8f238d164074170ddb8163d7d71f08062f1f1a51712f05670a670e64e5eff",
    "unsignedTransactionBytes": "0513ad150b023c0010f09c34f225d425306e5be55a49469081...",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "7629cba6e776685c9e134f8d96c54a5bcad6915c433f833b1ca792c69e75ee0ac6f...",
        "feeNQT": "100000000",
        "type": 5,
        "fullHash": "d65a8adfc6b06da98ce50bb36d52305a8c9300b8defbeed9f2582628d9e258f0",
        "version": 1,
        "ecBlockId": "13770841487927223834",
        "signatureHash": "eda8f238d164074170ddb8163d7d71f08062f1f1a51712f05670a670e64e5eff",
        "attachment": {
            "currency": "9387514940677621191",
            "version.CurrencyTransfer": 1,
            "units": "10"
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 3,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "recipientRS": "NXT-BMUV-8QQR-47VK-CR7F3",
        "recipient": "11580081983047651163",
        "ecBlockHeight": 159721,
        "deadline": 60,
        "transaction": "12208608533071682262",
        "timestamp": 34280877,
        "height": 2147483647
    },
    "broadcasted": true,
    "requestProcessingTime": 8,
    "transactionBytes": "0513ad150b023c0010f09c34f225d425306e5be55a49469081560...",
    "fullHash": "d65a8adfc6b06da98ce50bb36d52305a8c9300b8defbeed9f2582628d9e258f0",
    "transaction": "12208608533071682262"
}
----------------------------------------------------------------------------------------------

_Verified 26-Dec-14_

Networking Operations
~~~~~~~~~~~~~~~~~~~~~

Add Peer
^^^^^^^^

Add a peer to the list of known peers and attempt to connect to it.

*Request:*

* _requestType_ is _addPeer_
* _peer_ is the IP address or domain name of the peer (plus optional
port)

*Response:* refer to link:/wiki/Nxt_API#Get_Peer[Get Peer]

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=addPeer&
    peer=nxt9.webice.ru
--------------------------

*Response:*

--------------------------------------------------------------------------------------------
{
    "hallmark": "4a8fd0f2af5f511e041ad7bee1625ae3a711ddcc056c60cf7ab3523e2c99092f0e006e...",
    "downloadedVolume": 155414,
    "address": "23.95.51.154",
    "weight": 19829,
    "uploadedVolume": 63532,
    "requestProcessingTime": 478,
    "version": "1.4.8",
    "platform": "webice.ru",
    "lastUpdated": 37014605,
    "blacklisted": false,
    "announcedAddress": "nxt9.webice.ru",
    "application": "NRS",
    "state": 1,
    "shareAddress": true
}
--------------------------------------------------------------------------------------------

_Verified 26-Jan-15_

Blacklist Peer
^^^^^^^^^^^^^^

Blacklist a peer for the default blacklisting period. Password protected
like the link:/wiki/Nxt_API#Debug_Operations[Debug Operations].

*Request:*

* _requestType_ is _blacklistPeer_
* _peer_ is the IP address or domain name of the peer (plus optional
port)

*Response:*

* _done_ (B) is _true_ if the peer is blacklisted
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------------
http://localhost:7876/nxt?
    requestType=blacklistedPeer&
    peer=nxt9.webice.ru
--------------------------------

*Response:*

-------------------------------
{
    "requestProcessingTime": 0,
    "done": true
}
-------------------------------

_Verified 26-Jan-15_

Get My Info
^^^^^^^^^^^

Get hostname and address of the requesting node.

*Request:*

* _requestType_ is _getMyInfo_

*Response:*

* _host_ (S) is the node hostname
* _address_ (S) is the node address
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=getMyInfo
--------------------------

*Response:*

------------------------------
{
    "address": "127.0.0.1",
    "host": "127.0.0.1",
    "requestProcessingTime": 1
}
------------------------------

_Verified 20-Nov-14_

Get Peer
^^^^^^^^

Get information about a given peer.

*Request:*

* _requestType_ is _getPeer_
* _peer_ is the IP address or domain name of the peer (plus optional
port)

*Response:*

* _hallmark_ (S) is the hex string of the peer's hallmark, if it is
defined
* _downloadedVolume_ (N) is the number of bytes downloaded by the peer
* _address_ (S) the IP address or DNS name of the peer
* _weight_ (N) is the peer's weight value
* _uploadedVolume_ (N) is the number of bytes uploaded by the peer
* _version_ (S) is the version of the software running on the peer
* _platform_ (S) is a string representing the peer's platform
* _lastUpdated_ (N) is the timestamp (in seconds since the genesis
block) of the last peer status update
* _blacklisted_ (B) is _true_ if the peer is blacklisted
* _blacklistingCause_ (S) is the cause of blacklising (if _blacklisted_
is __true__)
* _announcedAddress_ (S) is the name that the peer announced to the
network (could be a DNS name, IP address, or any other string)
* _application_ (S) is the name of the software application, typically
_NRS_
* _state_ (N) defines the state of the peer: 0 for NON_CONNECTED, 1 for
CONNECTED, or 2 for DISCONNECTED
* _shareAddress_ (B) is _true_ if the address is allowed to be shared
with other peers
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=getPeer&
    peer=75.128.106.176
--------------------------

*Response:*

-------------------------------------------------------------------------------
{
    "hallmark": "1babaff947607837e6591e8f216d449c4e6e9786496a9d26ac0ca9cae...",
    "downloadedVolume": 1244,
    "address": "54.69.65.249",
    "weight": 235,
    "uploadedVolume": 217380,
    "requestProcessingTime": 1,
    "version": "1.3.3",
    "platform": "phalanx",
    "lastUpdated": 31181426,
    "blacklisted": false,
    "announcedAddress": "phalanx149.ddns.net",
    "application": "NRS",
    "state": 1,
    "shareAddress": true
}
-------------------------------------------------------------------------------

_Verified 5/11/14_

Get Peers
^^^^^^^^^

Get a list of peer IP addresses.

*Request:*

* _requestType_ is _getPeers_
* _active_ is _true_ for active (not NON_CONNECTED) peers only
(optional, if _true_ overrides __state__)
* _state_ is the state of the peers, one of __NON_CONNECTED__,
__CONNECTED__, or _DISCONNECTED_ (optional)
* _getPeers_ is _true_ to include peer detail as in
link:/wiki/Nxt_API#Get_Peer[Get Peer]

*Note:* If neither _active_ nor _state_ is specified, all known peers
are retrieved.

*Response:*

* _peers_ (A) is an array of peer addresses
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=getPeers&
    state=DISCONNECTED
--------------------------

*Response:*

------------------------------
{
    "peers": [
        "198.50.146.93",
        "213.46.57.77"
    ],
    "requestProcessingTime": 1
}
------------------------------

_Verified 15-Dec-14_

Phasing Operations
~~~~~~~~~~~~~~~~~~

Phasing is released for testing with version 1.5.0e and is currently
only available on the link:/wiki/Testnet[Testnet].

Approve Transaction
^^^^^^^^^^^^^^^^^^^

Approve (vote for) a phased transaction. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _approveTransaction_
* _transactionFullHash_ is the full hash of the transaction to be
approved (may be used up to 10 times per API request)
* _revealedSecretText_ is the secret phrase text (required only for
_phasingVotingModel = 5_ (refer to
link:/wiki/Nxt_API#Create_Phasing_Poll[Create Phasing Poll]), optional
if _revealedSecret_ provided)
* _revealedSecret_ is the UTF-8 hexadecimal encoding of
_revealedSecretText_ (optional)

*Note:* This transaction will be accepted in the blockchain only if all
phased transactions it is voting for are already in it.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

-----------------------------------------------------------------------------------------
http://localhost:7876/nxt?
    requestType=approveTransaction&
    transactionFullHash=5016cc59b0665675f00513e8c647288e0a668a78c4964c84d0de8f768b89060a&
    revealedSecretText=secret&
    secretPhrase=secretPhrase&
    feeNQT=100000000&
    deadline=60
-----------------------------------------------------------------------------------------

*Response:*

-------------------------------------------------------------------------------------------------
{
    "signatureHash": "db429ccecd7d13b54b43cf9db7656cef6df6152c60e626b393000ed00a652c95",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "380e1a94e40d58e9382aa742ca998373e27c5d30890d91a74d83bfead849e507e93c51...",
        "feeNQT": "100000000",
        "type": 1,
        "fullHash": "2bb80af156e70067f509df9ad5a88b687040cff4a8c778c69aef77863d3d15ef",
        "version": 1,
        "phased": false,
        "ecBlockId": "704052112466096836",
        "signatureHash": "db429ccecd7d13b54b43cf9db7656cef6df6152c60e626b393000ed00a652c95",
        "attachment": {
            "transactionFullHashes": [
                "5016cc59b0665675f00513e8c647288e0a668a78c4964c84d0de8f768b89060a"
            ],
            "version.PhasingVoteCasting": 1,
            "revealedSecret": "736563726574"
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 9,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "ecBlockHeight": 262493,
        "deadline": 60,
        "transaction": "7422186546503792683",
        "timestamp": 43965004,
        "height": 2147483647
    },
    "unsignedTransactionBytes": "01194cda9e023c0010f09c34f225d425306e5be55a494690...",
    "broadcasted": true,
    "requestProcessingTime": 20,
    "transactionBytes": "01194cda9e023c0010f09c34f225d425306e5be55a4946908156072a...",
    "fullHash": "2bb80af156e70067f509df9ad5a88b687040cff4a8c778c69aef77863d3d15ef",
    "transaction": "7422186546503792683"
}
-------------------------------------------------------------------------------------------------

_Verified 17-Apr-15_

Create Phasing Poll
^^^^^^^^^^^^^^^^^^^

Create a phased transaction with conditional deferred execution based on
the result of a phasing poll, on a list of linked transactions or on the
revelation of a secret; or simply with unconditional deferred execution.
POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is any type from the
link:/wiki/Nxt_API#Create_Transaction[Create Transaction] list which is
phasing-safe, indicated with italics such as __Send NXT__, the
requestType of which is _sendMoney_
* _phased_ is _true_ to create a phased transaction (optional but
required for all of the following parameters, which are all optional for
unphased transactions)
* _phasingFinishHeight_ is the block height at which the poll will
finish; the transaction will be executed at this block height only if
all conditions (if any) have been met, otherwise the transaction will
never be executed
* _phasingVotingModel_ is _-1_ for unconditional transaction execution
(no phasing poll), _0_ for __One Vote Per Account__, _1_ for __Vote By
NXT Balance__, _2_ for __Vote By Asset Balance__, _3_ for __Vote By
Currency Balance__, _4_ is for _One Vote Per Linked Transaction_ and _5_
is _Vote by Secret_
* _phasingQuorum_ is the number of votes needed for transaction
approval: _0_ for voting model __-1__, the number of accounts for model
__0__, total NQT for model __1__, total QNT for models _2_ and __3__,
the number of transactions for model _4_ and _1_ for model _5_ (required
if _phasingVotingModel_ >= __0__, default __0__)
* _phasingMinBalance_ is the minimum balance (in NQT or QNT) required
for voting (optional, default __0__)
* _phasingMinBalanceModel_ is _1_ for NXT balance, _2_ for an asset
balance, _3_ for a currency balance (required if _phasingMinBalance_ >
__0__, must match _phasingVotingModel_ when _phasingVotingModel_ =
__1__, _2_ or __3__)
* _phasingHolding_ is the asset or currency ID (required if
_phasingMinBalanceModel_ > 1)
* _phasingWhitelisted_ is the account ID of an account allowed to vote
for the transaction; once used, _only_ whitelisted accounts are allowed
to vote (optional, may be used up to ten times per API request)
* _phasingLinkedFullHash_ is the full hash of a transaction that must be
in the blockchain at the __phasingFinishHeight__; transactions already
in the blockchain before the acceptance of the phased transaction can
also be linked, as long as they are not more than 60 days old, or
themselves phased transactions (required only for voting model __4__,
may be used up to ten times per API request)
* _phasingHashedSecret_ is the hash of a secret phrase (up to 100 bytes
long) required for approval (required only for voting model __5__)
* _phasingHashedSecretAlgorithm_ is the hash function used: _2_ for
SHA256, _6_ for RIPEMD160 and _62_ for SHA256 followed by RIPEMD160,
according to link:/wiki/Nxt_API#Get_Constants[Get Constants] (required
for a __phasingHashedSecret__)

*Note:* When a balance affects the poll result, the result depends only
on the balance (including pending outgoing phased transfers) computed
just prior to the finish height.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

---------------------------------------
http://localhost:7876/nxt?
    requestType=sendMoney&
    recipient=NXT-BMUV-8QQR-47VK-CR7F3&
    secretPhrase=secretPhrase&
    feeNQT=200000000&
    deadline=60&
    phased=true&
    phasingFinishHeight=261550&
    phasingVotingModel=0&
    phasingQuorum=2
---------------------------------------

*Response:*

-------------------------------------------------------------------------------------------------
{
    "signatureHash": "df6c2dfcaf17f83256cfe388f408e091c08f208a060d54d1fbdb407ffdca121c",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "418a5453329d6c8d29b1b49dff30653a7f1e66992cece404d8ae997413deaa015b749a...",
        "feeNQT": "200000000",
        "type": 0,
        "fullHash": "6fd876512477ef4fab089ec2ffa084d6db75ba3cd0cef2541675515470dca374",
        "version": 1,
        "phased": true,
        "ecBlockId": "17522485785088843392",
        "signatureHash": "df6c2dfcaf17f83256cfe388f408e091c08f208a060d54d1fbdb407ffdca121c",
        "attachment": {
            "phasingFinishHeight": 261550,
            "phasingHolding": "0",
            "phasingQuorum": "2",
            "version.Phasing": 1,
            "phasingMinBalance": "0",
            "phasingMinBalanceModel": 0,
            "version.OrdinaryPayment": 0,
            "phasingVotingModel": 0
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 0,
        "amountNQT": "2000000000",
        "sender": "15295723609781267838",
        "recipientRS": "NXT-BMUV-8QQR-47VK-CR7F3",
        "recipient": "11580081983047651163",
        "ecBlockHeight": 261454,
        "deadline": 60,
        "transaction": "5759953446299424879",
        "timestamp": 43874749,
        "height": 2147483647
    },
    "unsignedTransactionBytes": "0010bd799d023c0010f09c34f225d425306e5be55a494690...",
    "broadcasted": true,
    "requestProcessingTime": 760,
    "transactionBytes": "0010bd799d023c0010f09c34f225d425306e5be55a4946908156072a...",
    "fullHash": "6fd876512477ef4fab089ec2ffa084d6db75ba3cd0cef2541675515470dca374",
    "transaction": "5759953446299424879"
}
-------------------------------------------------------------------------------------------------

_Verified 16-Apr-15_

Get Account Phased Transaction Count
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get the number of pending phased transactions associated with an account
given the account ID.

*Request:*

* _requestType_ is _getAccountPhasedTransactionCount_
* _account_ is the account ID

*Response:*

* _numberOfPhasedTransactions_ (N) is the number of pending phased
transactions
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountPhasedTransactionCount&
    account=15295723609781267838
-------------------------------------------------

*Response:*

-----------------------------------
{
    "requestProcessingTime": 1,
    "numberOfPhasedTransactions": 3
}
-----------------------------------

_Verified 17-Apr-15_

Get Account Phased Transactions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get pending phased transactions associated with an account given the
account ID in reverse chronogical creation order.

*Request:*

* _requestType_ is _getAccountPhasedTransactions_
* _account_ is the account ID
* _firstIndex_ is a zero-based index to the first phased transaction to
retrieve (optional)
* _lastIndex_ is a zero-based index to the last phased transaction to
retrieve (optional)

*Response:* Refer to link:/wiki/Nxt_API#Get_Transaction[Get Transaction]
for details.

Example
+++++++

*Request:*

---------------------------------------------
http://localhost:7876/nxt?
    requestType=getAccountPhasedTransactions&
    account=15295723609781267838&
    lastIndex=0
---------------------------------------------

*Response:*

---------------------------------------------------------------------------------------------------
{
    "requestProcessingTime": 2,
    "transactions": [
        {
            "signature": "803d3fad7076bfe3f48a8ced40bb7075539858bf2b9d23b7653671a7204e6108234d...",
            "transactionIndex": 0,
            "type": 0,
            "phased": true,
            "ecBlockId": "14167949999961480077",
            "signatureHash": "693b18675d813dcc2de1a889fd919d0c4a0eaa679df0b0f8b0ec703bc2e278d4",
            "attachment": {
                "phasingFinishHeight": 262450,
                "phasingHolding": "17091401215301664836",
                "phasingQuorum": "500",
                "version.Phasing": 1,
                "phasingMinBalance": "100",
                "phasingMinBalanceModel": 2,
                "version.OrdinaryPayment": 0,
                "phasingVotingModel": 2
            },
            "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "subtype": 0,
            "amountNQT": "500000000",
            "recipientRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "block": "11015494088798322289",
            "blockTimestamp": 43957876,
            "deadline": 60,
            "timestamp": 43957682,
            "height": 262418,
            "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
            "feeNQT": "2100000000",
            "confirmations": 27,
            "fullHash": "e57462c46447f8bd7a0bafd9ab65bde8743ca6c13213185271d7ea6c48118861",
            "version": 1,
            "sender": "15295723609781267838",
            "recipient": "11580081983047651163",
            "ecBlockHeight": 262409,
            "transaction": "13688769565509711077"
        }
   ]
}
---------------------------------------------------------------------------------------------------

_Verified 17-Apr-15_

Get Asset Phased Transactions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get pending phased transactions based on an asset in reverse chronogical
creation order. These transactions can be considered transaction
approval requests.

*Request:*

* _requestType_ is _getAssetPhasedTransactions_
* _asset_ is the asset ID
* _account_ is an account ID of the account that created the phased
transactions (optional)
* _withoutWhitelist_ is _true_ to omit phased transactions that include
a whitelist (optional)
* _firstIndex_ is a zero-based index to the first phased transaction to
retrieve (optional)
* _lastIndex_ is a zero-based index to the last phased transaction to
retrieve (optional)

*Response:* Refer to link:/wiki/Nxt_API#Get_Transaction[Get Transaction]
for details.

Example
+++++++

*Request:*

-------------------------------------------
http://localhost:7876/nxt?
    requestType=getAssetPhasedTransactions&
    asset=17091401215301664836
-------------------------------------------

*Response:*

---------------------------------------------------------------------------------------------------
{
    "requestProcessingTime": 2,
    "transactions": [
        {
            "signature": "803d3fad7076bfe3f48a8ced40bb7075539858bf2b9d23b7653671a7204e6108234d...",
            "transactionIndex": 0,
            "type": 0,
            "phased": true,
            "ecBlockId": "14167949999961480077",
            "signatureHash": "693b18675d813dcc2de1a889fd919d0c4a0eaa679df0b0f8b0ec703bc2e278d4",
            "attachment": {
                "phasingFinishHeight": 262450,
                "phasingHolding": "",
                "phasingQuorum": "500",
                "version.Phasing": 1,
                "phasingMinBalance": "100",
                "phasingMinBalanceModel": 2,
                "version.OrdinaryPayment": 0,
                "phasingVotingModel": 2
            },
            "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "subtype": 0,
            "amountNQT": "500000000",
            "recipientRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "block": "11015494088798322289",
            "blockTimestamp": 43957876,
            "deadline": 60,
            "timestamp": 43957682,
            "height": 262418,
            "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
            "feeNQT": "2100000000",
            "confirmations": 27,
            "fullHash": "e57462c46447f8bd7a0bafd9ab65bde8743ca6c13213185271d7ea6c48118861",
            "version": 1,
            "sender": "15295723609781267838",
            "recipient": "11580081983047651163",
            "ecBlockHeight": 262409,
            "transaction": "13688769565509711077"
        }
   ]
}
---------------------------------------------------------------------------------------------------

_Verified 18-Apr-15_

Get Currency Phased Transactions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get pending phased transactions based on a currency in reverse
chronogical creation order. These transactions can be considered
transaction approval requests.

*Request:*

* _requestType_ is _getCurrencyPhasedTransactions_
* _currency_ is the currency ID
* _account_ is an account ID of the account that created the phased
transactions (optional)
* _withoutWhitelist_ is _true_ to omit phased transactions that include
a whitelist (optional)
* _firstIndex_ is a zero-based index to the first phased transaction to
retrieve (optional)
* _lastIndex_ is a zero-based index to the last phased transaction to
retrieve (optional)

*Response:* Refer to link:/wiki/Nxt_API#Get_Transaction[Get Transaction]
for details.

Example
+++++++

*Request:*

----------------------------------------------
http://localhost:7876/nxt?
    requestType=getCurrencyPhasedTransactions&
    currency=12366259387060174981
----------------------------------------------

*Response:*

--------------------------------------------------------------------------------------------------
{
    "requestProcessingTime": 2,
    "transactions": [
        {
            "signature": "ec467483307c73c08e7e9195eeddf23ce129ce30d703881cca505cbb0569c2009...",
            "transactionIndex": 0,
            "type": 0,
            "phased": true,
            "ecBlockId": "7353294686633135686",
            "signatureHash": "12cc1d54a453c3d1231b991a54f3323db6a51c00387ca5480db268164d5b7cfa",
            "attachment": {
                "phasingFinishHeight": 263500,
                "phasingHolding": "12366259387060174981",
                "phasingQuorum": "100",
                "version.Phasing": 1,
                "phasingMinBalance": "10",
                "phasingMinBalanceModel": 3,
                "version.OrdinaryPayment": 0,
                "phasingVotingModel": 3
            },
            "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "subtype": 0,
            "amountNQT": "800000000",
            "recipientRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "block": "699750272975612223",
            "blockTimestamp": 44042909,
            "deadline": 60,
            "timestamp": 44042827,
            "height": 263430,
            "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
            "feeNQT": "4100000000",
            "confirmations": 2,
            "fullHash": "5799d135aacf48a317c813fea405c317e7ab90888afb701b92c17914744f244f",
            "version": 1,
            "sender": "15295723609781267838",
            "recipient": "11580081983047651163",
            "ecBlockHeight": 263424,
            "transaction": "11765882356459739479"
        }
    ]
}
--------------------------------------------------------------------------------------------------

_Verified 18-Apr-15_

Get Phasing Poll
^^^^^^^^^^^^^^^^

Get the details of a phasing poll.

*Request:*

* _requestType_ is _getPhasingPoll_
* _transaction_ is the transaction ID of the phasing poll
* _countVotes_ is _true_ to compute the poll _result_ while the votes
are still available (optional)

*Response:*

* _transaction_ (S) is the transaction ID of the phasing poll
* _account_ (S) is the number of the account that created the phasing
poll
* _accountRS_ (S) is the Reed-Solomon address of the account that
created the phasing poll
* _finishHeight_ (N) is the block height at which the poll finished or
will finish
* _votingModel_ (N) is the voting model (refer to
link:/wiki/Nxt_API#Create_Transaction_Request[Create Transaction
Request])
* _quorum_ (S) is the minimum number of votes needed to approve the poll
* _transactionFullHash_ (S) is the full hash of the phasing poll
transaction
* _finished_ (B) is _true_ if the poll is finished, _false_ otherwise
(omitted if _finished_ is __false__)
* _result_ (S) is the sum of the _result_ of each account that approved
(voted for) the transaction; an account's _result_ is _1_ if the voting
model is __0__, _4_ or __5__; it is the NQT, asset QNT or currency QNT
balance of the account if the voting model is __1__, _2_ or _3_
respectively; however, the _result_ is _0_ if _minBalance_ is not met
* _approved_ (B) is _true_ if the poll was approved, _false_ otherwise
* _minBalance_ (S) is the required minimum balance of voting accounts to
be eligible to vote
* _minBalanceModel_ (N) is the minimum balance model (refer to
link:/wiki/Nxt_API#Create_Transaction_Request[Create Transaction
Request])
* _hashedSecret_ (S) is the hash of a secret that must be included in
each approval (vote) transaction for the approval to be accepted (refer
to link:/wiki/Nxt_API#Create_Transaction_Request[Create Transaction
Request])
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _linkedFullHashes_ (A) is an array of full hashes of linked
transactions (ommited if __votingModel__ != __4__)
* _whitelist_ (A) is an array of whitelist objects containing the
following two fields (ommited if __votingModel__ != __5__):
* _whitelisted_ (S) is the number of the whitelisted account
* _whitelistedRS_ (S) is the Reed-Solomon address of the whitelisted
account

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getPhasingPoll&
    transaction=15402897900571339064
------------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "votingModel": 0,
    "quorum": "2",
    "transactionFullHash": "38292a530816c2d5693bf5d0afb20847a3c4d2f37c3665fd294a7d2fdc278d56",
    "finished": true,
    "whitelist": [
        {
            "whitelistedRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "whitelisted": "11580081983047651163"
        },
        {
            "whitelistedRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "whitelisted": "15295723609781267838"
        }
    ],
    "requestProcessingTime": 1,
    "result": "2",
    "approved": true,
    "minBalance": "0",
    "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
    "finishHeight": 259600,
    "minBalanceModel": 0,
    "transaction": "15402897900571339064",
    "account": "15295723609781267838",
    "hashedSecret": ""
}
----------------------------------------------------------------------------------------------

_Verified 15-Apr-15_

Get Phasing Poll Vote
^^^^^^^^^^^^^^^^^^^^^

Get a cast phasing poll vote given a phased transaction ID and an
account ID of a voter, if it is still available.

*Request:*

* _requestType_ is _getPhasingPollVote_
* _transaction_ is the phased transaction ID
* _account_ is the account ID of a voter in the poll

*Response:*

* _voter_ (S) is the account ID of the voter in the poll
* _voterRS_ (S) is the Reed-Solomon address of the _voter_
* _transaction_ (S) is the phased transaction ID
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getPhasingPollVote&
    transaction=12580288379938056583&
    account=15295723609781267838
-------------------------------------

*Response:*

------------------------------------------
{
    "voterRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
    "voter": "15295723609781267838",
    "requestProcessingTime": 1,
    "transaction": "9761138556025135837"
}
------------------------------------------

_Verified 17-Apr-15_

Get Phasing Poll Votes
^^^^^^^^^^^^^^^^^^^^^^

Get all cast phasing poll votes in a phasing poll given a phased
transaction ID, if they are still available.

*Request:*

* _requestType_ is _getPhasingPollVotes_
* _transaction_ is the phased transaction ID
* _firstIndex_ is a zero-based index to the first vote to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last vote to retrieve
(optional)

*Response:* Refer to link:/wiki/Nxt_API#Get_Phasing_Poll_Vote[Get
Phasing Poll Vote]

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getPhasingPollVotes&
    account=12580288379938056583
------------------------------------

*Response:*

--------------------------------------------------
{
    "votes": [
        {
            "voterRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "voter": "15295723609781267838",
            "transaction": "9761138556025135837"
        }
    ],
    "requestProcessingTime": 2
}
--------------------------------------------------

_Verified 17-Apr-15_

Get Phasing Polls
^^^^^^^^^^^^^^^^^

Get phasing poll details given multiple phased transaction IDs.

*Request:*

* _requestType_ is _getPhasingPolls_
* _transaction_ is one of the multiple phased transaction IDs
* _transaction_ is one of the multiple phased transaction IDs

⋮

* _countVotes_ is _true_ to compute the poll _result_ while the votes
are still available (optional)

*Response:* Refer to link:/wiki/Nxt_API#Get_Phasing_Poll[Get Phasing
Poll].

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=getPhasingPolls&
    transaction=12580288379938056583&
    transaction=13688769565509711077&
    countVotes=true
-------------------------------------

*Response:*

------------------------------------------------------------------------------------------------------
{
    "polls": [
        {
            "votingModel": 1,
            "quorum": "100000000000",
            "transactionFullHash": "87a92edaa02996aeaf59a619ca513563775870c2b8ca490b61b02535745cdd34",
            "finished": true,
            "whitelist": [],
            "result": "186700000000",
            "approved": true,
            "minBalance": "10000000000",
            "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "finishHeight": 262450,
            "minBalanceModel": 1,
            "transaction": "12580288379938056583",
            "account": "15295723609781267838",
            "hashedSecret": ""
        },
        {
            "votingModel": 2,
            "quorum": "500",
            "transactionFullHash": "e57462c46447f8bd7a0bafd9ab65bde8743ca6c13213185271d7ea6c48118861",
            "finished": true,
            "whitelist": [],
            "result": "500",
            "holding": "17091401215301664836",
            "approved": true,
            "minBalance": "100",
            "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "finishHeight": 262450,
            "minBalanceModel": 2,
            "transaction": "13688769565509711077",
            "account": "15295723609781267838",
            "hashedSecret": ""
        }
    ],
    "requestProcessingTime": 1
}
------------------------------------------------------------------------------------------------------

_Verified 17-Apr-15_

Get Voter Phased Transactions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Get pending phased transactions which include a whitelist in reverse
chronogical creation order. These transactions can be considered
transaction approval requests.

*Request:*

* _requestType_ is _getVoterPhasedTransactions_
* _account_ is a whitelisted account ID included in the phased
transactions
* _firstIndex_ is a zero-based index to the first phased transaction to
retrieve (optional)
* _lastIndex_ is a zero-based index to the last phased transaction to
retrieve (optional)

*Response:* Refer to link:/wiki/Nxt_API#Get_Transaction[Get Transaction]
for details.

Example
+++++++

*Request:*

-------------------------------------------
http://localhost:7876/nxt?
    requestType=getVoterPhasedTransactions&
    account=15295723609781267838
-------------------------------------------

*Response:*

---------------------------------------------------------------------------------------------------
{
    "requestProcessingTime": 1,
    "transactions": [
        {
            "signature": "e527fce6591049b61d232ebbf4171319ae4e208f34d8a055ffb09f07dec7d9033527...",
            "transactionIndex": 0,
            "type": 0,
            "phased": true,
            "ecBlockId": "13625660527605830055",
            "signatureHash": "2a3cc644b1cb48130a172de92a418d48522b45a25a36d4d48c2347f032e430ab",
            "attachment": {
                "phasingFinishHeight": 263850,
                "phasingHolding": "0",
                "phasingQuorum": "2",
                "version.Phasing": 1,
                "phasingWhitelist": [
                    "11580081983047651163",
                    "15295723609781267838"
                ],
                "phasingMinBalance": "0",
                "phasingMinBalanceModel": 0,
                "version.OrdinaryPayment": 0,
                "phasingVotingModel": 0
            },
            "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
            "subtype": 0,
            "amountNQT": "1100000000",
            "recipientRS": "NXT-BMUV-8QQR-47VK-CR7F3",
            "block": "16550954176569210781",
            "blockTimestamp": 44074579,
            "deadline": 1440,
            "timestamp": 44074556,
            "height": 263813,
            "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
            "feeNQT": "200000000",
            "confirmations": 0,
            "fullHash": "b54a7e14c910e0750af0b29c0328347e27411dbe5d158d5d358ee2165b781968",
            "version": 1,
            "sender": "15295723609781267838",
            "recipient": "11580081983047651163",
            "ecBlockHeight": 263804,
            "transaction": "8493807353039047349"
        }
    ]
}
---------------------------------------------------------------------------------------------------

_Verified 18-Apr-15_

Server Information Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Get Blockchain Status
^^^^^^^^^^^^^^^^^^^^^

Get the blockchain status.

*Request:*

* _requestType_ is _getBlockchainStatus_

*Response:*

* _lastBlock_ (S) is the last block ID on the blockchain
* _application_ (S) is application name, typically _NRS_
* _isScanning_ (B) is _true_ if the blockchain is being scanned by the
application, _false_ otherwise
* _cumulativeDifficulty_ (S) is the cumulative difficulty
* _lastBlockchainFeederHeight_ (N) is the height of the last blockchain
of greatest cumulative difficulty obtained from a peer
* _numberOfBlocks_ (N) is the number of blocks in the blockchain (height
+ 1)
* _time_ (N) is the current timestamp (in seconds since the genesis
block)
* _version_ (S) is the application version
* _lastBlockchainFeeder_ (S) is the address or announced address of the
peer providing the last blockchain of greatest cumulative difficulty
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-----------------------------------
http://localhost:7876/nxt?
    requestType=getBlockchainStatus
-----------------------------------

*Response:*

------------------------------------------------
{
    "lastBlock": "13550158957448265604",
    "application": "NRS",
    "isScanning": false,
    "cumulativeDifficulty": "10466581687632679",
    "lastBlockchainFeederHeight": 281637,
    "numberOfBlocks": 281638,
    "time": 30410779,
    "requestProcessingTime": 0,
    "version": "1.3.2",
    "lastBlockchainFeeder": "nxt01.now.im"
}
------------------------------------------------

_Verified 11-Nov-14_

Get Constants
^^^^^^^^^^^^^

Get all defined constants.

*Request:*

* _requestType_ is _getConstants_

*Response:*

* _maxBlockPayloadLength_ (N) is the maximum block payload length (in
bytes)
* _genesisAccountId_ (S) is the genesis account number
* _genesisBlockId_ (S) is the genesis block ID
* _transactionTypes_ (A) is an array of defined transactions types and
subtypes (refer to the example below)
* _peerStates_ (A) is an array of defined peer states (refer to the
example below)
* _maxArbitraryMessageLength_ (N) is the maximum length (in bytes) of an
arbitrary message
* _currencyTypes_ (A) is an array of defined currency types (refer to
the example below)

Example
+++++++

*Request:*

----------------------------
http://localhost:7876/nxt?
    requestType=getConstants
----------------------------

*Response:*

---------------------------------------------------------
{
    "maxBlockPayloadLength": 44880,
    "genesisAccountId": "1739068987193023818",
    "genesisBlockId": "2680262203532249785",
    "transactionTypes": {
        "0": {
            "subtypes": {
                "0": {
                    "mustHaveRecipient": true,
                    "name": "OrdinaryPayment",
                    "canHaveRecipient": true,
                    "isPhasingSafe": true
                }
            }
        },
        "1": {
            "subtypes": {
                "0": {
                    "mustHaveRecipient": false,
                    "name": "ArbitraryMessage",
                    "canHaveRecipient": true,
                    "isPhasingSafe": false
                },
                "1": {
                    "mustHaveRecipient": false,
                    "name": "AliasAssignment",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "2": {
                    "mustHaveRecipient": false,
                    "name": "PollCreation",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "3": {
                    "mustHaveRecipient": false,
                    "name": "VoteCasting",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "4": {
                    "mustHaveRecipient": false,
                    "name": "HubAnnouncement",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                },
                "5": {
                    "mustHaveRecipient": false,
                    "name": "AccountInfo",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                },
                "6": {
                    "mustHaveRecipient": false,
                    "name": "AliasSell",
                    "canHaveRecipient": true,
                    "isPhasingSafe": false
                },
                "7": {
                    "mustHaveRecipient": true,
                    "name": "AliasBuy",
                    "canHaveRecipient": true,
                    "isPhasingSafe": false
                },
                "8": {
                    "mustHaveRecipient": false,
                    "name": "AliasDelete",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "9": {
                    "mustHaveRecipient": false,
                    "name": "PhasingVoteCasting",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                }
            }
        },
        "2": {
            "subtypes": {
                "0": {
                    "mustHaveRecipient": false,
                    "name": "AssetIssuance",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                },
                "1": {
                    "mustHaveRecipient": true,
                    "name": "AssetTransfer",
                    "canHaveRecipient": true,
                    "isPhasingSafe": true
                },
                "2": {
                    "mustHaveRecipient": false,
                    "name": "AskOrderPlacement",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                },
                "3": {
                    "mustHaveRecipient": false,
                    "name": "BidOrderPlacement",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                },
                "4": {
                    "mustHaveRecipient": false,
                    "name": "AskOrderCancellation",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                },
                "5": {
                    "mustHaveRecipient": false,
                    "name": "BidOrderCancellation",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                },
                "6": {
                    "mustHaveRecipient": false,
                    "name": "DividendPayment",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                }
            }
        },
        "3": {
            "subtypes": {
                "0": {
                    "mustHaveRecipient": false,
                    "name": "DigitalGoodsListing",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                },
                "1": {
                    "mustHaveRecipient": false,
                    "name": "DigitalGoodsDelisting",
                    "canHaveRecipient": false,
                    "isPhasingSafe": true
                },
                "2": {
                    "mustHaveRecipient": false,
                    "name": "DigitalGoodsPriceChange",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "3": {
                    "mustHaveRecipient": false,
                    "name": "DigitalGoodsQuantityChange",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "4": {
                    "mustHaveRecipient": true,
                    "name": "DigitalGoodsPurchase",
                    "canHaveRecipient": true,
                    "isPhasingSafe": false
                },
                "5": {
                    "mustHaveRecipient": true,
                    "name": "DigitalGoodsDelivery",
                    "canHaveRecipient": true,
                    "isPhasingSafe": false
                },
                "6": {
                    "mustHaveRecipient": true,
                    "name": "DigitalGoodsFeedback",
                    "canHaveRecipient": true,
                    "isPhasingSafe": false
                },
                "7": {
                    "mustHaveRecipient": true,
                    "name": "DigitalGoodsRefund",
                    "canHaveRecipient": true,
                    "isPhasingSafe": false
                }
            }
        },
        "4": {
            "subtypes": {
                "0": {
                    "mustHaveRecipient": true,
                    "name": "EffectiveBalanceLeasing",
                    "canHaveRecipient": true,
                    "isPhasingSafe": true
                }
            }
        },
        "5": {
            "subtypes": {
                "0": {
                    "mustHaveRecipient": false,
                    "name": "CurrencyIssuance",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "1": {
                    "mustHaveRecipient": false,
                    "name": "ReserveIncrease",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "2": {
                    "mustHaveRecipient": false,
                    "name": "ReserveClaim",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "3": {
                    "mustHaveRecipient": true,
                    "name": "CurrencyTransfer",
                    "canHaveRecipient": true,
                    "isPhasingSafe": false
                },
                "4": {
                    "mustHaveRecipient": false,
                    "name": "PublishExchangeOffer",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "5": {
                    "mustHaveRecipient": false,
                    "name": "ExchangeBuy",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "6": {
                    "mustHaveRecipient": false,
                    "name": "ExchangeSell",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "7": {
                    "mustHaveRecipient": false,
                    "name": "CurrencyMinting",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                },
                "8": {
                    "mustHaveRecipient": false,
                    "name": "CurrencyDeletion",
                    "canHaveRecipient": false,
                    "isPhasingSafe": false
                }
            }
        }
    },
    "peerStates": {
        "DISCONNECTED": 2,
        "NON_CONNECTED": 0,
        "CONNECTED": 1
    },
    "votingModels": {
        "NQT": 1,
        "CURRENCY": 3,
        "ACCOUNT": 0,
        "ASSET": 2,
        "TRANSACTION": 4,
        "NONE": -1,
        "HASH": 5
    },
    "maxArbitraryMessageLength": 1000,
    "minBalanceModels": {
        "NQT": 1,
        "CURRENCY": 3,
        "ASSET": 2,
        "NONE": 0
    },
    "currencyTypes": {
        "EXCHANGEABLE": 1,
        "CLAIMABLE": 8,
        "MINTABLE": 16,
        "CONTROLLABLE": 2,
        "RESERVABLE": 4,
        "NON_SHUFFLEABLE": 32
    },
    "hashAlgorithms": {
        "SHA256": 2,
        "SHA3": 3,
        "SCRYPT": 5,
        "RIPEMD160": 6,
        "Keccak25": 25,
        "RIPEMD160_SHA256": 62
    }
}
---------------------------------------------------------

_Verified 16-Apr-15_

Get State
^^^^^^^^^

Get the state of the server node and network.

*Request:*

* _requestType_ is _getState_
* _includeCounts_ is _false_ if the fields beginning with _numberOf..._
are to be omitted (optional)

*Response:*

* _numberOfPeers_ (N) is the number of known peers on the network
* _numberOfGoods_ (N) is the number of DGS goods on the network
* _numberOfUnlockedAccounts_ (N) is the number of unlocked accounts on
this node
* _numberOfTransfers_ (N) is the number of AE transfers in the
blockchain
* _numberOfOrders_ (N) is the number of AE orders in the blockchain
* _numberOfTransactions_ (N) is the number of transactions in the
blockchain
* _maxMemory_ (N) is the maximum amount of memory the node may use (in
Bytes)
* _numberOfOffers_ (N) is the number of buy currency offers in the
blockchain
* _isScanning_ (B) is _true_ if this node is scanning the blockchain,
_false_ otherwise
* _cumulativeDifficulty_ (S) is the current cumulative forging
difficulty
* _numberOfCurrencies_ (N) is the number of currencies in the blockchain
* _numberOfAssets_ (N) is the number of AE assets in the blockchain
* _freeMemory_ (N) is the amount of free memory on this node (in Bytes)
* _availableProcessors_ (N) is the number of processors on this node
* _numberOfAccounts_ (N) is the number of accounts in the blockchain
* _numberOfBlocks_ (N) is the number of blocks (height + 1) in the
blockchain
* _isTestnet_ (B) is _true_ if the node is connected to testnet, _false_
otherwise
* _numberOfCurrencyTransfers_ (N) is the number of currency transfers in
the blockchain
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _version_ (S) is the software version on this node
* _numberOfBidOrders_ (N) is the number of AE bid orders in the
blockchain
* _lastBlock_ (S) is the last block address
* _totalMemory_ (N) is the amount of memory this node is using (in
Bytes)
* _application_ (S) is the name of the software running on this node
(typically __NRS__)
* _numberOfAliases_ (N) is the number of aliases on the network
* _lastBlockchainFeederHeight_ (N) is the height of the last blockchain
feeder
* _numberOfExchanges_ (N) is the number of currency exchanges in the
blockchain
* _numberOfTrades_ (N) is the number of AE trades in the blockchain
* _numberOfPurchases_ (N) is the number of DGS purchases in the
blockchain
* _numberOfTags_ (N) is the number of DGS tags in the blockchain
* _time_ (N) is the current node time (in seconds since the genesis
block)
* _numberOfAskOrders_ (N) is the number of AE ask orders in the
blockchain
* _lastBlockchainFeeder_ (S) is the announced name of the feeder of the
last blockchain
* _peerport_ (N) is the port for incoming peer to peer networking
requests
* _isOffline_ (B) is _true_ if this node is connected to other peers,
_false_ otherwise

*Note:* AE is Asset Exchange, DGS is Digital Goods Store

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=getState
--------------------------

*Response:*

------------------------------------------------
{
    "numberOfPeers": 431,
    "numberOfGoods": 459,
    "numberOfUnlockedAccounts": 0,
    "numberOfTransfers": 64524,
    "numberOfOrders": 3420,
    "numberOfTransactions": 634536,
    "maxMemory": 900726784,
    "numberOfOffers": 57,
    "isScanning": false,
    "isOffline": false,
    "cumulativeDifficulty": "10801094336553083",
    "numberOfCurrencies": 746,
    "numberOfAssets": 350,
    "freeMemory": 32551440,
    "availableProcessors": 4,
    "numberOfAccounts": 85033,
    "numberOfBlocks": 289637,
    "isTestnet": false,
    "numberOfCurrencyTransfers": 9,
    "requestProcessingTime": 19837,
    "version": "1.3.4",
    "numberOfBidOrders": 1070,
    "lastBlock": "8304024978641923138",
    "totalMemory": 239075328,
    "application": "NRS",
    "numberOfAliases": 135450,
    "lastBlockchainFeederHeight": 289638,
    "numberOfExchanges": 41,
    "numberOfTrades": 50386,
    "numberOfPurchases": 230,
    "numberOfTags": 421,
    "time": 31262438,
    "numberOfAskOrders": 2350,
    "lastBlockchainFeeder": "89.250.243.200"
}
------------------------------------------------

_Verified 21-Nov-14_

Get Time
^^^^^^^^

Get the current time.

*Request:*

* _requestType_ is _getTime_

*Response:*

* _time_ (N) is the current time (in seconds since the genesis block).
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=getTime
--------------------------

*Response:*

------------------------------
{
    "time": 31184078,
    "requestProcessingTime": 1
}
------------------------------

_Verified 20-Nov-14_

Token Operations
~~~~~~~~~~~~~~~~

Decode Token
^^^^^^^^^^^^

Decode an authorization token. This is used to authorize an account on a
specific web site without requiring the transmission of a secret
passphrase.

*Request:*

* _requestType_ is _decodeToken_
* _website_ is the URL (with the leading http:// unnecessary) for the
web site where authorization was granted
* _token_ is the encoded authorization string

*Response:*

* _account_ (S) is the account number associated with the token
* _accountRS_ (S) is the Reed-Solomon address of the account
* _timestamp_ (N) is the time (in seconds since the genesis block) that
the token was created
* _valid_ (B) is _true_ if token is valid, _false_ otherwise
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* Since _token_ contains the token generator's public key and
signature, _website_ can be validated as authorized by the owner of the
public key, and the public key determines the account ID.

Example
+++++++

*Request:*

-----------------------------------------------------------------------------
http://localhost:7876/nxt?
    requestType=decodeToken&
    website=iwonttellyou.com&
    token=ikt6vuqnjiq0mckepv1b90ae11ev5e987d3jm53cjvrihgnerpjk6f7p3o7t4k01...
-----------------------------------------------------------------------------

*Response:*

--------------------------------------------
{
    "valid": true,
    "accountRS": "NXT-L6FM-89WK-VK8P-FCRBB",
    "requestProcessingTime": 1,
    "account": "15323192282528158131",
    "timestamp": 31352643
}
--------------------------------------------

_Verified 22-Nov-14_

Generate Token
^^^^^^^^^^^^^^

Generate an authorization token. Tokens can be used to authorize an
account on a specific web site without requiring the transmission of a
secret passphrase. POST only.

*Request:*

* _requestType_ is _generateToken_
* _secretPhrase_ is the passphrase for the account generating the token
* _website_ is a web site URL for which authorization should be granted

*Note:* _website_ is typically a URL (with the leading http://
unnecessary) that an account owner signs with his _secretPhrase_
(private key) to bind the account to the URL, but _website_ can be any
text that the owner wishes to sign.

*Response:*

* _token_ (S) is a 160 character string representing the 100-byte token
which consists of a 32-byte public key, a 4-byte timestamp, and a
64-byte signature
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* Since _token_ contains the token generator's public key and
signature, the _website_ can be validated as authorized by the owner of
the public key using link:/wiki/Nxt_API#Decode_Token[Decode Token].

Example
+++++++

*Request:*

------------------------------
http://localhost:7876/nxt?
    requestType=generateToken&
    secretPhrase=IWontTellYou&
    website=iwonttellyou.com
------------------------------

*Response:*

----------------------------------------------------------------------------
{
    "requestProcessingTime": 3,
    "token": "ikt6vuqnjiq0mckepv1b90ae11ev5e987d3jm53cjvrihgnerpjk6f7p3o..."
}
----------------------------------------------------------------------------

_Verified 22-Nov-14_

Transaction Operations
~~~~~~~~~~~~~~~~~~~~~~

Broadcast Transaction
^^^^^^^^^^^^^^^^^^^^^

Broadcast a transaction to the network. POST only.

*Request:*

* _requestType_ is _broadcastTransaction_
* _transactionBytes_ is the bytecode of a signed transaction (optional)
* _transactionJSON_ is the transaction object (optional if
_transactionBytes_ provided)

*Response:*

* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _fullHash_ (S) is the full hash of the signed transaction
* _transaction_ (S) is the transaction ID

Example
+++++++

*Request:*

-------------------------------------------------------------------------------------
http://localhost:7876/nxt?
    requestType=broadcastTransaction&
    transactionBytes=001046aac6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143...
-------------------------------------------------------------------------------------

*Response:*

-----------------------------------------------------------------------------------
{
    "requestProcessingTime": 4,
    "fullHash": "3a304584f20cf3d2cbbdd9698ff9a166427005ab98fbe9ca4ad6253651ee81f1",
    "transaction": "15200507403046301754"
}
-----------------------------------------------------------------------------------

**Note**: If the transaction has already been broadcast, the following
INFO notice appears in the console output and log file: __Transaction
15200507403046301754 already in blockchain (or unconfirmed pool), will
not broadcast again__.

_Verified 6-Nov-14_

Calculate Full Hash
^^^^^^^^^^^^^^^^^^^

Calculate the full hash of a transaction.

*Request:*

* _requestType_ is _calculateFullHash_
* _unsignedTransactionBytes_ are the unsigned bytes of a transaction
* _signatureHash_ is a SHA-256 hash of the transaction signature

*Response:*

* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _fullHash_ (S) is the full hash of the signed transaction

Example
+++++++

*Request:*

-------------------------------------------------------------------------------------
http://localhost:7876/nxt?
    requestType=calculateFullHash&
    unsignedTransactionBytes=001046aac6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f2...&
    signatureHash=b35eae7d2f01639810d37694138aa0a86fbbf8a9bf58c2be4f2a5b8f0f30b3f7
-------------------------------------------------------------------------------------

*Response:*

----------------------------------------------------------------------------------
{
    "requestProcessingTime": 1,
    "fullHash": "3a304584f20cf3d2cbbdd9698ff9a166427005ab98fbe9ca4ad6253651ee81f1"
}
----------------------------------------------------------------------------------

_Verified 6-Nov-14_

Get Transaction
^^^^^^^^^^^^^^^

Get a transaction object given a transaction ID.

*Request:*

* _requestType_ is _getTransaction_
* _transaction_ is the transaction ID (optional)
* _fullHash_ is the full hash of the transaction (optional if
transaction ID is provided)

*Response:*

* _sender_ (S) is the account ID of the sender
* _senderRS_ (S) is the Reed-Solomon address of the sender
* _feeNQT_ (S) is the fee (in NQT) of the transaction
* _amountNQT_ (S) is the amount (in NQT) of the transaction
* _transactionIndex_ (N) is a zero-based index giving the order of the
transaction in its block
* _timestamp_ (N) is the time (in seconds since the genesis block) of
the transaction
* _referencedTransactionFullHash_ (S) is the full hash of a transaction
referenced by this one, omitted if no previous transaction is referenced
* _confirmations_ (N) is the number of transaction confirmations
* _subtype_ (N) is the transaction subtype (refer to
link:/wiki/Nxt_API#Get_Constants[Get Constants] for a current list of
subtypes)
* _block_ (S) is the ID of the block containing the transaction
* _blocktimestamp_ (N) is the timestamp (in seconds since the genesis
block) of the block
* _height_ (N) is the height of the block in the blockchain
* _senderPublicKey_ (S) is the public key of the sending account for the
transaction
* _type_ (N) is the transaction type (refer to
link:/wiki/Nxt_API#Get_Constants[Get Constants] for a current list of
types)
* _deadline_ (N) is the deadline (in minutes) for the transaction to be
confirmed
* _signature_ (S) is the digital signature of the transaction
* _recipient_ (S) is the account number of the recipient, if applicable
* _recipientRS_ (S) is the Reed-Solomon address of the recipient, if
applicable
* _fullHash_ (S) is the full hash of the signed transaction
* _signatureHash_ (S) is a SHA-256 hash of the transaction signature
* _transaction_ (S) is the transaction ID
* _version_ (N) is the transaction version number
* _phased_ (B) is _true_ if the transaction is phased, _false_ otherwise
* _ecBlockId_ (N) is the economic clustering block ID
* _ecBlockHeight_ (N) is the economic clustering block height
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _attachment_ (O) is an object containing any additional data needed
for the transaction, if applicable

*Note:* The __block__, _blocktimestamp_ and _confirmations_ fields are
omitted for unconfirmed transactions. Double-spending transactions are
not retrieved.

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getTransaction&
    transaction=15200507403046301754
------------------------------------

*Response:*

------------------------------------------------------------------------------------------
{
    "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
    "signature": "5f0378b7390ff5a815eadd1354de533eef682f139362b153576e2207320a6...",
    "feeNQT": "100000000",
    "transactionIndex": 2,
    "requestProcessingTime": 2842,
    "type": 0,
    "confirmations": 849,
    "fullHash": "3a304584f20cf3d2cbbdd9698ff9a166427005ab98fbe9ca4ad6253651ee81f1",
    "version": 1,
    "ecBlockId": "17321329645912574173",
    "signatureHash": "b35eae7d2f01639810d37694138aa0a86fbbf8a9bf58c2be4f2a5b8f0f30b3f7",
    "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
    "subtype": 0,
    "amountNQT": "100000000",
    "sender": "15323192282528158131",
    "recipientRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
    "recipient": "17013046603665206934",
    "ecBlockHeight": 275727,
    "block": "8455642159445842600",
    "blockTimestamp": 29797208,
    "deadline": 60,
    "transaction": "15200507403046301754",
    "timestamp": 29796934,
    "height": 275730
}
------------------------------------------------------------------------------------------

_Verified 31-Dec-14_

Get Transaction Bytes
^^^^^^^^^^^^^^^^^^^^^

Get the bytecode of a transaction.

*Request:*

* _requestType_ is _getTransactionBytes_
* _transaction_ is a transaction ID

*Response:*

* _confirmations_ (N) is the number of transaction confirmations
* _transactionBytes_ (S) are the bytes contained in the transaction
* _unsignedTransactionBytes_ (S) are the unsigned bytes contained in the
transaction
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=getTransactionBytes&
    transaction=15200507403046301754
------------------------------------

*Response:*

-------------------------------------------------------------------------------------------------------
{
    "unsignedTransactionBytes": "001046aac6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473...",
    "requestProcessingTime": 66,
    "confirmations": 1019,
    "transactionBytes": "001046aac6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473..."
}
-------------------------------------------------------------------------------------------------------

_Verified 5-Nov-14_

Parse Transaction
^^^^^^^^^^^^^^^^^

Get a transaction object given a (signed or unsigned) transaction
bytecode, or re-parse a transaction object. Verify the signature.

*Request:*

* _requestType_ is _parseTransaction_
* _transactionBytes_ is the signed or unsigned bytecode of the
transaction (optional)
* _transactionJSON_ is the transaction object (optional if
transactionBytes is included)

*Response:* Refer to link:/wiki/Nxt_API#Get_Transaction[Get Transaction]
for additional fields.

* _verify_ (B) is _true_ if the signature is verified, _false_ otherwise

Example
+++++++

*Request:*

-------------------------------------------------------------------------------------
http://localhost:7876/nxt?
    requestType=parseTransaction&
    transactionBytes=001046aac6013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143...
-------------------------------------------------------------------------------------

*Response:*

------------------------------------------------------------------------------------------
{
    "senderPublicKey": "57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c",
    "signature": "5f0378b7390ff5a815eadd1354de533eef682f139362b153576e2207320a6...",
    "feeNQT": "100000000",
    "requestProcessingTime": 2,
    "type": 0,
    "fullHash": "3a304584f20cf3d2cbbdd9698ff9a166427005ab98fbe9ca4ad6253651ee81f1",
    "version": 1,
    "ecBlockId": "17321329645912574173",
    "signatureHash": "b35eae7d2f01639810d37694138aa0a86fbbf8a9bf58c2be4f2a5b8f0f30b3f7",
    "senderRS": "NXT-L6FM-89WK-VK8P-FCRBB",
    "subtype": 0,
    "amountNQT": "100000000",
    "sender": "15323192282528158131",
    "recipientRS": "NXT-4VNQ-RWZC-4WWQ-GVM8S",
    "recipient": "17013046603665206934",
    "ecBlockHeight": 275727,
    "verify": true,
    "deadline": 60,
    "transaction": "15200507403046301754",
    "timestamp": 29796934,
    "height": 2147483647
}
------------------------------------------------------------------------------------------

_Verified 5-Nov-14_

Sign Transaction
^^^^^^^^^^^^^^^^

Calculates the full hash, signature hash, and transaction ID of an
unsigned transaction.

*Request:*

* _requestType_ is _signTransaction_
* _unsignedTransactionBytes_ is the unsignedTransactionBytes field of
the transaction (optional)
* _unsignedTransactionJSON_ is the transactionJSON field of the
transaction, without a signature subfield (optional if
_unsignedTransactionBytes_ is provided)
* _secretPhrase_ is the secret passphrase of the signing account
* _validate_ is _false_ to skip validation of the transaction bytes
being signed (useful on nodes where the full blockchain is not
downloaded)

*Response:*

* _signatureHash_ (S) is a SHA-256 hash of the transaction signature,
used in escrow transactions
* _verify_ (B) is _true_ the signature is verified, _false_ if not
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _transactionBytes_ (S) are the signed transaction bytes
* _fullHash_ (S) is the full hash of the signed transaction
* _transaction_ (S) is the transaction ID, derived from the _fullHash_

Example
+++++++

*Request:*

-----------------------------------------------------------------------------
http://localhost:7876/nxt?
    requestType=signTransaction&
    unsignedTransactionBytes=001046aac6013c0057fb6f3a958e320bb49c4e81b4c2...&
    secretPhrase=IWontTellYou
-----------------------------------------------------------------------------

*Response:*

-----------------------------------------------------------------------------------
{
    "signatureHash": "b35eae7d2f01639810d37694138aa0a86fbbf8a9bf58c2be4f2a5b8f...",
    "verify": true
    "requestProcessingTime": 3,
    "transactionBytes": "001046aac6013c0057fb6f3a958e320bb49c4e81b4c2...",
    "fullHash": "3a304584f20cf3d2cbbdd9698ff9a166427005ab98fbe9ca4ad6253651ee81f1",
    "transaction": "15200507403046301754",
}
-----------------------------------------------------------------------------------

_Verified 15-Dec-14_

Voting System Operations
~~~~~~~~~~~~~~~~~~~~~~~~

The Voting System is released for testing with version 1.5.0e and is
currently only available on the link:/wiki/Testnet[Testnet].

Cast Vote
^^^^^^^^^

Cast a vote on a poll. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _castVote_
* _poll_ is the poll ID
* _vote00_ is an integer within the allowed range to vote for option
(answer) 0 (optional if _minNumberOfOptions_ met, default is __-128__)
* _vote01_ is an integer within the allowed range to vote for option
(answer) 1 (optional if _minNumberOfOptions_ met, default is __-128__)
* _vote02_ is an integer within the allowed range to vote for option
(answer) 2 (optional if _minNumberOfOptions_ met, default is __-128__)

⋮

*Note:* The allowed vote values are integers between _minRangeValue_ and
__maxRangeValue__, inclusive. This range, along with the minimum and
maximum number of options that can and must be voted on are specified
when the poll is created. Refer to link:/wiki/Nxt_API#Create_Poll[Create
Poll].

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response].

Example
+++++++

*Request:*

------------------------------
http://localhost:7876/nxt?
    requestType=castVote&
    poll=5916389507928675673&
    vote02=1&
    secretPhrase=secretPhrase&
    feeNQT=100000000&
    deadline=60
------------------------------

*Response:*

----------------------------------------------------------------------------------------------
{
    "signatureHash": "54fb93860d0668477d34f7828d6a2c19be1c9229e7cb5adcebdc4962319ab22b",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "d48873e936e74069a56ba0eecdbfe3abe706bb7443e51d6651f59ef2500694087bd...",
        "feeNQT": "100000000",
        "type": 1,
        "fullHash": "ae7b714aadfe5efee0d690dfffac533dbf190827ed2f972d3dd552f4399ed648",
        "version": 1,
        "phased": false,
        "ecBlockId": "1999174047197129566",
        "signatureHash": "54fb93860d0668477d34f7828d6a2c19be1c9229e7cb5adcebdc4962319ab22b",
        "attachment": {
            "version.VoteCasting": 1,
            "poll": "5916389507928675673",
            "vote": [
                -128,
                -128,
                1
            ]
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 3,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "ecBlockHeight": 256208,
        "deadline": 60,
        "transaction": "18329367553676245934",
        "timestamp": 43095711,
        "height": 2147483647
    },
    "unsignedTransactionBytes": "01139f9691023c0010f09c34f225d425306e5be55a4946908156072a...",
    "broadcasted": true,
    "requestProcessingTime": 99,
    "transactionBytes": "01139f9691023c0010f09c34f225d425306e5be55a4946908156072afbead4d5...",
    "fullHash": "ae7b714aadfe5efee0d690dfffac533dbf190827ed2f972d3dd552f4399ed648",
    "transaction": "18329367553676245934"
}
----------------------------------------------------------------------------------------------

_Verified 7-Apr-15_

Create Poll
^^^^^^^^^^^

Create a new poll. POST only.

*Request:* Refer to link:/wiki/Nxt_API#Create_Transaction_Request[Create
Transaction Request] for common parameters.

* _requestType_ is _createPoll_
* _name_ is the name of the poll
* _description_ is the description of the poll, or the question to be
answered
* _finishHeight_ is the block height when the poll is completed
* _votingModel_ is _0_ for __One Vote Per Account__, _1_ for __Vote By
NXT Balance__, _2_ for _Vote By Asset Balance_ and _3_ for _Vote By
Currency Balance_
* _minNumberOfOptions_ is the minimum number of options (answers) that
must be voted for
* _maxNumberOfOptions_ is the maximum number of options (answers) that
can be voted for
* _minRangeValue_ is the minimum integer value for an option (answer)
(>= __0__)
* _maxRangeValue_ is the maximum integer value for an option (answer)
(>= __minRangeValue__)
* _minBalance_ is the minimum balance (in NQT or QNT) required for
voting (optional, default 0)
* _minBalanceModel_ is _1_ for NXT balance, _2_ for an asset balance,
_3_ for a currency balance (required if _minBalance_ > __0__, must match
_votingModel_ when _votingModel_ > __0__)
* _holding_ is the asset or currency ID (required if _minBalanceModel_ >
__1__)
* _option00_ is the name of option (answer) 0
* _option01_ is the name of option (answer) 1 (optional)
* _option02_ is the name of option (answer) 2 (optional)

⋮

*Notes:* Up to 100 options (answers) can be specified, but there is an
extra fee for each option beyond 20. Unlike the API, the
link:/wiki/Nxt_client_interface[NRS client] treats a vote of _0_ as a
nonvote not contributing to the number answers (options) chosen. The NRS
client uses checkboxes for selecting answers when _minRangeValue_ = 0
and _maxRangeValue_ = 1; otherwise sliding controls are used to select
answers from the allowed range.

*Response:* Refer to
link:/wiki/Nxt_API#Create_Transaction_Response[Create Transaction
Response]. The transaction ID is also the poll ID.

Example
+++++++

*Request:*

-------------------------------------
http://localhost:7876/nxt?
    requestType=createPoll&
    name=Gender Poll&
    description=What is your gender?&
    minNumberOfOptions=1&
    maxNumberOfOptions=1&
    minRangeValue=0&
    maxRangeValue=1&
    minBalance=100000000000&
    minBalanceModel=1&
    option00=Male&
    option01=Female&
    secretPhrase=secretPhrase&
    feeNQT=1000000000&
    deadline=60
-------------------------------------

*Response:*

------------------------------------------------------------------------------------------------
{
    "signatureHash": "c55ceb631d9d9e92b99a326e0323f24d80b7859a28ca43c82e1a03a6b05f02fe",
    "transactionJSON": {
        "senderPublicKey": "10f09c34f225d425306e5be55a4946908156072afbead4d574a512d7e086ef5c",
        "signature": "ffcd924f00e14c9e2cc14a04984f0d0c21bdf4551c3e332e1559c378b2975b0b9f8...",
        "feeNQT": "1000000000",
        "type": 1,
        "fullHash": "fc9e0c8014853b7e48b16e2c51ca28c4cc74939ba193e8c040c97e36a42b89c5",
        "version": 1,
        "phased": false,
        "ecBlockId": "11503767830531050607",
        "signatureHash": "c55ceb631d9d9e92b99a326e0323f24d80b7859a28ca43c82e1a03a6b05f02fe",
        "attachment": {
            "minRangeValue": 0,
            "votingModel": 0,
            "description": "What is your gender?",
            "minNumberOfOptions": 1,
            "holding": "0",
            "minBalance": "100000000000",
            "name": "Gender Poll",
            "finishHeight": 256453,
            "options": [
                "Male",
                "Female"
            ],
            "maxNumberOfOptions": 1,
            "minBalanceModel": 1,
            "version.PollCreation": 1,
            "maxRangeValue": 1
        },
        "senderRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
        "subtype": 2,
        "amountNQT": "0",
        "sender": "15295723609781267838",
        "ecBlockHeight": 256410,
        "deadline": 60,
        "transaction": "9096010195498999548",
        "timestamp": 43114026,
        "height": 2147483647
    },
    "unsignedTransactionBytes": "01122ade91023c0010f09c34f225d425306e5be55a4946908156072afb...",
    "broadcasted": true,
    "requestProcessingTime": 6,
    "transactionBytes": "01122ade91023c0010f09c34f225d425306e5be55a4946908156072afbead4d574...",
    "fullHash": "fc9e0c8014853b7e48b16e2c51ca28c4cc74939ba193e8c040c97e36a42b89c5",
    "transaction": "9096010195498999548"
}
------------------------------------------------------------------------------------------------

_Verified 7-Apr-15_

Get Poll
^^^^^^^^

Get the details of a poll.

*Request:*

* _requestType_ is _getPoll_
* _poll_ is the poll ID

*Response:*

* _poll_ (S) is the poll ID
* _account_ (S) is the account number of the poll creator
* _accountRS_ (S) is the Reed-Solomon address of the account
* _name_ (S) is the name of the poll
* _description_ (S) is the description of the poll, or the question to
be answered
* _finishHeight_ (N) is the block height when the poll is completed
* _finished_ (B) is _true_ if the poll is completed, _false_ otherwise
* _votingModel_ (N) is _0_ for __One Vote Per Account__, _1_ for __Vote
By NXT Balance__, _2_ for _Vote By Asset Balance_ and _3_ for _Vote By
Currency Balance_
* _minNumberOfOptions_ (N) is the minimum number of options (answers)
that must be voted for
* _maxNumberOfOptions_ (N) is the maximum number of options (answers)
that can be voted for
* _minBalance_ (S) is the minimum balance (in NQT or QNT) required for
voting
* _minBalanceModel_ (N) is _1_ for NXT balance, _2_ for an asset
balance, _3_ for a currency balance when _minBalance_ > 0
* _holding_ is the asset or currency ID when minBalanceModel > 1
* _options_ (A) is the array of options (answers)
* _minRangeValue_ (N) is the minimum integer value for an option
(answer)
* _maxRangeValue_ (N) is the maximum integer value for an option
(answer)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

----------------------------
http://localhost:7876/nxt?
    requestType=getPoll&
    poll=9096010195498999548
----------------------------

*Response:*

--------------------------------------------
{
    "minRangeValue": 0,
    "votingModel": 0,
    "description": "What is your gender?",
    "finished": true,
    "poll": "9096010195498999548",
    "requestProcessingTime": 1,
    "minNumberOfOptions": 1,
    "minBalance": "100000000000",
    "accountRS": "NXT-4VDY-LNVT-LMAY-FMCKA",
    "name": "Gender Poll",
    "options": [
        "Male",
        "Female"
    ],
    "finishHeight": 256453,
    "maxNumberOfOptions": 1,
    "minBalanceModel": 1,
    "account": "15295723609781267838",
    "maxRangeValue": 1
}
--------------------------------------------

_Verified 8-Apr-15_

Get Poll Result
^^^^^^^^^^^^^^^

Get the result of a poll.

*Request:*

* _requestType_ is _getPollResult_
* _poll_ is the poll ID
* _votingModel_ (optional, default null)
* _holding_ (optional, default null)
* _minBalance_ (optional, default __0__)
* _minBalanceModel_ (required if _minBalance_ > __0__, must match
_votingModel_ when _votingModel_ > __0__)

*Note:* The __votingModel__, __holding__, _minBalance_ and
_minBalanceModel_ parameters are optional and default to the original
values specified when the poll was created (refer to
link:/wiki/Nxt_API#Create_Poll[Create Poll]). The original values can
only be overridden while the votes are still stored in the database,
until 1441 blocks after the poll is completed. If _votingModel_ is
specified, __holding__, _minBalance_ and _minBalanceModel_ or the
defaults specified above apply, otherwise they are ignored.

*Response:*

* _poll_ (S) is the poll ID
* _votingModel_ (N) is the votingModel used to calculate _results_
(refer to Note above)
* _minBalanceModel_ (N) is the minBalanceModel used to calculate
_results_ (refer to Note above)
* _minBalance_ (S) is the minBalance used to calculate _results_ (refer
to Note above)
* _holding_ (S) is the asset or currency ID if the voting model uses an
asset or currency balance to determine __weight__, if applicable (refer
to Note above)
* _decimals_ (N) is the number decimal places used by the asset or
currency, if applicable
* _finished_ (B) is _true_ if the poll is complete, _false_ otherwise
* _options_ (A) is the array of options (answers) of the poll
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _results_ (A) is an array of result objects with the following fields
for each result:
* _weight_ (S) is the sum of the _weight_ of each account that voted for
the corresponding option (answer); an account's _weight_ is _1_ if the
voting model is __0__, otherwise it is the NQT, asset QNT or currency
QNT balance of the account if the voting model is __1__, _2_ or _3_
respectively; however, the _weight_ is _0_ if _minBalance_ is not met
* _result_ (S) is the sum over each account that voted for the
corresponding option (answer) of: the product of the account's _weight_
and the _rangeValue_ selected when the vote was cast.

Example
+++++++

*Request:*

------------------------------
http://localhost:7876/nxt?
    requestType=getPollResult&
    poll=16742897359122764363
------------------------------

*Response:*

-----------------------------------
{
    "votingModel": 0,
    "minBalance": "0",
    "options": [
        "Option 00",
        "Option 01",
        "Option 02"
    ],
    "finished": true,
    "poll": "16742897359122764363",
    "requestProcessingTime": 2,
    "minBalanceModel": 0,
    "results": [
        {
            "result": "3",
            "weight": "1"
        },
        {
            "result": "9",
            "weight": "2"
        },
        {
            "result": "9",
            "weight": "2"
        }
    ]
}
-----------------------------------

_Verified 14-Apr-15_

Get Poll Vote
^^^^^^^^^^^^^

Get a poll vote given a poll ID and an account ID.

*Request:*

* _requestType_ is _getPollVote_
* _poll_ is the poll ID
* _account_ is the account ID

*Response:*

* _votes_ (A) is an array of votes, the range values (S) corresponding
to each option (answer) with empty strings for non-votes
* _voter_ (S) is the account number of the voter
* _voterRS_ (S) is the Reed-Solomon address of the voter
* _transaction_ (S) is the transaction ID of the vote
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* Votes are deleted from the database 1441 blocks after the poll
is finished. Only aggregate results are kept (refer to
link:/wiki/Nxt_API#Get_Poll_Result[Get Poll Result]).

Example
+++++++

*Request:*

-------------------------------
http://localhost:7876/nxt?
    requestType=getPollVote&
    account=9096010195498999548
-------------------------------

*Response:*

------------------------------------------
{
    "voterRS": "NXT-THLJ-CYAL-JQST-6FNS5",
    "votes": [
        "1",
        ""
    ],
    "voter": "4747512364439223888",
    "requestProcessingTime": 1,
    "transaction": "6214591232702166122"
}
------------------------------------------

_Verified 8-Apr-15_

Get Poll Votes
^^^^^^^^^^^^^^

Get all votes on a poll in reverse chronological order.

*Request:*

* _requestType_ is _getPollVotes_
* _poll_ is the poll ID
* _firstIndex_ is a zero-based index to the first vote to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last vote to retrieve
(optional)

*Response:*

* _votes_ (A) is an array of vote objects (refer to
link:/wiki/Nxt_API#Get_Poll_Vote[Get Poll Vote] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* Votes are deleted from the database 1441 blocks after the poll
is finished. Only aggregate results are kept (refer to
link:/wiki/Nxt_API#Get_Poll_Result[Get Poll Result]).

Example
+++++++

*Request:*

-----------------------------
http://localhost:7876/nxt?
    requestType=getPollVotes&
    poll=9096010195498999548&
    lastIndex=0
-----------------------------

*Response:*

--------------------------------------------------
{
    "votes": [
        {
            "voterRS": "NXT-THLJ-CYAL-JQST-6FNS5",
            "votes": [
                "1",
                ""
            ],
            "voter": "4747512364439223888",
            "transaction": "6214591232702166122"
        }
    ],
    "requestProcessingTime": 1
}
--------------------------------------------------

_Verified 8-Apr-15_

Get Polls
^^^^^^^^^

Get poll details in reverse creation order.

*Request:*

* _requestType_ is _getPolls_
* _account_ is a creation account ID filter (optional)
* _firstIndex_ is a zero-based index to the first poll to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last poll to retrieve
(optional)

*Response:*

* _polls_ (A) is an array of polls (refer to
link:/wiki/Nxt_API#Get_Poll[Get Poll] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=getPolls&
    lastIndex=0
--------------------------

*Response:*

--------------------------------------------------------------------------------------------
{
    "polls": [
        {
            "minRangeValue": 0,
            "votingModel": 3,
            "description": "Should we start fully backing Credits with something tangible?",
            "finished": false,
            "poll": "10307833923604182368",
            "minNumberOfOptions": 1,
            "holding": "415923435949896799",
            "minBalance": "1000000000",
            "accountRS": "NXT-3BCV-8Q5G-9NP6-576DP",
            "name": "CRDTS owners poll",
            "options": [
                "Yes",
                "No",
                "go for fractional reserve backing"
            ],
            "finishHeight": 260218,
            "maxNumberOfOptions": 1,
            "minBalanceModel": 3,
            "account": "4227900615136683355",
            "maxRangeValue": 1
        }
    ],
    "requestProcessingTime": 0
}
--------------------------------------------------------------------------------------------

_Verified 8-Apr-15_

Search Polls
^^^^^^^^^^^^

Search for poll details given a name/description query string.

*Request:*

* _requestType_ is _searchPolls_
* _query_ is a full text query on the poll fields _name_ (S) and
_description_ (S) in the
http://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Overview[standard
Lucene syntax] (optional)
* _firstIndex_ is a zero-based index to the first poll to retrieve
(optional)
* _lastIndex_ is a zero-based index to the last poll to retrieve
(optional)
* _includeFinished_ is _true_ to include completed polls (optional)

*Response:*

* _polls_ (A) is an array of polls (refer to
link:/wiki/Nxt_API#Get_Poll[Get Poll] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

----------------------------
http://localhost:7876/nxt?
    requestType=searchPolls&
    query=hello&
    includeFinished=true
----------------------------

*Response:*

----------------------------------------------------
{
    "polls": [
        {
            "minRangeValue": 0,
            "votingModel": 1,
            "description": "Hello World Poll",
            "finished": true,
            "poll": "3043888702585899321",
            "minNumberOfOptions": 1,
            "minBalance": "0",
            "accountRS": "NXT-XK4R-7VJU-6EQG-7R335",
            "name": "Poll1",
            "options": [
                "Hello",
                "World"
            ],
            "finishHeight": 255816,
            "maxNumberOfOptions": 1,
            "minBalanceModel": 1,
            "account": "5873880488492319831",
            "maxRangeValue": 1
        }
    ],
    "requestProcessingTime": 3
}
----------------------------------------------------

_Verified 9-Apr-15_

Utilities
~~~~~~~~~

Long Convert
^^^^^^^^^^^^

Converts an ID to the signed long integer representation used
internally.

*Request:*

* _requestType_ is _longConvert_
* _id_ is a numerical ID, in decimal form but equivalent to an 8-byte
unsigned integer as produced by SHA-256 hashing

*Response:*

* _stringId_ (S) is the numerical ID
* _longId_ (S) is the signed long integer (8-bytes) representation of
the ID used internally, returned as a string
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* Java does not support unsigned integers, so any unsigned ID
(such as a block ID) visible in the link:/wiki/Nxt_client_interface[NRS
client] is represented internally as a signed integer.

Example
+++++++

*Request:*

----------------------------
http://localhost:7876/nxt?
    requestType=longConvert&
    id=15323192282528158131
----------------------------

*Response:*

---------------------------------------
{
    "stringId": "15323192282528158131",
    "requestProcessingTime": 0,
    "longId": "-3123551791181393485"
}
---------------------------------------

_Verified 12-Nov-14_

RS Convert
^^^^^^^^^^

Get both the Reed-Solomon account address and the account number given
an account ID.

*Request:*

* _requestType_ is _rsConvert_
* _account_ is an account ID (either RS address or number)

*Response:*

* _accountRS_ (S) is the Reed-Solomon address of the account
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)
* _account_ (S) is the account number

Example
+++++++

*Request:*

------------------------------------
http://localhost:7876/nxt?
    requestType=rsConvert&
    account=NXT-L6FM-89WK-VK8P-FCRBB
------------------------------------

*Response:*

--------------------------------------------
{
    "accountRS": "NXT-L6FM-89WK-VK8P-FCRBB",
    "requestProcessingTime": 1,
    "account": "15323192282528158131"
}
--------------------------------------------

_Verified 7-Nov-14_

Debug Operations
~~~~~~~~~~~~~~~~

All debug utilities require an _adminPassword=PASSWORD_ request
parameter which must match _nxt.adminPassword=PASSWORD_ in the
nxt.properties file, unless called from localhost or unless
_nxt.disableAdminPassword=true_ in the nxt.properties file.

Clear Unconfirmed Transactions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Empties the unconfirmed transaction pool. POST only.

*Request:*

* _requestType_ is _clearUnconfirmedTransactions_

*Response:*

* _done_ (B) is _true_ if the operation completed successfully
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------------------------
http://localhost:7876/nxt?
    requestType=clearUnconfirmedTransactions
--------------------------------------------

*Response:*

---------------------------------
{
    "requestProcessingTime": 814,
    "done": true
}
---------------------------------

Verified 12-Nov-14

Full Reset
^^^^^^^^^^

Deletes the entire blockchain. POST only.

*Request:*

* _requestType_ is _fullReset_

*Response:*

* _done_ (B) is _true_ if the operation completed successfully
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

*Note:* After successful completion of the reset, a new blockchain will
automatically begin downloading.

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=fullReset
--------------------------

*Response:*

----------------------------------
{
    "requestProcessingTime": 4378,
    "done": true
}
----------------------------------

Verified 12-Nov-14

Lucene Reindex
^^^^^^^^^^^^^^

Forces a rebuild of the Lucene search index. POST only.

*Request:*

* _requestType_ is _luceneReindex_

*Response:*

* _done_ (B) is _true_ if the operation completed successfully
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

-----------------------------
http://localhost:7876/nxt?
    requestType=luceneReindex
-----------------------------

*Response:*

----------------------------------
{
    "requestProcessingTime": 4480,
    "done": true
}
----------------------------------

Verified 26-Nov-14

Pop Off Blockchain
^^^^^^^^^^^^^^^^^^

Removes specified number of blocks (and associated transactions) from
the top of the blockchain. POST only.

*Request:*

* _requestType_ is _popOff_
* _numBlocks_ is the number of blocks to pop off the blockchain
(optional)
* _height_ is the new height of the blockchain after popping (optional
if _numBlocks_ provided)

*Note:* If table trimming is enabled (default), at most 1440 blocks can
be popped off without triggering a full rescan.

*Response:*

* _blocks_ (A) is an array of the blocks popped off (refer to
link:/wiki/Nxt_API#Get_Block[Get Block] for details)
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=popOff&
    numBlocks=1
--------------------------

*Response:*

------------------------------------------------------------------------------------------------------
{
    "blocks": [
        {
            "previousBlockHash": "5dd57ec106d9ba4cb1442017586b9df23c2c31ec5f1cb46fd3206015a96fd057",
            "payloadLength": 0,
            "totalAmountNQT": "0",
            "generationSignature": "e23740a05b65aa01a890a9ba1c9766183a328455b6e347add727a823e151db99",
            "generator": "16120433118765388429",
            "generatorPublicKey": "f35600023d42e79cbf0518a174141bce1decb13332e397553c3f62df7261414a",
            "baseTarget": "268653798",
            "payloadHash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
            "generatorRS": "NXT-A6NF-JE4R-XB6L-FAUFZ",
            "nextBlock": "12812496435932308379",
            "numberOfTransactions": 0,
            "blockSignature": "d9aba136c708e4f84b7ae1cf0415b25a75f9eefc8a47b1963b237ada9982a...",
            "transactions": [],
            "version": 3,
            "totalFeeNQT": "0",
            "previousBlock": "5528970115590051165",
            "block": "8125766982300698657",
            "height": 212194,
            "timestamp": 23052841
        }
    ],
    "requestProcessingTime": 109
}
------------------------------------------------------------------------------------------------------

Verified 12-Nov-14

Scan Blockchain
^^^^^^^^^^^^^^^

Scans the top of the blockchain. POST only.

*Request:*

* _requestType_ is _scan_
* _numBlocks_ is the number of blocks to scan at the top of the
blockchain (optional)
* _height_ is the height above which blockchain is to be scanned
(optional if _numBlocks_ provided)
* _validate_ is _true_ if signatures are to be re-verified and blocks
and transactions re-validated (optional)

*Note:* The derived object tables are rolled back and rebuilt by
rescanning the existing blockchain. A request to rescan more than 1440
blocks when table trimming is enabled will do a full rescan starting
from height 0. Rescan status is saved in the database, so that if a
rescan is interrupted or fails it will resume on restart.

*Response:*

* _scanTime_ (N) is the scan time
* _done_ (B) is _true_ if the operation completed successfully
* _requestProcessingTime_ (N) is the API request processing time (in
millisec)

Example
+++++++

*Request:*

--------------------------
http://localhost:7876/nxt?
    requestType=scan
--------------------------

*Response:*

----------------------------------
{
    "scanTime": 8,
    "requestProcessingTime": 8445,
    "done": true
}
----------------------------------

Verified 12-Nov-14

Retrieved from
"http://wiki.nxtcrypto.org/w/index.php?title=Nxt_API&oldid=36955"
Navigation menu
~~~~~~~~~~~~~~~

[[p-personal-label]]
Personal tools
^^^^^^^^^^^^^^

* link:#[English]
*
/w/index.php?title=Special:UserLogin&returnto=Nxt+API&type=signup[Create
account]
* /w/index.php?title=Special:UserLogin&returnto=Nxt+API[Log in]

[[p-namespaces-label]]
Namespaces
^^^^^^^^^^

* link:/wiki/Nxt_API[Page]
* /w/index.php?title=Talk:Nxt_API&action=edit&redlink=1[Discussion]

[[mw-vector-current-variant]]

[[p-variants-label]]
Variantslink:#[]
^^^^^^^^^^^^^^^^

[[p-views-label]]
Views
^^^^^

* link:/wiki/Nxt_API[Read]
* link:/w/index.php?title=Nxt_API&action=edit[View source]
* link:/w/index.php?title=Nxt_API&action=history[View history]

[[p-cactions-label]]
Actionslink:#[]
^^^^^^^^^^^^^^^

Search
^^^^^^

image:/w/skins/vector/images/search-ltr.png?303[Search]
link:/wiki/Main_Page[]
[[p-navigation-label]]
Navigation
^^^^^^^^^^

* http://www.nxtcommunity.org/[NxtCommunity Home]
* link:/wiki/Main_Page[Wiki Home]
* link:/wiki/Nxt_Wiki[About Nxt]
* link:/wiki/Getting_Started[Getting Started]
* link:/wiki/Nxt_Software[Software Downloads]
* link:/wiki/Nxt_Tools[Nxt Tools]
* link:/wiki/How-To[How-To Guides]
* link:/wiki/Under_The_Hood[Under the Hood]
* link:/wiki/For_Programmers[For Programmers]
* link:/wiki/FAQ[FAQ]
* link:/wiki/Common_problems_and_resolutions[Common Problems]
* link:/wiki/Important_Links[Links]
* link:/wiki/Glossary[Glossary]
* link:/wiki/Contribute[Contribute!]
* link:/wiki/Help_translate[Help us translate!]

[[p-tb-label]]
Tools
^^^^^

* /wiki/Special:WhatLinksHere/Nxt_API[What links here]
* /wiki/Special:RecentChangesLinked/Nxt_API[Related changes]
* /wiki/Special:SpecialPages[Special pages]
* link:/w/index.php?title=Nxt_API&printable=yes[Printable version]
* link:/w/index.php?title=Nxt_API&oldid=36955[Permanent link]
* link:/w/index.php?title=Nxt_API&action=info[Page information]
* /wiki/Special:Browse/Nxt_API[Browse properties]
* /w/index.php?title=Special:Cite&page=Nxt_API&id=36955[Cite this page]

* This page was last modified on 21 April 2015, at 11:13.
* This page has been accessed 76,352 times.

* /wiki/Nxt_Wiki:Privacy_policy[Privacy policy]
* /wiki/Nxt_Wiki:About[About Nxt Wiki]
* /wiki/Nxt_Wiki:General_disclaimer[Disclaimers]

*
link://www.mediawiki.org/[image:/w/skins/common/images/poweredby_mediawiki_88x31.png[Powered
by MediaWiki]]
https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki[image:/w/extensions/SemanticMediaWiki/resources/images/smw_button.png[Powered
by Semantic MediaWiki]]
