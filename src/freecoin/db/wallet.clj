;; Freecoin - digital social currency toolkit

;; part of Decentralized Citizen Engagement Technologies (D-CENT)
;; R&D funded by the European Commission (FP7/CAPS 610349)

;; Copyright (C) 2015 Dyne.org foundation
;; Copyright (C) 2015 Thoughtworks, Inc.

;; Sourcecode designed, written and maintained by
;; Denis Roio <jaromil@dyne.org>

;; With contributions by
;; Duncan Mortimer <dmortime@thoughtworks.com>

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.

;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(ns freecoin.db.wallet
  (:require [freecoin.db.uuid :as uuid]
            [freecoin.blockchain :as blockchain]
            [freecoin.db.mongo :as mongo]))

(defn- empty-wallet [uid sso-id name email]
  {:uid uid           ;; uuid generated by freecoin
   :sso-id sso-id     ;; id from single sign-on service
   :name  name        ;; identifier, case insensitive, space counts
   :email email       ;; verified email account
;   :info nil          ;; misc information text on the account
;   :creation-date nil ;; date on which the wallet was created
;   :last-login nil    ;; last time this participant logged in succesfully
;   :last-login-ip nil ;; connection ip address of the last succesful login
;   :failed-logins nil ;; how many consecutive failed logins were attempted
   :public-key nil    ;; public asymmetric key for off-the-blockchain encryption
   :private-key nil   ;; private asymmetric key for off-the-blockchain encryption
   :account-id nil    ;; blockchain account id
   })

(defn secret->apikey [secret]
  (str (:cookie secret) "::" (:_id secret)))

(defn new-empty-wallet!
  ([wallet-store blockchain sso-id name email]
   (let [{:keys [account-id account-secret]} (blockchain/create-account blockchain)
         wallet (-> (empty-wallet (uuid/uuid) sso-id name email)
                    (assoc :account-id account-id))]
     {:wallet (mongo/store! wallet-store :uid wallet)
      :apikey (secret->apikey account-secret)})))

(defn fetch [wallet-store uid]
  (mongo/fetch wallet-store uid))

(defn fetch-by-sso-id [wallet-store sso-id]
  (first (mongo/query wallet-store {:sso-id sso-id})))

(defn query
  ([wallet-store] (query wallet-store {}))
  ([wallet-store query-m] (mongo/query wallet-store query-m)))

(defn- wip-insert-account [blockchain-label account-id account-secret wallet]
  (-> wallet
      (assoc-in [:blockchains blockchain-label] account-id)
      (assoc-in [:blockchain-keys blockchain-label] account-secret)))

(defn add-blockchain-to-wallet-with-id! [wallet-store blockchain uid]
  (let [{:keys [account-id account-secret]} (blockchain/create-account blockchain)
        blockchain-label (blockchain/label blockchain)]
    (mongo/update! wallet-store uid
                   (partial wip-insert-account blockchain-label account-id account-secret))))
